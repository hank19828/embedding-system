
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005854  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080059e4  080059e4  000159e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b38  08005b38  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b40  08005b40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b44  08005b44  00015b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00012f38  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012fac  20012fac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000172f1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e78  00000000  00000000  00037395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  0003a210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  0003b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022464  00000000  00000000  0003c258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ae2  00000000  00000000  0005e6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d302f  00000000  00000000  0007219e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001451cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000494c  00000000  00000000  00145220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059cc 	.word	0x080059cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080059cc 	.word	0x080059cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <TaskMonitor_App>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
BaseType_t xReturned;
TaskHandle_t xHandle=NULL;

void TaskMonitor_App(void *pvParameters){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	for(;;){
		Taskmonitor();
 8000580:	f003 f884 	bl	800368c <Taskmonitor>
		vTaskDelay(1000);
 8000584:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000588:	f002 fff0 	bl	800356c <vTaskDelay>
		Taskmonitor();
 800058c:	e7f8      	b.n	8000580 <TaskMonitor_App+0x8>
	...

08000590 <Red_LED_App>:
	}
}

void Red_LED_App(void *pvParameters){
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	uint32_t Redtimer = 800;
 8000598:	f44f 7348 	mov.w	r3, #800	; 0x320
 800059c:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,led_red_Pin);
 800059e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <Red_LED_App+0x28>)
 80005a4:	f000 febf 	bl	8001326 <HAL_GPIO_TogglePin>
		vTaskDelay(Redtimer);
 80005a8:	68f8      	ldr	r0, [r7, #12]
 80005aa:	f002 ffdf 	bl	800356c <vTaskDelay>
		Redtimer+=1;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	3301      	adds	r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,led_red_Pin);
 80005b4:	e7f3      	b.n	800059e <Red_LED_App+0xe>
 80005b6:	bf00      	nop
 80005b8:	40020c00 	.word	0x40020c00

080005bc <Green_LED_App>:
	}
}

void Green_LED_App(void *pvParameters){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	uint32_t Greentimer = 1000;
 80005c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c8:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,led_green_Pin);
 80005ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <Green_LED_App+0x28>)
 80005d0:	f000 fea9 	bl	8001326 <HAL_GPIO_TogglePin>
		vTaskDelay(Greentimer);
 80005d4:	68f8      	ldr	r0, [r7, #12]
 80005d6:	f002 ffc9 	bl	800356c <vTaskDelay>
		Greentimer+=2;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	3302      	adds	r3, #2
 80005de:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,led_green_Pin);
 80005e0:	e7f3      	b.n	80005ca <Green_LED_App+0xe>
 80005e2:	bf00      	nop
 80005e4:	40020c00 	.word	0x40020c00

080005e8 <Delay_App>:
	}
}

void Delay_App(void *pvParameters){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	int delayflag=0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
	uint32_t delaytime;
	while(1){
		if(delayflag==0){
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d105      	bne.n	8000606 <Delay_App+0x1e>
			delaytime = 1000;
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	60bb      	str	r3, [r7, #8]
			delayflag=1;
 8000600:	2301      	movs	r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	e002      	b.n	800060c <Delay_App+0x24>
		}else{
			delaytime=0xFFFFFFFF;
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	60bb      	str	r3, [r7, #8]
		}
		vTaskDelay(delaytime);
 800060c:	68b8      	ldr	r0, [r7, #8]
 800060e:	f002 ffad 	bl	800356c <vTaskDelay>
		if(delayflag==0){
 8000612:	e7ef      	b.n	80005f4 <Delay_App+0xc>

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fbab 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f843 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8d5 	bl	80007d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000626:	f000 f8a9 	bl	800077c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <main+0x70>)
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2303      	movs	r3, #3
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000638:	4913      	ldr	r1, [pc, #76]	; (8000688 <main+0x74>)
 800063a:	4814      	ldr	r0, [pc, #80]	; (800068c <main+0x78>)
 800063c:	f002 fe58 	bl	80032f0 <xTaskCreate>
  		  "TaskMonitor_App",
  		  256,
  		  NULL,
  		  3,
  		  &xHandle);
  xTaskCreate(
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <main+0x70>)
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	2301      	movs	r3, #1
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	4910      	ldr	r1, [pc, #64]	; (8000690 <main+0x7c>)
 800064e:	4811      	ldr	r0, [pc, #68]	; (8000694 <main+0x80>)
 8000650:	f002 fe4e 	bl	80032f0 <xTaskCreate>
    		  "Red_LED_App",
    		  128,
    		  NULL,
    		  1,
    		  &xHandle);
  xTaskCreate(
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <main+0x70>)
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	2301      	movs	r3, #1
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2300      	movs	r3, #0
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	490d      	ldr	r1, [pc, #52]	; (8000698 <main+0x84>)
 8000662:	480e      	ldr	r0, [pc, #56]	; (800069c <main+0x88>)
 8000664:	f002 fe44 	bl	80032f0 <xTaskCreate>
    		  "Green_LED_App",
    		  128,
    		  NULL,
    		  1,
    		  &xHandle);
  xTaskCreate(
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <main+0x70>)
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	230e      	movs	r3, #14
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2300      	movs	r3, #0
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	490a      	ldr	r1, [pc, #40]	; (80006a0 <main+0x8c>)
 8000676:	480b      	ldr	r0, [pc, #44]	; (80006a4 <main+0x90>)
 8000678:	f002 fe3a 	bl	80032f0 <xTaskCreate>
    		  &xHandle);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vTaskStartScheduler();
 800067c:	f002 ffaa 	bl	80035d4 <vTaskStartScheduler>
  while (1)
 8000680:	e7fe      	b.n	8000680 <main+0x6c>
 8000682:	bf00      	nop
 8000684:	20000090 	.word	0x20000090
 8000688:	080059e4 	.word	0x080059e4
 800068c:	08000579 	.word	0x08000579
 8000690:	080059f4 	.word	0x080059f4
 8000694:	08000591 	.word	0x08000591
 8000698:	08005a00 	.word	0x08005a00
 800069c:	080005bd 	.word	0x080005bd
 80006a0:	08005a10 	.word	0x08005a10
 80006a4:	080005e9 	.word	0x080005e9

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	; 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2230      	movs	r2, #48	; 0x30
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fd60 	bl	800517c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	4b28      	ldr	r3, [pc, #160]	; (8000774 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	4a27      	ldr	r2, [pc, #156]	; (8000774 <SystemClock_Config+0xcc>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	; 0x40
 80006dc:	4b25      	ldr	r3, [pc, #148]	; (8000774 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	4b22      	ldr	r3, [pc, #136]	; (8000778 <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <SystemClock_Config+0xd0>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	2310      	movs	r3, #16
 800070e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000710:	2302      	movs	r3, #2
 8000712:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000714:	2300      	movs	r3, #0
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000718:	2308      	movs	r3, #8
 800071a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800071c:	2332      	movs	r3, #50	; 0x32
 800071e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000720:	2304      	movs	r3, #4
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000724:	2307      	movs	r3, #7
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fe15 	bl	800135c <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000738:	f000 f9ba 	bl	8000ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000748:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800074c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f876 	bl	800184c <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000766:	f000 f9a3 	bl	8000ab0 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_USART2_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x4c>)
 80007b4:	f001 fd26 	bl	8002204 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 f977 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20012ecc 	.word	0x20012ecc
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
 80007ea:	4ba2      	ldr	r3, [pc, #648]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4aa1      	ldr	r2, [pc, #644]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 80007f0:	f043 0310 	orr.w	r3, r3, #16
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b9f      	ldr	r3, [pc, #636]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0310 	and.w	r3, r3, #16
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	4b9b      	ldr	r3, [pc, #620]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a9a      	ldr	r2, [pc, #616]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b98      	ldr	r3, [pc, #608]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b94      	ldr	r3, [pc, #592]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a93      	ldr	r2, [pc, #588]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b91      	ldr	r3, [pc, #580]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b8d      	ldr	r3, [pc, #564]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a8c      	ldr	r2, [pc, #560]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b8a      	ldr	r3, [pc, #552]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	4b86      	ldr	r3, [pc, #536]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a85      	ldr	r2, [pc, #532]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b83      	ldr	r3, [pc, #524]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b7f      	ldr	r3, [pc, #508]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a7e      	ldr	r2, [pc, #504]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b7c      	ldr	r3, [pc, #496]	; (8000a74 <MX_GPIO_Init+0x2a4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2108      	movs	r1, #8
 8000892:	4879      	ldr	r0, [pc, #484]	; (8000a78 <MX_GPIO_Init+0x2a8>)
 8000894:	f000 fd2e 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2101      	movs	r1, #1
 800089c:	4877      	ldr	r0, [pc, #476]	; (8000a7c <MX_GPIO_Init+0x2ac>)
 800089e:	f000 fd29 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin
 80008a2:	2200      	movs	r2, #0
 80008a4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008a8:	4875      	ldr	r0, [pc, #468]	; (8000a80 <MX_GPIO_Init+0x2b0>)
 80008aa:	f000 fd23 	bl	80012f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ae:	2308      	movs	r3, #8
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	486c      	ldr	r0, [pc, #432]	; (8000a78 <MX_GPIO_Init+0x2a8>)
 80008c6:	f000 fb79 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4866      	ldr	r0, [pc, #408]	; (8000a7c <MX_GPIO_Init+0x2ac>)
 80008e2:	f000 fb6b 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e6:	2308      	movs	r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f6:	2305      	movs	r3, #5
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	485e      	ldr	r0, [pc, #376]	; (8000a7c <MX_GPIO_Init+0x2ac>)
 8000902:	f000 fb5b 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	485a      	ldr	r0, [pc, #360]	; (8000a84 <MX_GPIO_Init+0x2b4>)
 800091c:	f000 fb4e 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000920:	2310      	movs	r3, #16
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000930:	2306      	movs	r3, #6
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4852      	ldr	r0, [pc, #328]	; (8000a84 <MX_GPIO_Init+0x2b4>)
 800093c:	f000 fb3e 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000940:	23e0      	movs	r3, #224	; 0xe0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000950:	2305      	movs	r3, #5
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	484a      	ldr	r0, [pc, #296]	; (8000a84 <MX_GPIO_Init+0x2b4>)
 800095c:	f000 fb2e 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000960:	2304      	movs	r3, #4
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4845      	ldr	r0, [pc, #276]	; (8000a88 <MX_GPIO_Init+0x2b8>)
 8000974:	f000 fb22 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800098a:	2305      	movs	r3, #5
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	483c      	ldr	r0, [pc, #240]	; (8000a88 <MX_GPIO_Init+0x2b8>)
 8000996:	f000 fb11 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : led_green_Pin led_orange_Pin led_red_Pin led_blue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = led_green_Pin|led_orange_Pin|led_red_Pin|led_blue_Pin
 800099a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800099e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4833      	ldr	r0, [pc, #204]	; (8000a80 <MX_GPIO_Init+0x2b0>)
 80009b4:	f000 fb02 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009b8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ca:	2306      	movs	r3, #6
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4829      	ldr	r0, [pc, #164]	; (8000a7c <MX_GPIO_Init+0x2ac>)
 80009d6:	f000 faf1 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4825      	ldr	r0, [pc, #148]	; (8000a84 <MX_GPIO_Init+0x2b4>)
 80009f0:	f000 fae4 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a06:	230a      	movs	r3, #10
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481c      	ldr	r0, [pc, #112]	; (8000a84 <MX_GPIO_Init+0x2b4>)
 8000a12:	f000 fad3 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a16:	2320      	movs	r3, #32
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4815      	ldr	r0, [pc, #84]	; (8000a80 <MX_GPIO_Init+0x2b0>)
 8000a2a:	f000 fac7 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a34:	2312      	movs	r3, #18
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a40:	2304      	movs	r3, #4
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480f      	ldr	r0, [pc, #60]	; (8000a88 <MX_GPIO_Init+0x2b8>)
 8000a4c:	f000 fab6 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a54:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_GPIO_Init+0x2a8>)
 8000a66:	f000 faa9 	bl	8000fbc <HAL_GPIO_Init>

}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	; 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	40020000 	.word	0x40020000
 8000a88:	40020400 	.word	0x40020400

08000a8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d101      	bne.n	8000aa2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9e:	f000 f98b 	bl	8000db8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40001400 	.word	0x40001400

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <HAL_UART_MspInit+0x84>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d12b      	bne.n	8000b86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_UART_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b66:	230c      	movs	r3, #12
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b76:	2307      	movs	r3, #7
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_UART_MspInit+0x8c>)
 8000b82:	f000 fa1b 	bl	8000fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40004400 	.word	0x40004400
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08c      	sub	sp, #48	; 0x30
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2037      	movs	r0, #55	; 0x37
 8000bb2:	f000 f9d9 	bl	8000f68 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bb6:	2037      	movs	r0, #55	; 0x37
 8000bb8:	f000 f9f2 	bl	8000fa0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <HAL_InitTick+0xa4>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <HAL_InitTick+0xa4>)
 8000bc6:	f043 0320 	orr.w	r3, r3, #32
 8000bca:	6413      	str	r3, [r2, #64]	; 0x40
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_InitTick+0xa4>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	f003 0320 	and.w	r3, r3, #32
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd8:	f107 0210 	add.w	r2, r7, #16
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 f82e 	bl	8001c44 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000be8:	f001 f804 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 8000bec:	4603      	mov	r3, r0
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf4:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <HAL_InitTick+0xa8>)
 8000bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfa:	0c9b      	lsrs	r3, r3, #18
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_InitTick+0xac>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <HAL_InitTick+0xb0>)
 8000c04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_InitTick+0xac>)
 8000c08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c0c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <HAL_InitTick+0xac>)
 8000c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c12:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_InitTick+0xac>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_InitTick+0xac>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <HAL_InitTick+0xac>)
 8000c22:	f001 f841 	bl	8001ca8 <HAL_TIM_Base_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d104      	bne.n	8000c36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <HAL_InitTick+0xac>)
 8000c2e:	f001 f895 	bl	8001d5c <HAL_TIM_Base_Start_IT>
 8000c32:	4603      	mov	r3, r0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3730      	adds	r7, #48	; 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	431bde83 	.word	0x431bde83
 8000c48:	20012f10 	.word	0x20012f10
 8000c4c:	40001400 	.word	0x40001400

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <NMI_Handler+0x4>

08000c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <MemManage_Handler+0x4>

08000c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <BusFault_Handler+0x4>

08000c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <UsageFault_Handler+0x4>

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <TIM7_IRQHandler+0x10>)
 8000c82:	f001 f8db 	bl	8001e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20012f10 	.word	0x20012f10

08000c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c98:	4a14      	ldr	r2, [pc, #80]	; (8000cec <_sbrk+0x5c>)
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <_sbrk+0x60>)
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca4:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <_sbrk+0x64>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <_sbrk+0x68>)
 8000cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d207      	bcs.n	8000cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc0:	f004 fa24 	bl	800510c <__errno>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	e009      	b.n	8000ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <_sbrk+0x64>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <_sbrk+0x64>)
 8000ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20020000 	.word	0x20020000
 8000cf0:	00000400 	.word	0x00000400
 8000cf4:	20000094 	.word	0x20000094
 8000cf8:	20012fb0 	.word	0x20012fb0

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d26:	490e      	ldr	r1, [pc, #56]	; (8000d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d3c:	4c0b      	ldr	r4, [pc, #44]	; (8000d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d4a:	f7ff ffd7 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f004 f9e3 	bl	8005118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fc5f 	bl	8000614 <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d64:	08005b48 	.word	0x08005b48
  ldr r2, =_sbss
 8000d68:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d6c:	20012fac 	.word	0x20012fac

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_Init+0x40>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_Init+0x40>)
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x40>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f8d8 	bl	8000f52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fefa 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fe88 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20012f58 	.word	0x20012f58

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20012f58 	.word	0x20012f58

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff4c 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7a:	f7ff ff61 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f7ff ffb1 	bl	8000eec <NVIC_EncodePriority>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff80 	bl	8000e98 <__NVIC_SetPriority>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff54 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e16b      	b.n	80012b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f040 815a 	bne.w	80012aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d005      	beq.n	800100e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	2b02      	cmp	r3, #2
 800100c:	d130      	bne.n	8001070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	f003 0201 	and.w	r2, r3, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b03      	cmp	r3, #3
 800107a:	d017      	beq.n	80010ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d123      	bne.n	8001100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	69b9      	ldr	r1, [r7, #24]
 80010fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0203 	and.w	r2, r3, #3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80b4 	beq.w	80012aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b60      	ldr	r3, [pc, #384]	; (80012c8 <HAL_GPIO_Init+0x30c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a5f      	ldr	r2, [pc, #380]	; (80012c8 <HAL_GPIO_Init+0x30c>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b5d      	ldr	r3, [pc, #372]	; (80012c8 <HAL_GPIO_Init+0x30c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115e:	4a5b      	ldr	r2, [pc, #364]	; (80012cc <HAL_GPIO_Init+0x310>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a52      	ldr	r2, [pc, #328]	; (80012d0 <HAL_GPIO_Init+0x314>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d02b      	beq.n	80011e2 <HAL_GPIO_Init+0x226>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a51      	ldr	r2, [pc, #324]	; (80012d4 <HAL_GPIO_Init+0x318>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x222>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a50      	ldr	r2, [pc, #320]	; (80012d8 <HAL_GPIO_Init+0x31c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x21e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4f      	ldr	r2, [pc, #316]	; (80012dc <HAL_GPIO_Init+0x320>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x21a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4e      	ldr	r2, [pc, #312]	; (80012e0 <HAL_GPIO_Init+0x324>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x216>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4d      	ldr	r2, [pc, #308]	; (80012e4 <HAL_GPIO_Init+0x328>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x212>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4c      	ldr	r2, [pc, #304]	; (80012e8 <HAL_GPIO_Init+0x32c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x20e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4b      	ldr	r2, [pc, #300]	; (80012ec <HAL_GPIO_Init+0x330>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x20a>
 80011c2:	2307      	movs	r3, #7
 80011c4:	e00e      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011c6:	2308      	movs	r3, #8
 80011c8:	e00c      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011ca:	2306      	movs	r3, #6
 80011cc:	e00a      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011ce:	2305      	movs	r3, #5
 80011d0:	e008      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011d2:	2304      	movs	r3, #4
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011d6:	2303      	movs	r3, #3
 80011d8:	e004      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011da:	2302      	movs	r3, #2
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_GPIO_Init+0x228>
 80011e2:	2300      	movs	r3, #0
 80011e4:	69fa      	ldr	r2, [r7, #28]
 80011e6:	f002 0203 	and.w	r2, r2, #3
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	4093      	lsls	r3, r2
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f4:	4935      	ldr	r1, [pc, #212]	; (80012cc <HAL_GPIO_Init+0x310>)
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <HAL_GPIO_Init+0x334>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001226:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <HAL_GPIO_Init+0x334>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_GPIO_Init+0x334>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001250:	4a27      	ldr	r2, [pc, #156]	; (80012f0 <HAL_GPIO_Init+0x334>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <HAL_GPIO_Init+0x334>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800127a:	4a1d      	ldr	r2, [pc, #116]	; (80012f0 <HAL_GPIO_Init+0x334>)
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001280:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <HAL_GPIO_Init+0x334>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a4:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <HAL_GPIO_Init+0x334>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3301      	adds	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	2b0f      	cmp	r3, #15
 80012b4:	f67f ae90 	bls.w	8000fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40013800 	.word	0x40013800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020400 	.word	0x40020400
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40021400 	.word	0x40021400
 80012e8:	40021800 	.word	0x40021800
 80012ec:	40021c00 	.word	0x40021c00
 80012f0:	40013c00 	.word	0x40013c00

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001310:	e003      	b.n	800131a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	041a      	lsls	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	619a      	str	r2, [r3, #24]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001326:	b480      	push	{r7}
 8001328:	b085      	sub	sp, #20
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	460b      	mov	r3, r1
 8001330:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001338:	887a      	ldrh	r2, [r7, #2]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4013      	ands	r3, r2
 800133e:	041a      	lsls	r2, r3, #16
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43d9      	mvns	r1, r3
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	400b      	ands	r3, r1
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	619a      	str	r2, [r3, #24]
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e264      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d075      	beq.n	8001466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800137a:	4ba3      	ldr	r3, [pc, #652]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b04      	cmp	r3, #4
 8001384:	d00c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001386:	4ba0      	ldr	r3, [pc, #640]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800138e:	2b08      	cmp	r3, #8
 8001390:	d112      	bne.n	80013b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001392:	4b9d      	ldr	r3, [pc, #628]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800139e:	d10b      	bne.n	80013b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	4b99      	ldr	r3, [pc, #612]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d05b      	beq.n	8001464 <HAL_RCC_OscConfig+0x108>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d157      	bne.n	8001464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e23f      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c0:	d106      	bne.n	80013d0 <HAL_RCC_OscConfig+0x74>
 80013c2:	4b91      	ldr	r3, [pc, #580]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a90      	ldr	r2, [pc, #576]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e01d      	b.n	800140c <HAL_RCC_OscConfig+0xb0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x98>
 80013da:	4b8b      	ldr	r3, [pc, #556]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a8a      	ldr	r2, [pc, #552]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b88      	ldr	r3, [pc, #544]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a87      	ldr	r2, [pc, #540]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0xb0>
 80013f4:	4b84      	ldr	r3, [pc, #528]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a83      	ldr	r2, [pc, #524]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b81      	ldr	r3, [pc, #516]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a80      	ldr	r2, [pc, #512]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fce4 	bl	8000de0 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fce0 	bl	8000de0 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e204      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b76      	ldr	r3, [pc, #472]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0xc0>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fcd0 	bl	8000de0 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fccc 	bl	8000de0 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e1f0      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	4b6c      	ldr	r3, [pc, #432]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0xe8>
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d063      	beq.n	800153a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001472:	4b65      	ldr	r3, [pc, #404]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147e:	4b62      	ldr	r3, [pc, #392]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001486:	2b08      	cmp	r3, #8
 8001488:	d11c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148a:	4b5f      	ldr	r3, [pc, #380]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	4b5c      	ldr	r3, [pc, #368]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x152>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d001      	beq.n	80014ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e1c4      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b56      	ldr	r3, [pc, #344]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4952      	ldr	r1, [pc, #328]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	e03a      	b.n	800153a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d020      	beq.n	800150e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014cc:	4b4f      	ldr	r3, [pc, #316]	; (800160c <HAL_RCC_OscConfig+0x2b0>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d2:	f7ff fc85 	bl	8000de0 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff fc81 	bl	8000de0 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e1a5      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ec:	4b46      	ldr	r3, [pc, #280]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b43      	ldr	r3, [pc, #268]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4940      	ldr	r1, [pc, #256]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
 800150c:	e015      	b.n	800153a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150e:	4b3f      	ldr	r3, [pc, #252]	; (800160c <HAL_RCC_OscConfig+0x2b0>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fc64 	bl	8000de0 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff fc60 	bl	8000de0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e184      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d030      	beq.n	80015a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d016      	beq.n	800157c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154e:	4b30      	ldr	r3, [pc, #192]	; (8001610 <HAL_RCC_OscConfig+0x2b4>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff fc44 	bl	8000de0 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff fc40 	bl	8000de0 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e164      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x200>
 800157a:	e015      	b.n	80015a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <HAL_RCC_OscConfig+0x2b4>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7ff fc2d 	bl	8000de0 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff fc29 	bl	8000de0 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e14d      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 800159e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80a0 	beq.w	80016f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10f      	bne.n	80015e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e2:	2301      	movs	r3, #1
 80015e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_RCC_OscConfig+0x2b8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d121      	bne.n	8001636 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_RCC_OscConfig+0x2b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_RCC_OscConfig+0x2b8>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fbef 	bl	8000de0 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	e011      	b.n	800162a <HAL_RCC_OscConfig+0x2ce>
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	42470000 	.word	0x42470000
 8001610:	42470e80 	.word	0x42470e80
 8001614:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001618:	f7ff fbe2 	bl	8000de0 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e106      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162a:	4b85      	ldr	r3, [pc, #532]	; (8001840 <HAL_RCC_OscConfig+0x4e4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d106      	bne.n	800164c <HAL_RCC_OscConfig+0x2f0>
 800163e:	4b81      	ldr	r3, [pc, #516]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	4a80      	ldr	r2, [pc, #512]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6713      	str	r3, [r2, #112]	; 0x70
 800164a:	e01c      	b.n	8001686 <HAL_RCC_OscConfig+0x32a>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d10c      	bne.n	800166e <HAL_RCC_OscConfig+0x312>
 8001654:	4b7b      	ldr	r3, [pc, #492]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a7a      	ldr	r2, [pc, #488]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6713      	str	r3, [r2, #112]	; 0x70
 8001660:	4b78      	ldr	r3, [pc, #480]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001664:	4a77      	ldr	r2, [pc, #476]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6713      	str	r3, [r2, #112]	; 0x70
 800166c:	e00b      	b.n	8001686 <HAL_RCC_OscConfig+0x32a>
 800166e:	4b75      	ldr	r3, [pc, #468]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	4a74      	ldr	r2, [pc, #464]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6713      	str	r3, [r2, #112]	; 0x70
 800167a:	4b72      	ldr	r3, [pc, #456]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	4a71      	ldr	r2, [pc, #452]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d015      	beq.n	80016ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff fba7 	bl	8000de0 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fba3 	bl	8000de0 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e0c5      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ac:	4b65      	ldr	r3, [pc, #404]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ee      	beq.n	8001696 <HAL_RCC_OscConfig+0x33a>
 80016b8:	e014      	b.n	80016e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb91 	bl	8000de0 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fb8d 	bl	8000de0 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e0af      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d8:	4b5a      	ldr	r3, [pc, #360]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1ee      	bne.n	80016c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d105      	bne.n	80016f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ea:	4b56      	ldr	r3, [pc, #344]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a55      	ldr	r2, [pc, #340]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 80016f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 809b 	beq.w	8001836 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001700:	4b50      	ldr	r3, [pc, #320]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b08      	cmp	r3, #8
 800170a:	d05c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d141      	bne.n	8001798 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001714:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <HAL_RCC_OscConfig+0x4ec>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff fb61 	bl	8000de0 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001722:	f7ff fb5d 	bl	8000de0 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e081      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001734:	4b43      	ldr	r3, [pc, #268]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f0      	bne.n	8001722 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69da      	ldr	r2, [r3, #28]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	019b      	lsls	r3, r3, #6
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	085b      	lsrs	r3, r3, #1
 8001758:	3b01      	subs	r3, #1
 800175a:	041b      	lsls	r3, r3, #16
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	061b      	lsls	r3, r3, #24
 8001764:	4937      	ldr	r1, [pc, #220]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001766:	4313      	orrs	r3, r2
 8001768:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800176a:	4b37      	ldr	r3, [pc, #220]	; (8001848 <HAL_RCC_OscConfig+0x4ec>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fb36 	bl	8000de0 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff fb32 	bl	8000de0 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e056      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178a:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x41c>
 8001796:	e04e      	b.n	8001836 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001798:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <HAL_RCC_OscConfig+0x4ec>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff fb1f 	bl	8000de0 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff fb1b 	bl	8000de0 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e03f      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x44a>
 80017c4:	e037      	b.n	8001836 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e032      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d028      	beq.n	8001832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d121      	bne.n	8001832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d11a      	bne.n	8001832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001802:	4013      	ands	r3, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001808:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180a:	4293      	cmp	r3, r2
 800180c:	d111      	bne.n	8001832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	3b01      	subs	r3, #1
 800181c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40007000 	.word	0x40007000
 8001844:	40023800 	.word	0x40023800
 8001848:	42470060 	.word	0x42470060

0800184c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0cc      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d90c      	bls.n	8001888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0b8      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a0:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4a58      	ldr	r2, [pc, #352]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c4:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	494d      	ldr	r1, [pc, #308]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d044      	beq.n	800196c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d119      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e07f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d003      	beq.n	800190a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001906:	2b03      	cmp	r3, #3
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e06f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e067      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f023 0203 	bic.w	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4934      	ldr	r1, [pc, #208]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800193c:	f7ff fa50 	bl	8000de0 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001942:	e00a      	b.n	800195a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001944:	f7ff fa4c 	bl	8000de0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e04f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 020c 	and.w	r2, r3, #12
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	429a      	cmp	r2, r3
 800196a:	d1eb      	bne.n	8001944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d20c      	bcs.n	8001994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e032      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4916      	ldr	r1, [pc, #88]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	490e      	ldr	r1, [pc, #56]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019d2:	f000 f821 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	490a      	ldr	r1, [pc, #40]	; (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	5ccb      	ldrb	r3, [r1, r3]
 80019e6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f8d2 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023c00 	.word	0x40023c00
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	08005aec 	.word	0x08005aec
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a30:	4b67      	ldr	r3, [pc, #412]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d00d      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x40>
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	f200 80bd 	bhi.w	8001bbc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x34>
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a4a:	e0b7      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b61      	ldr	r3, [pc, #388]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a4e:	60bb      	str	r3, [r7, #8]
       break;
 8001a50:	e0b7      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a52:	4b61      	ldr	r3, [pc, #388]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a54:	60bb      	str	r3, [r7, #8]
      break;
 8001a56:	e0b4      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a58:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a62:	4b5b      	ldr	r3, [pc, #364]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d04d      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6e:	4b58      	ldr	r3, [pc, #352]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	099b      	lsrs	r3, r3, #6
 8001a74:	461a      	mov	r2, r3
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a7e:	f04f 0100 	mov.w	r1, #0
 8001a82:	ea02 0800 	and.w	r8, r2, r0
 8001a86:	ea03 0901 	and.w	r9, r3, r1
 8001a8a:	4640      	mov	r0, r8
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	014b      	lsls	r3, r1, #5
 8001a98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a9c:	0142      	lsls	r2, r0, #5
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	ebb0 0008 	subs.w	r0, r0, r8
 8001aa6:	eb61 0109 	sbc.w	r1, r1, r9
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	018b      	lsls	r3, r1, #6
 8001ab4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ab8:	0182      	lsls	r2, r0, #6
 8001aba:	1a12      	subs	r2, r2, r0
 8001abc:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	00d9      	lsls	r1, r3, #3
 8001aca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ace:	00d0      	lsls	r0, r2, #3
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	eb12 0208 	adds.w	r2, r2, r8
 8001ad8:	eb43 0309 	adc.w	r3, r3, r9
 8001adc:	f04f 0000 	mov.w	r0, #0
 8001ae0:	f04f 0100 	mov.w	r1, #0
 8001ae4:	0259      	lsls	r1, r3, #9
 8001ae6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001aea:	0250      	lsls	r0, r2, #9
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	461a      	mov	r2, r3
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	f7fe fbc0 	bl	8000280 <__aeabi_uldivmod>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4613      	mov	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e04a      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	099b      	lsrs	r3, r3, #6
 8001b10:	461a      	mov	r2, r3
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b1a:	f04f 0100 	mov.w	r1, #0
 8001b1e:	ea02 0400 	and.w	r4, r2, r0
 8001b22:	ea03 0501 	and.w	r5, r3, r1
 8001b26:	4620      	mov	r0, r4
 8001b28:	4629      	mov	r1, r5
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	014b      	lsls	r3, r1, #5
 8001b34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b38:	0142      	lsls	r2, r0, #5
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	1b00      	subs	r0, r0, r4
 8001b40:	eb61 0105 	sbc.w	r1, r1, r5
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	018b      	lsls	r3, r1, #6
 8001b4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b52:	0182      	lsls	r2, r0, #6
 8001b54:	1a12      	subs	r2, r2, r0
 8001b56:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5a:	f04f 0000 	mov.w	r0, #0
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	00d9      	lsls	r1, r3, #3
 8001b64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b68:	00d0      	lsls	r0, r2, #3
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	1912      	adds	r2, r2, r4
 8001b70:	eb45 0303 	adc.w	r3, r5, r3
 8001b74:	f04f 0000 	mov.w	r0, #0
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	0299      	lsls	r1, r3, #10
 8001b7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b82:	0290      	lsls	r0, r2, #10
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	f7fe fb74 	bl	8000280 <__aeabi_uldivmod>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	0c1b      	lsrs	r3, r3, #16
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	3301      	adds	r3, #1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	60bb      	str	r3, [r7, #8]
      break;
 8001bba:	e002      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bbe:	60bb      	str	r3, [r7, #8]
      break;
 8001bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	00f42400 	.word	0x00f42400
 8001bd8:	007a1200 	.word	0x007a1200

08001bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000000 	.word	0x20000000

08001bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bf8:	f7ff fff0 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	0a9b      	lsrs	r3, r3, #10
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4903      	ldr	r1, [pc, #12]	; (8001c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	08005afc 	.word	0x08005afc

08001c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c20:	f7ff ffdc 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0b5b      	lsrs	r3, r3, #13
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4903      	ldr	r1, [pc, #12]	; (8001c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	08005afc 	.word	0x08005afc

08001c44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	220f      	movs	r2, #15
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 0203 	and.w	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <HAL_RCC_GetClockConfig+0x60>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0207 	and.w	r2, r3, #7
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	601a      	str	r2, [r3, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40023c00 	.word	0x40023c00

08001ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e041      	b.n	8001d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f839 	bl	8001d46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f000 f9d8 	bl	800209c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d001      	beq.n	8001d74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e04e      	b.n	8001e12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a23      	ldr	r2, [pc, #140]	; (8001e20 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d022      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9e:	d01d      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1f      	ldr	r2, [pc, #124]	; (8001e24 <HAL_TIM_Base_Start_IT+0xc8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d018      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <HAL_TIM_Base_Start_IT+0xcc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d013      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_TIM_Base_Start_IT+0xd0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00e      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d009      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d004      	beq.n	8001ddc <HAL_TIM_Base_Start_IT+0x80>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <HAL_TIM_Base_Start_IT+0xdc>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d111      	bne.n	8001e00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d010      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfe:	e007      	b.n	8001e10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40010000 	.word	0x40010000
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40000800 	.word	0x40000800
 8001e2c:	40000c00 	.word	0x40000c00
 8001e30:	40010400 	.word	0x40010400
 8001e34:	40014000 	.word	0x40014000
 8001e38:	40001800 	.word	0x40001800

08001e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d122      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d11b      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0202 	mvn.w	r2, #2
 8001e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8ee 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 8001e84:	e005      	b.n	8001e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8e0 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f8f1 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d122      	bne.n	8001eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d11b      	bne.n	8001eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0204 	mvn.w	r2, #4
 8001ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f8c4 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 8001ed8:	e005      	b.n	8001ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f8b6 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f8c7 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d122      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d11b      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0208 	mvn.w	r2, #8
 8001f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2204      	movs	r2, #4
 8001f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f89a 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 8001f2c:	e005      	b.n	8001f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f88c 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f89d 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d122      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b10      	cmp	r3, #16
 8001f5a:	d11b      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0210 	mvn.w	r2, #16
 8001f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2208      	movs	r2, #8
 8001f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f870 	bl	8002060 <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f862 	bl	800204c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f873 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d10e      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0201 	mvn.w	r2, #1
 8001fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fd66 	bl	8000a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fca:	2b80      	cmp	r3, #128	; 0x80
 8001fcc:	d10e      	bne.n	8001fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	2b80      	cmp	r3, #128	; 0x80
 8001fda:	d107      	bne.n	8001fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f902 	bl	80021f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002004:	2b40      	cmp	r3, #64	; 0x40
 8002006:	d107      	bne.n	8002018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f838 	bl	8002088 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	2b20      	cmp	r3, #32
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b20      	cmp	r3, #32
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0220 	mvn.w	r2, #32
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8cc 	bl	80021dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a40      	ldr	r2, [pc, #256]	; (80021b0 <TIM_Base_SetConfig+0x114>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d013      	beq.n	80020dc <TIM_Base_SetConfig+0x40>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ba:	d00f      	beq.n	80020dc <TIM_Base_SetConfig+0x40>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a3d      	ldr	r2, [pc, #244]	; (80021b4 <TIM_Base_SetConfig+0x118>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00b      	beq.n	80020dc <TIM_Base_SetConfig+0x40>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a3c      	ldr	r2, [pc, #240]	; (80021b8 <TIM_Base_SetConfig+0x11c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d007      	beq.n	80020dc <TIM_Base_SetConfig+0x40>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a3b      	ldr	r2, [pc, #236]	; (80021bc <TIM_Base_SetConfig+0x120>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d003      	beq.n	80020dc <TIM_Base_SetConfig+0x40>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a3a      	ldr	r2, [pc, #232]	; (80021c0 <TIM_Base_SetConfig+0x124>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d108      	bne.n	80020ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a2f      	ldr	r2, [pc, #188]	; (80021b0 <TIM_Base_SetConfig+0x114>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02b      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fc:	d027      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a2c      	ldr	r2, [pc, #176]	; (80021b4 <TIM_Base_SetConfig+0x118>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d023      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a2b      	ldr	r2, [pc, #172]	; (80021b8 <TIM_Base_SetConfig+0x11c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01f      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a2a      	ldr	r2, [pc, #168]	; (80021bc <TIM_Base_SetConfig+0x120>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01b      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a29      	ldr	r2, [pc, #164]	; (80021c0 <TIM_Base_SetConfig+0x124>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d017      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <TIM_Base_SetConfig+0x128>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a27      	ldr	r2, [pc, #156]	; (80021c8 <TIM_Base_SetConfig+0x12c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00f      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a26      	ldr	r2, [pc, #152]	; (80021cc <TIM_Base_SetConfig+0x130>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00b      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a25      	ldr	r2, [pc, #148]	; (80021d0 <TIM_Base_SetConfig+0x134>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d007      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a24      	ldr	r2, [pc, #144]	; (80021d4 <TIM_Base_SetConfig+0x138>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d003      	beq.n	800214e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a23      	ldr	r2, [pc, #140]	; (80021d8 <TIM_Base_SetConfig+0x13c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d108      	bne.n	8002160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4313      	orrs	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <TIM_Base_SetConfig+0x114>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d003      	beq.n	8002194 <TIM_Base_SetConfig+0xf8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <TIM_Base_SetConfig+0x124>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d103      	bne.n	800219c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	615a      	str	r2, [r3, #20]
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40000800 	.word	0x40000800
 80021bc:	40000c00 	.word	0x40000c00
 80021c0:	40010400 	.word	0x40010400
 80021c4:	40014000 	.word	0x40014000
 80021c8:	40014400 	.word	0x40014400
 80021cc:	40014800 	.word	0x40014800
 80021d0:	40001800 	.word	0x40001800
 80021d4:	40001c00 	.word	0x40001c00
 80021d8:	40002000 	.word	0x40002000

080021dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e03f      	b.n	8002296 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fc6e 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2224      	movs	r2, #36	; 0x24
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002246:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f929 	bl	80024a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800225c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800226c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800227c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b08a      	sub	sp, #40	; 0x28
 80022a2:	af02      	add	r7, sp, #8
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	4613      	mov	r3, r2
 80022ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d17c      	bne.n	80023b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <HAL_UART_Transmit+0x2c>
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e075      	b.n	80023ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_UART_Transmit+0x3e>
 80022d8:	2302      	movs	r3, #2
 80022da:	e06e      	b.n	80023ba <HAL_UART_Transmit+0x11c>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2221      	movs	r2, #33	; 0x21
 80022ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022f2:	f7fe fd75 	bl	8000de0 <HAL_GetTick>
 80022f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	88fa      	ldrh	r2, [r7, #6]
 80022fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	88fa      	ldrh	r2, [r7, #6]
 8002302:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230c:	d108      	bne.n	8002320 <HAL_UART_Transmit+0x82>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d104      	bne.n	8002320 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	61bb      	str	r3, [r7, #24]
 800231e:	e003      	b.n	8002328 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002330:	e02a      	b.n	8002388 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2200      	movs	r2, #0
 800233a:	2180      	movs	r1, #128	; 0x80
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 f840 	bl	80023c2 <UART_WaitOnFlagUntilTimeout>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e036      	b.n	80023ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10b      	bne.n	800236a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002360:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	3302      	adds	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
 8002368:	e007      	b.n	800237a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	3301      	adds	r3, #1
 8002378:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800238c:	b29b      	uxth	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1cf      	bne.n	8002332 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2200      	movs	r2, #0
 800239a:	2140      	movs	r1, #64	; 0x40
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 f810 	bl	80023c2 <UART_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e006      	b.n	80023ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e000      	b.n	80023ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023b8:	2302      	movs	r3, #2
  }
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3720      	adds	r7, #32
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b090      	sub	sp, #64	; 0x40
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	4613      	mov	r3, r2
 80023d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023d2:	e050      	b.n	8002476 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023da:	d04c      	beq.n	8002476 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80023e2:	f7fe fcfd 	bl	8000de0 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d241      	bcs.n	8002476 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	330c      	adds	r3, #12
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	e853 3f00 	ldrex	r3, [r3]
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	330c      	adds	r3, #12
 8002410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002412:	637a      	str	r2, [r7, #52]	; 0x34
 8002414:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002416:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800241a:	e841 2300 	strex	r3, r2, [r1]
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1e5      	bne.n	80023f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3314      	adds	r3, #20
 800242c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	e853 3f00 	ldrex	r3, [r3]
 8002434:	613b      	str	r3, [r7, #16]
   return(result);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	63bb      	str	r3, [r7, #56]	; 0x38
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3314      	adds	r3, #20
 8002444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002446:	623a      	str	r2, [r7, #32]
 8002448:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244a:	69f9      	ldr	r1, [r7, #28]
 800244c:	6a3a      	ldr	r2, [r7, #32]
 800244e:	e841 2300 	strex	r3, r2, [r1]
 8002452:	61bb      	str	r3, [r7, #24]
   return(result);
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1e5      	bne.n	8002426 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e00f      	b.n	8002496 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4013      	ands	r3, r2
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	bf0c      	ite	eq
 8002486:	2301      	moveq	r3, #1
 8002488:	2300      	movne	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	429a      	cmp	r2, r3
 8002492:	d09f      	beq.n	80023d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3740      	adds	r7, #64	; 0x40
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024a4:	b09f      	sub	sp, #124	; 0x7c
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b6:	68d9      	ldr	r1, [r3, #12]
 80024b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	ea40 0301 	orr.w	r3, r0, r1
 80024c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80024da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024e4:	f021 010c 	bic.w	r1, r1, #12
 80024e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ee:	430b      	orrs	r3, r1
 80024f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fe:	6999      	ldr	r1, [r3, #24]
 8002500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	ea40 0301 	orr.w	r3, r0, r1
 8002508:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800250a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4bc5      	ldr	r3, [pc, #788]	; (8002824 <UART_SetConfig+0x384>)
 8002510:	429a      	cmp	r2, r3
 8002512:	d004      	beq.n	800251e <UART_SetConfig+0x7e>
 8002514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4bc3      	ldr	r3, [pc, #780]	; (8002828 <UART_SetConfig+0x388>)
 800251a:	429a      	cmp	r2, r3
 800251c:	d103      	bne.n	8002526 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800251e:	f7ff fb7d 	bl	8001c1c <HAL_RCC_GetPCLK2Freq>
 8002522:	6778      	str	r0, [r7, #116]	; 0x74
 8002524:	e002      	b.n	800252c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002526:	f7ff fb65 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 800252a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800252c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002534:	f040 80b6 	bne.w	80026a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253a:	461c      	mov	r4, r3
 800253c:	f04f 0500 	mov.w	r5, #0
 8002540:	4622      	mov	r2, r4
 8002542:	462b      	mov	r3, r5
 8002544:	1891      	adds	r1, r2, r2
 8002546:	6439      	str	r1, [r7, #64]	; 0x40
 8002548:	415b      	adcs	r3, r3
 800254a:	647b      	str	r3, [r7, #68]	; 0x44
 800254c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002550:	1912      	adds	r2, r2, r4
 8002552:	eb45 0303 	adc.w	r3, r5, r3
 8002556:	f04f 0000 	mov.w	r0, #0
 800255a:	f04f 0100 	mov.w	r1, #0
 800255e:	00d9      	lsls	r1, r3, #3
 8002560:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002564:	00d0      	lsls	r0, r2, #3
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	1911      	adds	r1, r2, r4
 800256c:	6639      	str	r1, [r7, #96]	; 0x60
 800256e:	416b      	adcs	r3, r5
 8002570:	667b      	str	r3, [r7, #100]	; 0x64
 8002572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	461a      	mov	r2, r3
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	1891      	adds	r1, r2, r2
 800257e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002580:	415b      	adcs	r3, r3
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002584:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002588:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800258c:	f7fd fe78 	bl	8000280 <__aeabi_uldivmod>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4ba5      	ldr	r3, [pc, #660]	; (800282c <UART_SetConfig+0x38c>)
 8002596:	fba3 2302 	umull	r2, r3, r3, r2
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	011e      	lsls	r6, r3, #4
 800259e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a0:	461c      	mov	r4, r3
 80025a2:	f04f 0500 	mov.w	r5, #0
 80025a6:	4622      	mov	r2, r4
 80025a8:	462b      	mov	r3, r5
 80025aa:	1891      	adds	r1, r2, r2
 80025ac:	6339      	str	r1, [r7, #48]	; 0x30
 80025ae:	415b      	adcs	r3, r3
 80025b0:	637b      	str	r3, [r7, #52]	; 0x34
 80025b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025b6:	1912      	adds	r2, r2, r4
 80025b8:	eb45 0303 	adc.w	r3, r5, r3
 80025bc:	f04f 0000 	mov.w	r0, #0
 80025c0:	f04f 0100 	mov.w	r1, #0
 80025c4:	00d9      	lsls	r1, r3, #3
 80025c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025ca:	00d0      	lsls	r0, r2, #3
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	1911      	adds	r1, r2, r4
 80025d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80025d4:	416b      	adcs	r3, r5
 80025d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	461a      	mov	r2, r3
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	1891      	adds	r1, r2, r2
 80025e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80025e6:	415b      	adcs	r3, r3
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80025f2:	f7fd fe45 	bl	8000280 <__aeabi_uldivmod>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4b8c      	ldr	r3, [pc, #560]	; (800282c <UART_SetConfig+0x38c>)
 80025fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002600:	095b      	lsrs	r3, r3, #5
 8002602:	2164      	movs	r1, #100	; 0x64
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	3332      	adds	r3, #50	; 0x32
 800260e:	4a87      	ldr	r2, [pc, #540]	; (800282c <UART_SetConfig+0x38c>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800261c:	441e      	add	r6, r3
 800261e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002620:	4618      	mov	r0, r3
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	1894      	adds	r4, r2, r2
 800262c:	623c      	str	r4, [r7, #32]
 800262e:	415b      	adcs	r3, r3
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
 8002632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002636:	1812      	adds	r2, r2, r0
 8002638:	eb41 0303 	adc.w	r3, r1, r3
 800263c:	f04f 0400 	mov.w	r4, #0
 8002640:	f04f 0500 	mov.w	r5, #0
 8002644:	00dd      	lsls	r5, r3, #3
 8002646:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800264a:	00d4      	lsls	r4, r2, #3
 800264c:	4622      	mov	r2, r4
 800264e:	462b      	mov	r3, r5
 8002650:	1814      	adds	r4, r2, r0
 8002652:	653c      	str	r4, [r7, #80]	; 0x50
 8002654:	414b      	adcs	r3, r1
 8002656:	657b      	str	r3, [r7, #84]	; 0x54
 8002658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	461a      	mov	r2, r3
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	1891      	adds	r1, r2, r2
 8002664:	61b9      	str	r1, [r7, #24]
 8002666:	415b      	adcs	r3, r3
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800266e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002672:	f7fd fe05 	bl	8000280 <__aeabi_uldivmod>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4b6c      	ldr	r3, [pc, #432]	; (800282c <UART_SetConfig+0x38c>)
 800267c:	fba3 1302 	umull	r1, r3, r3, r2
 8002680:	095b      	lsrs	r3, r3, #5
 8002682:	2164      	movs	r1, #100	; 0x64
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	3332      	adds	r3, #50	; 0x32
 800268e:	4a67      	ldr	r2, [pc, #412]	; (800282c <UART_SetConfig+0x38c>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	f003 0207 	and.w	r2, r3, #7
 800269a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4432      	add	r2, r6
 80026a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026a2:	e0b9      	b.n	8002818 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a6:	461c      	mov	r4, r3
 80026a8:	f04f 0500 	mov.w	r5, #0
 80026ac:	4622      	mov	r2, r4
 80026ae:	462b      	mov	r3, r5
 80026b0:	1891      	adds	r1, r2, r2
 80026b2:	6139      	str	r1, [r7, #16]
 80026b4:	415b      	adcs	r3, r3
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026bc:	1912      	adds	r2, r2, r4
 80026be:	eb45 0303 	adc.w	r3, r5, r3
 80026c2:	f04f 0000 	mov.w	r0, #0
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	00d9      	lsls	r1, r3, #3
 80026cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026d0:	00d0      	lsls	r0, r2, #3
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	eb12 0804 	adds.w	r8, r2, r4
 80026da:	eb43 0905 	adc.w	r9, r3, r5
 80026de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f04f 0100 	mov.w	r1, #0
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	008b      	lsls	r3, r1, #2
 80026f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026f6:	0082      	lsls	r2, r0, #2
 80026f8:	4640      	mov	r0, r8
 80026fa:	4649      	mov	r1, r9
 80026fc:	f7fd fdc0 	bl	8000280 <__aeabi_uldivmod>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4b49      	ldr	r3, [pc, #292]	; (800282c <UART_SetConfig+0x38c>)
 8002706:	fba3 2302 	umull	r2, r3, r3, r2
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	011e      	lsls	r6, r3, #4
 800270e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002710:	4618      	mov	r0, r3
 8002712:	f04f 0100 	mov.w	r1, #0
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	1894      	adds	r4, r2, r2
 800271c:	60bc      	str	r4, [r7, #8]
 800271e:	415b      	adcs	r3, r3
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002726:	1812      	adds	r2, r2, r0
 8002728:	eb41 0303 	adc.w	r3, r1, r3
 800272c:	f04f 0400 	mov.w	r4, #0
 8002730:	f04f 0500 	mov.w	r5, #0
 8002734:	00dd      	lsls	r5, r3, #3
 8002736:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800273a:	00d4      	lsls	r4, r2, #3
 800273c:	4622      	mov	r2, r4
 800273e:	462b      	mov	r3, r5
 8002740:	1814      	adds	r4, r2, r0
 8002742:	64bc      	str	r4, [r7, #72]	; 0x48
 8002744:	414b      	adcs	r3, r1
 8002746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4618      	mov	r0, r3
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	008b      	lsls	r3, r1, #2
 800275c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002760:	0082      	lsls	r2, r0, #2
 8002762:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002766:	f7fd fd8b 	bl	8000280 <__aeabi_uldivmod>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4b2f      	ldr	r3, [pc, #188]	; (800282c <UART_SetConfig+0x38c>)
 8002770:	fba3 1302 	umull	r1, r3, r3, r2
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	2164      	movs	r1, #100	; 0x64
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	3332      	adds	r3, #50	; 0x32
 8002782:	4a2a      	ldr	r2, [pc, #168]	; (800282c <UART_SetConfig+0x38c>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	095b      	lsrs	r3, r3, #5
 800278a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800278e:	441e      	add	r6, r3
 8002790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002792:	4618      	mov	r0, r3
 8002794:	f04f 0100 	mov.w	r1, #0
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	1894      	adds	r4, r2, r2
 800279e:	603c      	str	r4, [r7, #0]
 80027a0:	415b      	adcs	r3, r3
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027a8:	1812      	adds	r2, r2, r0
 80027aa:	eb41 0303 	adc.w	r3, r1, r3
 80027ae:	f04f 0400 	mov.w	r4, #0
 80027b2:	f04f 0500 	mov.w	r5, #0
 80027b6:	00dd      	lsls	r5, r3, #3
 80027b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027bc:	00d4      	lsls	r4, r2, #3
 80027be:	4622      	mov	r2, r4
 80027c0:	462b      	mov	r3, r5
 80027c2:	eb12 0a00 	adds.w	sl, r2, r0
 80027c6:	eb43 0b01 	adc.w	fp, r3, r1
 80027ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	008b      	lsls	r3, r1, #2
 80027de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027e2:	0082      	lsls	r2, r0, #2
 80027e4:	4650      	mov	r0, sl
 80027e6:	4659      	mov	r1, fp
 80027e8:	f7fd fd4a 	bl	8000280 <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <UART_SetConfig+0x38c>)
 80027f2:	fba3 1302 	umull	r1, r3, r3, r2
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2164      	movs	r1, #100	; 0x64
 80027fa:	fb01 f303 	mul.w	r3, r1, r3
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	3332      	adds	r3, #50	; 0x32
 8002804:	4a09      	ldr	r2, [pc, #36]	; (800282c <UART_SetConfig+0x38c>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	f003 020f 	and.w	r2, r3, #15
 8002810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4432      	add	r2, r6
 8002816:	609a      	str	r2, [r3, #8]
}
 8002818:	bf00      	nop
 800281a:	377c      	adds	r7, #124	; 0x7c
 800281c:	46bd      	mov	sp, r7
 800281e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002822:	bf00      	nop
 8002824:	40011000 	.word	0x40011000
 8002828:	40011400 	.word	0x40011400
 800282c:	51eb851f 	.word	0x51eb851f

08002830 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f103 0208 	add.w	r2, r3, #8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f04f 32ff 	mov.w	r2, #4294967295
 8002848:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f103 0208 	add.w	r2, r3, #8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f103 0208 	add.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	601a      	str	r2, [r3, #0]
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028d2:	b480      	push	{r7}
 80028d4:	b085      	sub	sp, #20
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d103      	bne.n	80028f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e00c      	b.n	800290c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3308      	adds	r3, #8
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e002      	b.n	8002900 <vListInsert+0x2e>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	429a      	cmp	r2, r3
 800290a:	d2f6      	bcs.n	80028fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	601a      	str	r2, [r3, #0]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6892      	ldr	r2, [r2, #8]
 800295a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6852      	ldr	r2, [r2, #4]
 8002964:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	429a      	cmp	r2, r3
 800296e:	d103      	bne.n	8002978 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	1e5a      	subs	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10a      	bne.n	80029c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029be:	bf00      	nop
 80029c0:	e7fe      	b.n	80029c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80029c2:	f002 f8a7 	bl	8004b14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	68f9      	ldr	r1, [r7, #12]
 80029d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	441a      	add	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	3b01      	subs	r3, #1
 80029f4:	68f9      	ldr	r1, [r7, #12]
 80029f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	441a      	add	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	22ff      	movs	r2, #255	; 0xff
 8002a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	22ff      	movs	r2, #255	; 0xff
 8002a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d114      	bne.n	8002a42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01a      	beq.n	8002a56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3310      	adds	r3, #16
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 f981 	bl	8003d2c <xTaskRemoveFromEventList>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d012      	beq.n	8002a56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <xQueueGenericReset+0xcc>)
 8002a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	e009      	b.n	8002a56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	3310      	adds	r3, #16
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fef2 	bl	8002830 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3324      	adds	r3, #36	; 0x24
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff feed 	bl	8002830 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a56:	f002 f88d 	bl	8004b74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	e000ed04 	.word	0xe000ed04

08002a68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	; 0x28
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	613b      	str	r3, [r7, #16]
}
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d102      	bne.n	8002a9e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	e004      	b.n	8002aa8 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	3350      	adds	r3, #80	; 0x50
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 f953 	bl	8004d58 <pvPortMalloc>
 8002ab2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00d      	beq.n	8002ad6 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3350      	adds	r3, #80	; 0x50
 8002ac2:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ac4:	79fa      	ldrb	r2, [r7, #7]
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	4613      	mov	r3, r2
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f805 	bl	8002ae0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ad6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e002      	b.n	8002b02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b0e:	2101      	movs	r1, #1
 8002b10:	69b8      	ldr	r0, [r7, #24]
 8002b12:	f7ff ff41 	bl	8002998 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08e      	sub	sp, #56	; 0x38
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b36:	2300      	movs	r3, #0
 8002b38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <xQueueGenericSend+0x32>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d103      	bne.n	8002b68 <xQueueGenericSend+0x40>
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <xQueueGenericSend+0x44>
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <xQueueGenericSend+0x46>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <xQueueGenericSend+0x60>
	__asm volatile
 8002b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b76:	f383 8811 	msr	BASEPRI, r3
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	f3bf 8f4f 	dsb	sy
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b84:	bf00      	nop
 8002b86:	e7fe      	b.n	8002b86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d103      	bne.n	8002b96 <xQueueGenericSend+0x6e>
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <xQueueGenericSend+0x72>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <xQueueGenericSend+0x74>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	623b      	str	r3, [r7, #32]
}
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bb6:	f001 fa55 	bl	8004064 <xTaskGetSchedulerState>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <xQueueGenericSend+0x9e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <xQueueGenericSend+0xa2>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <xQueueGenericSend+0xa4>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10a      	bne.n	8002be6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd4:	f383 8811 	msr	BASEPRI, r3
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	61fb      	str	r3, [r7, #28]
}
 8002be2:	bf00      	nop
 8002be4:	e7fe      	b.n	8002be4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002be6:	f001 ff95 	bl	8004b14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d302      	bcc.n	8002bfc <xQueueGenericSend+0xd4>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d129      	bne.n	8002c50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c02:	f000 fa07 	bl	8003014 <prvCopyDataToQueue>
 8002c06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d010      	beq.n	8002c32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	3324      	adds	r3, #36	; 0x24
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 f889 	bl	8003d2c <xTaskRemoveFromEventList>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d013      	beq.n	8002c48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c20:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <xQueueGenericSend+0x1f8>)
 8002c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	e00a      	b.n	8002c48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c38:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <xQueueGenericSend+0x1f8>)
 8002c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c48:	f001 ff94 	bl	8004b74 <vPortExitCritical>
				return pdPASS;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e063      	b.n	8002d18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d103      	bne.n	8002c5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c56:	f001 ff8d 	bl	8004b74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e05c      	b.n	8002d18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c64:	f107 0314 	add.w	r3, r7, #20
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 f8c1 	bl	8003df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c72:	f001 ff7f 	bl	8004b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c76:	f000 fcfb 	bl	8003670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c7a:	f001 ff4b 	bl	8004b14 <vPortEnterCritical>
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c84:	b25b      	sxtb	r3, r3
 8002c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8a:	d103      	bne.n	8002c94 <xQueueGenericSend+0x16c>
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c9a:	b25b      	sxtb	r3, r3
 8002c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca0:	d103      	bne.n	8002caa <xQueueGenericSend+0x182>
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002caa:	f001 ff63 	bl	8004b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cae:	1d3a      	adds	r2, r7, #4
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 f8b0 	bl	8003e1c <xTaskCheckForTimeOut>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d124      	bne.n	8002d0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cc4:	f000 fa9e 	bl	8003204 <prvIsQueueFull>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d018      	beq.n	8002d00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	3310      	adds	r3, #16
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 ffd8 	bl	8003c8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cde:	f000 fa29 	bl	8003134 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ce2:	f000 fe13 	bl	800390c <xTaskResumeAll>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f47f af7c 	bne.w	8002be6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002cee:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <xQueueGenericSend+0x1f8>)
 8002cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	e772      	b.n	8002be6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d02:	f000 fa17 	bl	8003134 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d06:	f000 fe01 	bl	800390c <xTaskResumeAll>
 8002d0a:	e76c      	b.n	8002be6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d0e:	f000 fa11 	bl	8003134 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d12:	f000 fdfb 	bl	800390c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3738      	adds	r7, #56	; 0x38
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	e000ed04 	.word	0xe000ed04

08002d24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08e      	sub	sp, #56	; 0x38
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d4e:	bf00      	nop
 8002d50:	e7fe      	b.n	8002d50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <xQueueGenericSendFromISR+0x3c>
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <xQueueGenericSendFromISR+0x40>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <xQueueGenericSendFromISR+0x42>
 8002d64:	2300      	movs	r3, #0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	623b      	str	r3, [r7, #32]
}
 8002d7c:	bf00      	nop
 8002d7e:	e7fe      	b.n	8002d7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d103      	bne.n	8002d8e <xQueueGenericSendFromISR+0x6a>
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <xQueueGenericSendFromISR+0x6e>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <xQueueGenericSendFromISR+0x70>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	61fb      	str	r3, [r7, #28]
}
 8002daa:	bf00      	nop
 8002dac:	e7fe      	b.n	8002dac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dae:	f001 ff93 	bl	8004cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002db2:	f3ef 8211 	mrs	r2, BASEPRI
 8002db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dba:	f383 8811 	msr	BASEPRI, r3
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f3bf 8f4f 	dsb	sy
 8002dc6:	61ba      	str	r2, [r7, #24]
 8002dc8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002dca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d302      	bcc.n	8002de0 <xQueueGenericSendFromISR+0xbc>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d12c      	bne.n	8002e3a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df0:	f000 f910 	bl	8003014 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002df4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d112      	bne.n	8002e24 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d016      	beq.n	8002e34 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	3324      	adds	r3, #36	; 0x24
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 ff8e 	bl	8003d2c <xTaskRemoveFromEventList>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00e      	beq.n	8002e34 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00b      	beq.n	8002e34 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e007      	b.n	8002e34 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e28:	3301      	adds	r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	b25a      	sxtb	r2, r3
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e34:	2301      	movs	r3, #1
 8002e36:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002e38:	e001      	b.n	8002e3e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3738      	adds	r7, #56	; 0x38
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08c      	sub	sp, #48	; 0x30
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <xQueueReceive+0x30>
	__asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	623b      	str	r3, [r7, #32]
}
 8002e80:	bf00      	nop
 8002e82:	e7fe      	b.n	8002e82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <xQueueReceive+0x3e>
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <xQueueReceive+0x42>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <xQueueReceive+0x44>
 8002e96:	2300      	movs	r3, #0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <xQueueReceive+0x5e>
	__asm volatile
 8002e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	61fb      	str	r3, [r7, #28]
}
 8002eae:	bf00      	nop
 8002eb0:	e7fe      	b.n	8002eb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eb2:	f001 f8d7 	bl	8004064 <xTaskGetSchedulerState>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <xQueueReceive+0x6e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <xQueueReceive+0x72>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <xQueueReceive+0x74>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10a      	bne.n	8002ee2 <xQueueReceive+0x8e>
	__asm volatile
 8002ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed0:	f383 8811 	msr	BASEPRI, r3
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	61bb      	str	r3, [r7, #24]
}
 8002ede:	bf00      	nop
 8002ee0:	e7fe      	b.n	8002ee0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ee2:	f001 fe17 	bl	8004b14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01f      	beq.n	8002f32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef6:	f000 f8f7 	bl	80030e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efc:	1e5a      	subs	r2, r3, #1
 8002efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00f      	beq.n	8002f2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	3310      	adds	r3, #16
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 ff0c 	bl	8003d2c <xTaskRemoveFromEventList>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d007      	beq.n	8002f2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <xQueueReceive+0x1bc>)
 8002f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f2a:	f001 fe23 	bl	8004b74 <vPortExitCritical>
				return pdPASS;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e069      	b.n	8003006 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d103      	bne.n	8002f40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f38:	f001 fe1c 	bl	8004b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e062      	b.n	8003006 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f46:	f107 0310 	add.w	r3, r7, #16
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 ff50 	bl	8003df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f50:	2301      	movs	r3, #1
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f54:	f001 fe0e 	bl	8004b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f58:	f000 fb8a 	bl	8003670 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f5c:	f001 fdda 	bl	8004b14 <vPortEnterCritical>
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f66:	b25b      	sxtb	r3, r3
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d103      	bne.n	8002f76 <xQueueReceive+0x122>
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f7c:	b25b      	sxtb	r3, r3
 8002f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f82:	d103      	bne.n	8002f8c <xQueueReceive+0x138>
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f8c:	f001 fdf2 	bl	8004b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f90:	1d3a      	adds	r2, r7, #4
 8002f92:	f107 0310 	add.w	r3, r7, #16
 8002f96:	4611      	mov	r1, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 ff3f 	bl	8003e1c <xTaskCheckForTimeOut>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d123      	bne.n	8002fec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fa6:	f000 f917 	bl	80031d8 <prvIsQueueEmpty>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d017      	beq.n	8002fe0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	3324      	adds	r3, #36	; 0x24
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fe67 	bl	8003c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fc0:	f000 f8b8 	bl	8003134 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fc4:	f000 fca2 	bl	800390c <xTaskResumeAll>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d189      	bne.n	8002ee2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <xQueueReceive+0x1bc>)
 8002fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	e780      	b.n	8002ee2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fe2:	f000 f8a7 	bl	8003134 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fe6:	f000 fc91 	bl	800390c <xTaskResumeAll>
 8002fea:	e77a      	b.n	8002ee2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fee:	f000 f8a1 	bl	8003134 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ff2:	f000 fc8b 	bl	800390c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ff8:	f000 f8ee 	bl	80031d8 <prvIsQueueEmpty>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f43f af6f 	beq.w	8002ee2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003004:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003006:	4618      	mov	r0, r3
 8003008:	3730      	adds	r7, #48	; 0x30
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	e000ed04 	.word	0xe000ed04

08003014 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10d      	bne.n	800304e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d14d      	bne.n	80030d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	4618      	mov	r0, r3
 8003040:	f001 f82e 	bl	80040a0 <xTaskPriorityDisinherit>
 8003044:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	e043      	b.n	80030d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d119      	bne.n	8003088 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6858      	ldr	r0, [r3, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	461a      	mov	r2, r3
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	f002 f87e 	bl	8005160 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	441a      	add	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	429a      	cmp	r2, r3
 800307c:	d32b      	bcc.n	80030d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	e026      	b.n	80030d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	68d8      	ldr	r0, [r3, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	461a      	mov	r2, r3
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	f002 f864 	bl	8005160 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	425b      	negs	r3, r3
 80030a2:	441a      	add	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d207      	bcs.n	80030c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	425b      	negs	r3, r3
 80030be:	441a      	add	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d105      	bne.n	80030d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80030de:	697b      	ldr	r3, [r7, #20]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d018      	beq.n	800312c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	441a      	add	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	d303      	bcc.n	800311c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68d9      	ldr	r1, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	461a      	mov	r2, r3
 8003126:	6838      	ldr	r0, [r7, #0]
 8003128:	f002 f81a 	bl	8005160 <memcpy>
	}
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800313c:	f001 fcea 	bl	8004b14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003146:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003148:	e011      	b.n	800316e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	2b00      	cmp	r3, #0
 8003150:	d012      	beq.n	8003178 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3324      	adds	r3, #36	; 0x24
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fde8 	bl	8003d2c <xTaskRemoveFromEventList>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003162:	f000 febd 	bl	8003ee0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	3b01      	subs	r3, #1
 800316a:	b2db      	uxtb	r3, r3
 800316c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800316e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003172:	2b00      	cmp	r3, #0
 8003174:	dce9      	bgt.n	800314a <prvUnlockQueue+0x16>
 8003176:	e000      	b.n	800317a <prvUnlockQueue+0x46>
					break;
 8003178:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	22ff      	movs	r2, #255	; 0xff
 800317e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003182:	f001 fcf7 	bl	8004b74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003186:	f001 fcc5 	bl	8004b14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003190:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003192:	e011      	b.n	80031b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d012      	beq.n	80031c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3310      	adds	r3, #16
 80031a0:	4618      	mov	r0, r3
 80031a2:	f000 fdc3 	bl	8003d2c <xTaskRemoveFromEventList>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031ac:	f000 fe98 	bl	8003ee0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031b0:	7bbb      	ldrb	r3, [r7, #14]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	dce9      	bgt.n	8003194 <prvUnlockQueue+0x60>
 80031c0:	e000      	b.n	80031c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	22ff      	movs	r2, #255	; 0xff
 80031c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031cc:	f001 fcd2 	bl	8004b74 <vPortExitCritical>
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031e0:	f001 fc98 	bl	8004b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031ec:	2301      	movs	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e001      	b.n	80031f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031f6:	f001 fcbd 	bl	8004b74 <vPortExitCritical>

	return xReturn;
 80031fa:	68fb      	ldr	r3, [r7, #12]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800320c:	f001 fc82 	bl	8004b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	429a      	cmp	r2, r3
 800321a:	d102      	bne.n	8003222 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800321c:	2301      	movs	r3, #1
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	e001      	b.n	8003226 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003226:	f001 fca5 	bl	8004b74 <vPortExitCritical>

	return xReturn;
 800322a:	68fb      	ldr	r3, [r7, #12]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	e014      	b.n	800326e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003244:	4a0f      	ldr	r2, [pc, #60]	; (8003284 <vQueueAddToRegistry+0x50>)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10b      	bne.n	8003268 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003250:	490c      	ldr	r1, [pc, #48]	; (8003284 <vQueueAddToRegistry+0x50>)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800325a:	4a0a      	ldr	r2, [pc, #40]	; (8003284 <vQueueAddToRegistry+0x50>)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003266:	e006      	b.n	8003276 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3301      	adds	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b07      	cmp	r3, #7
 8003272:	d9e7      	bls.n	8003244 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003274:	bf00      	nop
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20012f5c 	.word	0x20012f5c

08003288 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003298:	f001 fc3c 	bl	8004b14 <vPortEnterCritical>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032a2:	b25b      	sxtb	r3, r3
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a8:	d103      	bne.n	80032b2 <vQueueWaitForMessageRestricted+0x2a>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032b8:	b25b      	sxtb	r3, r3
 80032ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032be:	d103      	bne.n	80032c8 <vQueueWaitForMessageRestricted+0x40>
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032c8:	f001 fc54 	bl	8004b74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d106      	bne.n	80032e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3324      	adds	r3, #36	; 0x24
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fcf9 	bl	8003cd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032e2:	6978      	ldr	r0, [r7, #20]
 80032e4:	f7ff ff26 	bl	8003134 <prvUnlockQueue>
	}
 80032e8:	bf00      	nop
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08c      	sub	sp, #48	; 0x30
 80032f4:	af04      	add	r7, sp, #16
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4618      	mov	r0, r3
 8003306:	f001 fd27 	bl	8004d58 <pvPortMalloc>
 800330a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00e      	beq.n	8003330 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003312:	2058      	movs	r0, #88	; 0x58
 8003314:	f001 fd20 	bl	8004d58 <pvPortMalloc>
 8003318:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
 8003326:	e005      	b.n	8003334 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003328:	6978      	ldr	r0, [r7, #20]
 800332a:	f001 fdd9 	bl	8004ee0 <vPortFree>
 800332e:	e001      	b.n	8003334 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003330:	2300      	movs	r3, #0
 8003332:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d013      	beq.n	8003362 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800333a:	88fa      	ldrh	r2, [r7, #6]
 800333c:	2300      	movs	r3, #0
 800333e:	9303      	str	r3, [sp, #12]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	9302      	str	r3, [sp, #8]
 8003344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68b9      	ldr	r1, [r7, #8]
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f80e 	bl	8003372 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003356:	69f8      	ldr	r0, [r7, #28]
 8003358:	f000 f89a 	bl	8003490 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800335c:	2301      	movs	r3, #1
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	e002      	b.n	8003368 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295
 8003366:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003368:	69bb      	ldr	r3, [r7, #24]
	}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b088      	sub	sp, #32
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	461a      	mov	r2, r3
 800338a:	21a5      	movs	r1, #165	; 0xa5
 800338c:	f001 fef6 	bl	800517c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800339a:	3b01      	subs	r3, #1
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f023 0307 	bic.w	r3, r3, #7
 80033a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <prvInitialiseNewTask+0x58>
	__asm volatile
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	617b      	str	r3, [r7, #20]
}
 80033c6:	bf00      	nop
 80033c8:	e7fe      	b.n	80033c8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01f      	beq.n	8003410 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	e012      	b.n	80033fc <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	4413      	add	r3, r2
 80033dc:	7819      	ldrb	r1, [r3, #0]
 80033de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	4413      	add	r3, r2
 80033e4:	3334      	adds	r3, #52	; 0x34
 80033e6:	460a      	mov	r2, r1
 80033e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	4413      	add	r3, r2
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3301      	adds	r3, #1
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b09      	cmp	r3, #9
 8003400:	d9e9      	bls.n	80033d6 <prvInitialiseNewTask+0x64>
 8003402:	e000      	b.n	8003406 <prvInitialiseNewTask+0x94>
			{
				break;
 8003404:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800340e:	e003      	b.n	8003418 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	2b0e      	cmp	r3, #14
 800341c:	d901      	bls.n	8003422 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800341e:	230e      	movs	r3, #14
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800342c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	2200      	movs	r2, #0
 8003432:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	3304      	adds	r3, #4
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fa19 	bl	8002870 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	3318      	adds	r3, #24
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fa14 	bl	8002870 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	f1c3 020f 	rsb	r2, r3, #15
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003456:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800345c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	2200      	movs	r2, #0
 8003462:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	69b8      	ldr	r0, [r7, #24]
 8003472:	f001 fa13 	bl	800489c <pxPortInitialiseStack>
 8003476:	4602      	mov	r2, r0
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003486:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003488:	bf00      	nop
 800348a:	3720      	adds	r7, #32
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003498:	f001 fb3c 	bl	8004b14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800349c:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <prvAddNewTaskToReadyList+0xc0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	4a2b      	ldr	r2, [pc, #172]	; (8003550 <prvAddNewTaskToReadyList+0xc0>)
 80034a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034a6:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <prvAddNewTaskToReadyList+0xc4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034ae:	4a29      	ldr	r2, [pc, #164]	; (8003554 <prvAddNewTaskToReadyList+0xc4>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034b4:	4b26      	ldr	r3, [pc, #152]	; (8003550 <prvAddNewTaskToReadyList+0xc0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d110      	bne.n	80034de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034bc:	f000 fd34 	bl	8003f28 <prvInitialiseTaskLists>
 80034c0:	e00d      	b.n	80034de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034c2:	4b25      	ldr	r3, [pc, #148]	; (8003558 <prvAddNewTaskToReadyList+0xc8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034ca:	4b22      	ldr	r3, [pc, #136]	; (8003554 <prvAddNewTaskToReadyList+0xc4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d802      	bhi.n	80034de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034d8:	4a1e      	ldr	r2, [pc, #120]	; (8003554 <prvAddNewTaskToReadyList+0xc4>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034de:	4b1f      	ldr	r3, [pc, #124]	; (800355c <prvAddNewTaskToReadyList+0xcc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	4a1d      	ldr	r2, [pc, #116]	; (800355c <prvAddNewTaskToReadyList+0xcc>)
 80034e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034e8:	4b1c      	ldr	r3, [pc, #112]	; (800355c <prvAddNewTaskToReadyList+0xcc>)
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	2201      	movs	r2, #1
 80034f6:	409a      	lsls	r2, r3
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <prvAddNewTaskToReadyList+0xd0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	4a18      	ldr	r2, [pc, #96]	; (8003560 <prvAddNewTaskToReadyList+0xd0>)
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4a15      	ldr	r2, [pc, #84]	; (8003564 <prvAddNewTaskToReadyList+0xd4>)
 8003510:	441a      	add	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	3304      	adds	r3, #4
 8003516:	4619      	mov	r1, r3
 8003518:	4610      	mov	r0, r2
 800351a:	f7ff f9b6 	bl	800288a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800351e:	f001 fb29 	bl	8004b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <prvAddNewTaskToReadyList+0xc8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00e      	beq.n	8003548 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800352a:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <prvAddNewTaskToReadyList+0xc4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	429a      	cmp	r2, r3
 8003536:	d207      	bcs.n	8003548 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <prvAddNewTaskToReadyList+0xd8>)
 800353a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20000238 	.word	0x20000238
 8003554:	20000098 	.word	0x20000098
 8003558:	20000244 	.word	0x20000244
 800355c:	20000254 	.word	0x20000254
 8003560:	20000240 	.word	0x20000240
 8003564:	2000009c 	.word	0x2000009c
 8003568:	e000ed04 	.word	0xe000ed04

0800356c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d017      	beq.n	80035ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800357e:	4b13      	ldr	r3, [pc, #76]	; (80035cc <vTaskDelay+0x60>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <vTaskDelay+0x30>
	__asm volatile
 8003586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358a:	f383 8811 	msr	BASEPRI, r3
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	60bb      	str	r3, [r7, #8]
}
 8003598:	bf00      	nop
 800359a:	e7fe      	b.n	800359a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800359c:	f000 f868 	bl	8003670 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035a0:	2100      	movs	r1, #0
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fe02 	bl	80041ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035a8:	f000 f9b0 	bl	800390c <xTaskResumeAll>
 80035ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d107      	bne.n	80035c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <vTaskDelay+0x64>)
 80035b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000260 	.word	0x20000260
 80035d0:	e000ed04 	.word	0xe000ed04

080035d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80035da:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <vTaskStartScheduler+0x84>)
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	2300      	movs	r3, #0
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	2300      	movs	r3, #0
 80035e4:	2282      	movs	r2, #130	; 0x82
 80035e6:	491d      	ldr	r1, [pc, #116]	; (800365c <vTaskStartScheduler+0x88>)
 80035e8:	481d      	ldr	r0, [pc, #116]	; (8003660 <vTaskStartScheduler+0x8c>)
 80035ea:	f7ff fe81 	bl	80032f0 <xTaskCreate>
 80035ee:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d102      	bne.n	80035fc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80035f6:	f000 fe3f 	bl	8004278 <xTimerCreateTimerTask>
 80035fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d116      	bne.n	8003630 <vTaskStartScheduler+0x5c>
	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	60bb      	str	r3, [r7, #8]
}
 8003614:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003616:	4b13      	ldr	r3, [pc, #76]	; (8003664 <vTaskStartScheduler+0x90>)
 8003618:	f04f 32ff 	mov.w	r2, #4294967295
 800361c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <vTaskStartScheduler+0x94>)
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <vTaskStartScheduler+0x98>)
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800362a:	f001 f9c1 	bl	80049b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800362e:	e00e      	b.n	800364e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	d10a      	bne.n	800364e <vTaskStartScheduler+0x7a>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	607b      	str	r3, [r7, #4]
}
 800364a:	bf00      	nop
 800364c:	e7fe      	b.n	800364c <vTaskStartScheduler+0x78>
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	2000025c 	.word	0x2000025c
 800365c:	08005a1c 	.word	0x08005a1c
 8003660:	08003ef9 	.word	0x08003ef9
 8003664:	20000258 	.word	0x20000258
 8003668:	20000244 	.word	0x20000244
 800366c:	2000023c 	.word	0x2000023c

08003670 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003674:	4b04      	ldr	r3, [pc, #16]	; (8003688 <vTaskSuspendAll+0x18>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	4a03      	ldr	r2, [pc, #12]	; (8003688 <vTaskSuspendAll+0x18>)
 800367c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800367e:	bf00      	nop
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	20000260 	.word	0x20000260

0800368c <Taskmonitor>:
/*----------------------------------------------------------*/
void Taskmonitor(void)
{
 800368c:	b5b0      	push	{r4, r5, r7, lr}
 800368e:	b0ae      	sub	sp, #184	; 0xb8
 8003690:	af04      	add	r7, sp, #16
	/* Initialize string */
	char Monitor_data[130];
	uint32_t list_len ;
	memset(Monitor_data,'\0',sizeof(Monitor_data));
 8003692:	463b      	mov	r3, r7
 8003694:	2282      	movs	r2, #130	; 0x82
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f001 fd6f 	bl	800517c <memset>
	/* Scheduler will change list data when Taskmonitor() is blocked */
	//vTaskSuspendAll();


	/* Print title */
	sprintf(Monitor_data,"|Name      |Priority(Base/actual)  |pxStack    |pxTopOfStack    |State    |\n\r");
 800369e:	463b      	mov	r3, r7
 80036a0:	4992      	ldr	r1, [pc, #584]	; (80038ec <Taskmonitor+0x260>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 fd72 	bl	800518c <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data,strlen(Monitor_data),0xffff);
 80036a8:	463b      	mov	r3, r7
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fc fd90 	bl	80001d0 <strlen>
 80036b0:	4603      	mov	r3, r0
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	4639      	mov	r1, r7
 80036b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ba:	488d      	ldr	r0, [pc, #564]	; (80038f0 <Taskmonitor+0x264>)
 80036bc:	f7fe fdef 	bl	800229e <HAL_UART_Transmit>


	/* pxReadyTasksLists */
	for(int xPriority = 0 ; xPriority < 15 ; xPriority ++ ){
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80036c6:	e064      	b.n	8003792 <Taskmonitor+0x106>
		if(listLIST_IS_EMPTY(&(pxReadyTasksLists[xPriority])) == pdFALSE){
 80036c8:	498a      	ldr	r1, [pc, #552]	; (80038f4 <Taskmonitor+0x268>)
 80036ca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d054      	beq.n	8003788 <Taskmonitor+0xfc>
			ListItem_t *First_item = pxReadyTasksLists[xPriority].pxIndex ;
 80036de:	4985      	ldr	r1, [pc, #532]	; (80038f4 <Taskmonitor+0x268>)
 80036e0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	3304      	adds	r3, #4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			//uint32_t numberOfItems = pxReadyTasksLists[xPriority].uxNumberOfItems ;
			list_len = listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[xPriority])) ;
 80036f6:	497f      	ldr	r1, [pc, #508]	; (80038f4 <Taskmonitor+0x268>)
 80036f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			for(int i = 0 ; i < list_len ; i ++){
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003712:	e033      	b.n	800377c <Taskmonitor+0xf0>
				current_TCB = First_item->pvOwner ;
 8003714:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				sprintf(Monitor_data,"|%-20s %lu/%lu\t %p\t %p\tReady|\n\r",current_TCB->pcTaskName,current_TCB->uxBasePriority,current_TCB->uxPriority,current_TCB->pxStack,current_TCB->pxTopOfStack);
 800371e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003722:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8003726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800372a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 800372c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003736:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003738:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800373c:	6809      	ldr	r1, [r1, #0]
 800373e:	4638      	mov	r0, r7
 8003740:	9102      	str	r1, [sp, #8]
 8003742:	9201      	str	r2, [sp, #4]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	462b      	mov	r3, r5
 8003748:	4622      	mov	r2, r4
 800374a:	496b      	ldr	r1, [pc, #428]	; (80038f8 <Taskmonitor+0x26c>)
 800374c:	f001 fd1e 	bl	800518c <siprintf>
				//sprintf(Monitor_data,"/%lu %p \n\r",current_TCB->uxPriority,current_TCB->pxStack);
				HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data,strlen(Monitor_data),0xffff);
 8003750:	463b      	mov	r3, r7
 8003752:	4618      	mov	r0, r3
 8003754:	f7fc fd3c 	bl	80001d0 <strlen>
 8003758:	4603      	mov	r3, r0
 800375a:	b29a      	uxth	r2, r3
 800375c:	4639      	mov	r1, r7
 800375e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003762:	4863      	ldr	r0, [pc, #396]	; (80038f0 <Taskmonitor+0x264>)
 8003764:	f7fe fd9b 	bl	800229e <HAL_UART_Transmit>
				First_item = First_item->pxPrevious ;
 8003768:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			for(int i = 0 ; i < list_len ; i ++){
 8003772:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003776:	3301      	adds	r3, #1
 8003778:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800377c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003780:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003784:	429a      	cmp	r2, r3
 8003786:	d8c5      	bhi.n	8003714 <Taskmonitor+0x88>
	for(int xPriority = 0 ; xPriority < 15 ; xPriority ++ ){
 8003788:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800378c:	3301      	adds	r3, #1
 800378e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003796:	2b0e      	cmp	r3, #14
 8003798:	dd96      	ble.n	80036c8 <Taskmonitor+0x3c>


		}
	}
	/* pxDelayedTaskList*/
	if(listLIST_IS_EMPTY(pxDelayedTaskList) == pdFALSE){
 800379a:	4b58      	ldr	r3, [pc, #352]	; (80038fc <Taskmonitor+0x270>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d04c      	beq.n	800383e <Taskmonitor+0x1b2>
				ListItem_t *First_item = pxDelayedTaskList->pxIndex ;
 80037a4:	4b55      	ldr	r3, [pc, #340]	; (80038fc <Taskmonitor+0x270>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				//uint32_t numberOfItems = pxReadyTasksLists[xPriority].uxNumberOfItems ;
				list_len = listCURRENT_LIST_LENGTH(pxDelayedTaskList) ;
 80037ae:	4b53      	ldr	r3, [pc, #332]	; (80038fc <Taskmonitor+0x270>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				First_item = First_item->pxPrevious ;
 80037b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for(int i = 0 ; i < list_len ; i ++){
 80037c2:	2300      	movs	r3, #0
 80037c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037c8:	e033      	b.n	8003832 <Taskmonitor+0x1a6>
					current_TCB = First_item->pvOwner ;
 80037ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
					sprintf(Monitor_data,"|%-20s %lu/%lu\t %p\t %p\tBlocked|\n\r",current_TCB->pcTaskName,current_TCB->uxBasePriority,current_TCB->uxPriority,current_TCB->pxStack,current_TCB->pxTopOfStack);
 80037d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037d8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80037dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037e0:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80037e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80037ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80037ee:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80037f2:	6809      	ldr	r1, [r1, #0]
 80037f4:	4638      	mov	r0, r7
 80037f6:	9102      	str	r1, [sp, #8]
 80037f8:	9201      	str	r2, [sp, #4]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	462b      	mov	r3, r5
 80037fe:	4622      	mov	r2, r4
 8003800:	493f      	ldr	r1, [pc, #252]	; (8003900 <Taskmonitor+0x274>)
 8003802:	f001 fcc3 	bl	800518c <siprintf>
					//sprintf(Monitor_data,"/%lu %p \n\r",current_TCB->uxPriority,current_TCB->pxStack);
					HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data,strlen(Monitor_data),0xffff);
 8003806:	463b      	mov	r3, r7
 8003808:	4618      	mov	r0, r3
 800380a:	f7fc fce1 	bl	80001d0 <strlen>
 800380e:	4603      	mov	r3, r0
 8003810:	b29a      	uxth	r2, r3
 8003812:	4639      	mov	r1, r7
 8003814:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003818:	4835      	ldr	r0, [pc, #212]	; (80038f0 <Taskmonitor+0x264>)
 800381a:	f7fe fd40 	bl	800229e <HAL_UART_Transmit>
					First_item = First_item->pxPrevious ;
 800381e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for(int i = 0 ; i < list_len ; i ++){
 8003828:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800382c:	3301      	adds	r3, #1
 800382e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003832:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003836:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800383a:	429a      	cmp	r2, r3
 800383c:	d8c5      	bhi.n	80037ca <Taskmonitor+0x13e>
				}


	}
	/* pxOverflowDelayedTaskList */
	if(listLIST_IS_EMPTY(pxOverflowDelayedTaskList) == pdFALSE){
 800383e:	4b31      	ldr	r3, [pc, #196]	; (8003904 <Taskmonitor+0x278>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d04c      	beq.n	80038e2 <Taskmonitor+0x256>
					ListItem_t *First_item = pxOverflowDelayedTaskList->pxIndex ;
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <Taskmonitor+0x278>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					//uint32_t numberOfItems = pxReadyTasksLists[xPriority].uxNumberOfItems ;
					list_len = listCURRENT_LIST_LENGTH(pxOverflowDelayedTaskList) ;
 8003852:	4b2c      	ldr	r3, [pc, #176]	; (8003904 <Taskmonitor+0x278>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
					First_item = First_item->pxPrevious ;
 800385c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					for(int i = 0 ; i < list_len ; i ++){
 8003866:	2300      	movs	r3, #0
 8003868:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800386c:	e033      	b.n	80038d6 <Taskmonitor+0x24a>
						current_TCB = First_item->pvOwner ;
 800386e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						sprintf(Monitor_data,"|%-20s %lu/%lu\t %p\t %p\tOverflow|\n\r",current_TCB->pcTaskName,current_TCB->uxBasePriority,current_TCB->uxPriority,current_TCB->pxStack,current_TCB->pxTopOfStack);
 8003878:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800387c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8003880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003884:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8003886:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003890:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003892:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8003896:	6809      	ldr	r1, [r1, #0]
 8003898:	4638      	mov	r0, r7
 800389a:	9102      	str	r1, [sp, #8]
 800389c:	9201      	str	r2, [sp, #4]
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	462b      	mov	r3, r5
 80038a2:	4622      	mov	r2, r4
 80038a4:	4918      	ldr	r1, [pc, #96]	; (8003908 <Taskmonitor+0x27c>)
 80038a6:	f001 fc71 	bl	800518c <siprintf>
						//sprintf(Monitor_data,"/%lu %p \n\r",current_TCB->uxPriority,current_TCB->pxStack);
						HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data,strlen(Monitor_data),0xffff);
 80038aa:	463b      	mov	r3, r7
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fc fc8f 	bl	80001d0 <strlen>
 80038b2:	4603      	mov	r3, r0
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	4639      	mov	r1, r7
 80038b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038bc:	480c      	ldr	r0, [pc, #48]	; (80038f0 <Taskmonitor+0x264>)
 80038be:	f7fe fcee 	bl	800229e <HAL_UART_Transmit>
						First_item = First_item->pxPrevious ;
 80038c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					for(int i = 0 ; i < list_len ; i ++){
 80038cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038d0:	3301      	adds	r3, #1
 80038d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80038d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80038de:	429a      	cmp	r2, r3
 80038e0:	d8c5      	bhi.n	800386e <Taskmonitor+0x1e2>

		}

	/* Resume scheduler */
	//xTaskResumeAll();
}
 80038e2:	bf00      	nop
 80038e4:	37a8      	adds	r7, #168	; 0xa8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bdb0      	pop	{r4, r5, r7, pc}
 80038ea:	bf00      	nop
 80038ec:	08005a24 	.word	0x08005a24
 80038f0:	20012ecc 	.word	0x20012ecc
 80038f4:	2000009c 	.word	0x2000009c
 80038f8:	08005a74 	.word	0x08005a74
 80038fc:	200001f0 	.word	0x200001f0
 8003900:	08005a94 	.word	0x08005a94
 8003904:	200001f4 	.word	0x200001f4
 8003908:	08005ab8 	.word	0x08005ab8

0800390c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800391a:	4b41      	ldr	r3, [pc, #260]	; (8003a20 <xTaskResumeAll+0x114>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <xTaskResumeAll+0x2c>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	603b      	str	r3, [r7, #0]
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003938:	f001 f8ec 	bl	8004b14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800393c:	4b38      	ldr	r3, [pc, #224]	; (8003a20 <xTaskResumeAll+0x114>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3b01      	subs	r3, #1
 8003942:	4a37      	ldr	r2, [pc, #220]	; (8003a20 <xTaskResumeAll+0x114>)
 8003944:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003946:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <xTaskResumeAll+0x114>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d161      	bne.n	8003a12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800394e:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <xTaskResumeAll+0x118>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d05d      	beq.n	8003a12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003956:	e02e      	b.n	80039b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003958:	4b33      	ldr	r3, [pc, #204]	; (8003a28 <xTaskResumeAll+0x11c>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3318      	adds	r3, #24
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe ffed 	bl	8002944 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3304      	adds	r3, #4
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe ffe8 	bl	8002944 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	2201      	movs	r2, #1
 800397a:	409a      	lsls	r2, r3
 800397c:	4b2b      	ldr	r3, [pc, #172]	; (8003a2c <xTaskResumeAll+0x120>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4313      	orrs	r3, r2
 8003982:	4a2a      	ldr	r2, [pc, #168]	; (8003a2c <xTaskResumeAll+0x120>)
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4a27      	ldr	r2, [pc, #156]	; (8003a30 <xTaskResumeAll+0x124>)
 8003994:	441a      	add	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3304      	adds	r3, #4
 800399a:	4619      	mov	r1, r3
 800399c:	4610      	mov	r0, r2
 800399e:	f7fe ff74 	bl	800288a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a6:	4b23      	ldr	r3, [pc, #140]	; (8003a34 <xTaskResumeAll+0x128>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d302      	bcc.n	80039b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80039b0:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <xTaskResumeAll+0x12c>)
 80039b2:	2201      	movs	r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039b6:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <xTaskResumeAll+0x11c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1cc      	bne.n	8003958 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039c4:	f000 fb2e 	bl	8004024 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80039c8:	4b1c      	ldr	r3, [pc, #112]	; (8003a3c <xTaskResumeAll+0x130>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d010      	beq.n	80039f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039d4:	f000 f846 	bl	8003a64 <xTaskIncrementTick>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80039de:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <xTaskResumeAll+0x12c>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1f1      	bne.n	80039d4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80039f0:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <xTaskResumeAll+0x130>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039f6:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <xTaskResumeAll+0x12c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039fe:	2301      	movs	r3, #1
 8003a00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <xTaskResumeAll+0x134>)
 8003a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a12:	f001 f8af 	bl	8004b74 <vPortExitCritical>

	return xAlreadyYielded;
 8003a16:	68bb      	ldr	r3, [r7, #8]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000260 	.word	0x20000260
 8003a24:	20000238 	.word	0x20000238
 8003a28:	200001f8 	.word	0x200001f8
 8003a2c:	20000240 	.word	0x20000240
 8003a30:	2000009c 	.word	0x2000009c
 8003a34:	20000098 	.word	0x20000098
 8003a38:	2000024c 	.word	0x2000024c
 8003a3c:	20000248 	.word	0x20000248
 8003a40:	e000ed04 	.word	0xe000ed04

08003a44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <xTaskGetTickCount+0x1c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a50:	687b      	ldr	r3, [r7, #4]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	2000023c 	.word	0x2000023c

08003a64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a6e:	4b4e      	ldr	r3, [pc, #312]	; (8003ba8 <xTaskIncrementTick+0x144>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f040 8088 	bne.w	8003b88 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a78:	4b4c      	ldr	r3, [pc, #304]	; (8003bac <xTaskIncrementTick+0x148>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a80:	4a4a      	ldr	r2, [pc, #296]	; (8003bac <xTaskIncrementTick+0x148>)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d120      	bne.n	8003ace <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a8c:	4b48      	ldr	r3, [pc, #288]	; (8003bb0 <xTaskIncrementTick+0x14c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <xTaskIncrementTick+0x48>
	__asm volatile
 8003a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9a:	f383 8811 	msr	BASEPRI, r3
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	603b      	str	r3, [r7, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	e7fe      	b.n	8003aaa <xTaskIncrementTick+0x46>
 8003aac:	4b40      	ldr	r3, [pc, #256]	; (8003bb0 <xTaskIncrementTick+0x14c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	4b40      	ldr	r3, [pc, #256]	; (8003bb4 <xTaskIncrementTick+0x150>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a3e      	ldr	r2, [pc, #248]	; (8003bb0 <xTaskIncrementTick+0x14c>)
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	4a3e      	ldr	r2, [pc, #248]	; (8003bb4 <xTaskIncrementTick+0x150>)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b3d      	ldr	r3, [pc, #244]	; (8003bb8 <xTaskIncrementTick+0x154>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	4a3c      	ldr	r2, [pc, #240]	; (8003bb8 <xTaskIncrementTick+0x154>)
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	f000 faab 	bl	8004024 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ace:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <xTaskIncrementTick+0x158>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d348      	bcc.n	8003b6a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ad8:	4b35      	ldr	r3, [pc, #212]	; (8003bb0 <xTaskIncrementTick+0x14c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d104      	bne.n	8003aec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ae2:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <xTaskIncrementTick+0x158>)
 8003ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae8:	601a      	str	r2, [r3, #0]
					break;
 8003aea:	e03e      	b.n	8003b6a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aec:	4b30      	ldr	r3, [pc, #192]	; (8003bb0 <xTaskIncrementTick+0x14c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d203      	bcs.n	8003b0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b04:	4a2d      	ldr	r2, [pc, #180]	; (8003bbc <xTaskIncrementTick+0x158>)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b0a:	e02e      	b.n	8003b6a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe ff17 	bl	8002944 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	3318      	adds	r3, #24
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe ff0e 	bl	8002944 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	4b23      	ldr	r3, [pc, #140]	; (8003bc0 <xTaskIncrementTick+0x15c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	4a22      	ldr	r2, [pc, #136]	; (8003bc0 <xTaskIncrementTick+0x15c>)
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	4a1f      	ldr	r2, [pc, #124]	; (8003bc4 <xTaskIncrementTick+0x160>)
 8003b48:	441a      	add	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4610      	mov	r0, r2
 8003b52:	f7fe fe9a 	bl	800288a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <xTaskIncrementTick+0x164>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d3b9      	bcc.n	8003ad8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b64:	2301      	movs	r3, #1
 8003b66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b68:	e7b6      	b.n	8003ad8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b6a:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <xTaskIncrementTick+0x164>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b70:	4914      	ldr	r1, [pc, #80]	; (8003bc4 <xTaskIncrementTick+0x160>)
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d907      	bls.n	8003b92 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003b82:	2301      	movs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	e004      	b.n	8003b92 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b88:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <xTaskIncrementTick+0x168>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	4a0f      	ldr	r2, [pc, #60]	; (8003bcc <xTaskIncrementTick+0x168>)
 8003b90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b92:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <xTaskIncrementTick+0x16c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b9e:	697b      	ldr	r3, [r7, #20]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20000260 	.word	0x20000260
 8003bac:	2000023c 	.word	0x2000023c
 8003bb0:	200001f0 	.word	0x200001f0
 8003bb4:	200001f4 	.word	0x200001f4
 8003bb8:	20000250 	.word	0x20000250
 8003bbc:	20000258 	.word	0x20000258
 8003bc0:	20000240 	.word	0x20000240
 8003bc4:	2000009c 	.word	0x2000009c
 8003bc8:	20000098 	.word	0x20000098
 8003bcc:	20000248 	.word	0x20000248
 8003bd0:	2000024c 	.word	0x2000024c

08003bd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bda:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <vTaskSwitchContext+0xa4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003be2:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <vTaskSwitchContext+0xa8>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003be8:	e03f      	b.n	8003c6a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003bea:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <vTaskSwitchContext+0xa8>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf0:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <vTaskSwitchContext+0xac>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	fab3 f383 	clz	r3, r3
 8003bfc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003bfe:	7afb      	ldrb	r3, [r7, #11]
 8003c00:	f1c3 031f 	rsb	r3, r3, #31
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	491f      	ldr	r1, [pc, #124]	; (8003c84 <vTaskSwitchContext+0xb0>)
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	607b      	str	r3, [r7, #4]
}
 8003c2c:	bf00      	nop
 8003c2e:	e7fe      	b.n	8003c2e <vTaskSwitchContext+0x5a>
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <vTaskSwitchContext+0xb0>)
 8003c3c:	4413      	add	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	3308      	adds	r3, #8
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d104      	bne.n	8003c60 <vTaskSwitchContext+0x8c>
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	605a      	str	r2, [r3, #4]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <vTaskSwitchContext+0xb4>)
 8003c68:	6013      	str	r3, [r2, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000260 	.word	0x20000260
 8003c7c:	2000024c 	.word	0x2000024c
 8003c80:	20000240 	.word	0x20000240
 8003c84:	2000009c 	.word	0x2000009c
 8003c88:	20000098 	.word	0x20000098

08003c8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60fb      	str	r3, [r7, #12]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cb2:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <vTaskPlaceOnEventList+0x44>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3318      	adds	r3, #24
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fe fe09 	bl	80028d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	6838      	ldr	r0, [r7, #0]
 8003cc4:	f000 fa72 	bl	80041ac <prvAddCurrentTaskToDelayedList>
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	20000098 	.word	0x20000098

08003cd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	617b      	str	r3, [r7, #20]
}
 8003cf8:	bf00      	nop
 8003cfa:	e7fe      	b.n	8003cfa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <vTaskPlaceOnEventListRestricted+0x54>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3318      	adds	r3, #24
 8003d02:	4619      	mov	r1, r3
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f7fe fdc0 	bl	800288a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	68b8      	ldr	r0, [r7, #8]
 8003d1a:	f000 fa47 	bl	80041ac <prvAddCurrentTaskToDelayedList>
	}
 8003d1e:	bf00      	nop
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000098 	.word	0x20000098

08003d2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10a      	bne.n	8003d58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	60fb      	str	r3, [r7, #12]
}
 8003d54:	bf00      	nop
 8003d56:	e7fe      	b.n	8003d56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe fdf1 	bl	8002944 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d62:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <xTaskRemoveFromEventList+0xac>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d11c      	bne.n	8003da4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe fde8 	bl	8002944 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	2201      	movs	r2, #1
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <xTaskRemoveFromEventList+0xb0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	4a16      	ldr	r2, [pc, #88]	; (8003ddc <xTaskRemoveFromEventList+0xb0>)
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <xTaskRemoveFromEventList+0xb4>)
 8003d94:	441a      	add	r2, r3
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f7fe fd74 	bl	800288a <vListInsertEnd>
 8003da2:	e005      	b.n	8003db0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	3318      	adds	r3, #24
 8003da8:	4619      	mov	r1, r3
 8003daa:	480e      	ldr	r0, [pc, #56]	; (8003de4 <xTaskRemoveFromEventList+0xb8>)
 8003dac:	f7fe fd6d 	bl	800288a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <xTaskRemoveFromEventList+0xbc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d905      	bls.n	8003dca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003dc2:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <xTaskRemoveFromEventList+0xc0>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e001      	b.n	8003dce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003dce:	697b      	ldr	r3, [r7, #20]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000260 	.word	0x20000260
 8003ddc:	20000240 	.word	0x20000240
 8003de0:	2000009c 	.word	0x2000009c
 8003de4:	200001f8 	.word	0x200001f8
 8003de8:	20000098 	.word	0x20000098
 8003dec:	2000024c 	.word	0x2000024c

08003df0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <vTaskInternalSetTimeOutState+0x24>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <vTaskInternalSetTimeOutState+0x28>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	605a      	str	r2, [r3, #4]
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	20000250 	.word	0x20000250
 8003e18:	2000023c 	.word	0x2000023c

08003e1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b088      	sub	sp, #32
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	613b      	str	r3, [r7, #16]
}
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	60fb      	str	r3, [r7, #12]
}
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e5e:	f000 fe59 	bl	8004b14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e62:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <xTaskCheckForTimeOut+0xbc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d102      	bne.n	8003e82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	e023      	b.n	8003eca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4b15      	ldr	r3, [pc, #84]	; (8003edc <xTaskCheckForTimeOut+0xc0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d007      	beq.n	8003e9e <xTaskCheckForTimeOut+0x82>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d302      	bcc.n	8003e9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	e015      	b.n	8003eca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d20b      	bcs.n	8003ec0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	1ad2      	subs	r2, r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ff9b 	bl	8003df0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e004      	b.n	8003eca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003eca:	f000 fe53 	bl	8004b74 <vPortExitCritical>

	return xReturn;
 8003ece:	69fb      	ldr	r3, [r7, #28]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3720      	adds	r7, #32
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	2000023c 	.word	0x2000023c
 8003edc:	20000250 	.word	0x20000250

08003ee0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ee4:	4b03      	ldr	r3, [pc, #12]	; (8003ef4 <vTaskMissedYield+0x14>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	2000024c 	.word	0x2000024c

08003ef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f00:	f000 f852 	bl	8003fa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <prvIdleTask+0x28>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d9f9      	bls.n	8003f00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <prvIdleTask+0x2c>)
 8003f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f1c:	e7f0      	b.n	8003f00 <prvIdleTask+0x8>
 8003f1e:	bf00      	nop
 8003f20:	2000009c 	.word	0x2000009c
 8003f24:	e000ed04 	.word	0xe000ed04

08003f28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f2e:	2300      	movs	r3, #0
 8003f30:	607b      	str	r3, [r7, #4]
 8003f32:	e00c      	b.n	8003f4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <prvInitialiseTaskLists+0x60>)
 8003f40:	4413      	add	r3, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fc74 	bl	8002830 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b0e      	cmp	r3, #14
 8003f52:	d9ef      	bls.n	8003f34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f54:	480d      	ldr	r0, [pc, #52]	; (8003f8c <prvInitialiseTaskLists+0x64>)
 8003f56:	f7fe fc6b 	bl	8002830 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f5a:	480d      	ldr	r0, [pc, #52]	; (8003f90 <prvInitialiseTaskLists+0x68>)
 8003f5c:	f7fe fc68 	bl	8002830 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f60:	480c      	ldr	r0, [pc, #48]	; (8003f94 <prvInitialiseTaskLists+0x6c>)
 8003f62:	f7fe fc65 	bl	8002830 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f66:	480c      	ldr	r0, [pc, #48]	; (8003f98 <prvInitialiseTaskLists+0x70>)
 8003f68:	f7fe fc62 	bl	8002830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f6c:	480b      	ldr	r0, [pc, #44]	; (8003f9c <prvInitialiseTaskLists+0x74>)
 8003f6e:	f7fe fc5f 	bl	8002830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <prvInitialiseTaskLists+0x78>)
 8003f74:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <prvInitialiseTaskLists+0x64>)
 8003f76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <prvInitialiseTaskLists+0x7c>)
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <prvInitialiseTaskLists+0x68>)
 8003f7c:	601a      	str	r2, [r3, #0]
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	2000009c 	.word	0x2000009c
 8003f8c:	200001c8 	.word	0x200001c8
 8003f90:	200001dc 	.word	0x200001dc
 8003f94:	200001f8 	.word	0x200001f8
 8003f98:	2000020c 	.word	0x2000020c
 8003f9c:	20000224 	.word	0x20000224
 8003fa0:	200001f0 	.word	0x200001f0
 8003fa4:	200001f4 	.word	0x200001f4

08003fa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fae:	e019      	b.n	8003fe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fb0:	f000 fdb0 	bl	8004b14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <prvCheckTasksWaitingTermination+0x50>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe fcbf 	bl	8002944 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fc6:	4b0d      	ldr	r3, [pc, #52]	; (8003ffc <prvCheckTasksWaitingTermination+0x54>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	4a0b      	ldr	r2, [pc, #44]	; (8003ffc <prvCheckTasksWaitingTermination+0x54>)
 8003fce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <prvCheckTasksWaitingTermination+0x58>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	4a0a      	ldr	r2, [pc, #40]	; (8004000 <prvCheckTasksWaitingTermination+0x58>)
 8003fd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003fda:	f000 fdcb 	bl	8004b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f810 	bl	8004004 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <prvCheckTasksWaitingTermination+0x58>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e1      	bne.n	8003fb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	2000020c 	.word	0x2000020c
 8003ffc:	20000238 	.word	0x20000238
 8004000:	20000220 	.word	0x20000220

08004004 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	4618      	mov	r0, r3
 8004012:	f000 ff65 	bl	8004ee0 <vPortFree>
			vPortFree( pxTCB );
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 ff62 	bl	8004ee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800402a:	4b0c      	ldr	r3, [pc, #48]	; (800405c <prvResetNextTaskUnblockTime+0x38>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d104      	bne.n	800403e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <prvResetNextTaskUnblockTime+0x3c>)
 8004036:	f04f 32ff 	mov.w	r2, #4294967295
 800403a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800403c:	e008      	b.n	8004050 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800403e:	4b07      	ldr	r3, [pc, #28]	; (800405c <prvResetNextTaskUnblockTime+0x38>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4a04      	ldr	r2, [pc, #16]	; (8004060 <prvResetNextTaskUnblockTime+0x3c>)
 800404e:	6013      	str	r3, [r2, #0]
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	200001f0 	.word	0x200001f0
 8004060:	20000258 	.word	0x20000258

08004064 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <xTaskGetSchedulerState+0x34>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d102      	bne.n	8004078 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004072:	2301      	movs	r3, #1
 8004074:	607b      	str	r3, [r7, #4]
 8004076:	e008      	b.n	800408a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004078:	4b08      	ldr	r3, [pc, #32]	; (800409c <xTaskGetSchedulerState+0x38>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004080:	2302      	movs	r3, #2
 8004082:	607b      	str	r3, [r7, #4]
 8004084:	e001      	b.n	800408a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800408a:	687b      	ldr	r3, [r7, #4]
	}
 800408c:	4618      	mov	r0, r3
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	20000244 	.word	0x20000244
 800409c:	20000260 	.word	0x20000260

080040a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d06e      	beq.n	8004194 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80040b6:	4b3a      	ldr	r3, [pc, #232]	; (80041a0 <xTaskPriorityDisinherit+0x100>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d00a      	beq.n	80040d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	60fb      	str	r3, [r7, #12]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	60bb      	str	r3, [r7, #8]
}
 80040f0:	bf00      	nop
 80040f2:	e7fe      	b.n	80040f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f8:	1e5a      	subs	r2, r3, #1
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004106:	429a      	cmp	r2, r3
 8004108:	d044      	beq.n	8004194 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d140      	bne.n	8004194 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	3304      	adds	r3, #4
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe fc14 	bl	8002944 <uxListRemove>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d115      	bne.n	800414e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004126:	491f      	ldr	r1, [pc, #124]	; (80041a4 <xTaskPriorityDisinherit+0x104>)
 8004128:	4613      	mov	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <xTaskPriorityDisinherit+0xae>
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	2201      	movs	r2, #1
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43da      	mvns	r2, r3
 8004144:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <xTaskPriorityDisinherit+0x108>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4013      	ands	r3, r2
 800414a:	4a17      	ldr	r2, [pc, #92]	; (80041a8 <xTaskPriorityDisinherit+0x108>)
 800414c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	f1c3 020f 	rsb	r2, r3, #15
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	2201      	movs	r2, #1
 8004168:	409a      	lsls	r2, r3
 800416a:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <xTaskPriorityDisinherit+0x108>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4313      	orrs	r3, r2
 8004170:	4a0d      	ldr	r2, [pc, #52]	; (80041a8 <xTaskPriorityDisinherit+0x108>)
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <xTaskPriorityDisinherit+0x104>)
 8004182:	441a      	add	r2, r3
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	3304      	adds	r3, #4
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f7fe fb7d 	bl	800288a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004190:	2301      	movs	r3, #1
 8004192:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004194:	697b      	ldr	r3, [r7, #20]
	}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000098 	.word	0x20000098
 80041a4:	2000009c 	.word	0x2000009c
 80041a8:	20000240 	.word	0x20000240

080041ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041b6:	4b29      	ldr	r3, [pc, #164]	; (800425c <prvAddCurrentTaskToDelayedList+0xb0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041bc:	4b28      	ldr	r3, [pc, #160]	; (8004260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3304      	adds	r3, #4
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe fbbe 	bl	8002944 <uxListRemove>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10b      	bne.n	80041e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	2201      	movs	r2, #1
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	4b21      	ldr	r3, [pc, #132]	; (8004264 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4013      	ands	r3, r2
 80041e2:	4a20      	ldr	r2, [pc, #128]	; (8004264 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d10a      	bne.n	8004204 <prvAddCurrentTaskToDelayedList+0x58>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d007      	beq.n	8004204 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041f4:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <prvAddCurrentTaskToDelayedList+0xb4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4619      	mov	r1, r3
 80041fc:	481a      	ldr	r0, [pc, #104]	; (8004268 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041fe:	f7fe fb44 	bl	800288a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004202:	e026      	b.n	8004252 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800420c:	4b14      	ldr	r3, [pc, #80]	; (8004260 <prvAddCurrentTaskToDelayedList+0xb4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	429a      	cmp	r2, r3
 800421a:	d209      	bcs.n	8004230 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800421c:	4b13      	ldr	r3, [pc, #76]	; (800426c <prvAddCurrentTaskToDelayedList+0xc0>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f7fe fb52 	bl	80028d2 <vListInsert>
}
 800422e:	e010      	b.n	8004252 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004230:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3304      	adds	r3, #4
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f7fe fb48 	bl	80028d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004242:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	429a      	cmp	r2, r3
 800424a:	d202      	bcs.n	8004252 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800424c:	4a09      	ldr	r2, [pc, #36]	; (8004274 <prvAddCurrentTaskToDelayedList+0xc8>)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6013      	str	r3, [r2, #0]
}
 8004252:	bf00      	nop
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	2000023c 	.word	0x2000023c
 8004260:	20000098 	.word	0x20000098
 8004264:	20000240 	.word	0x20000240
 8004268:	20000224 	.word	0x20000224
 800426c:	200001f4 	.word	0x200001f4
 8004270:	200001f0 	.word	0x200001f0
 8004274:	20000258 	.word	0x20000258

08004278 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800427e:	2300      	movs	r3, #0
 8004280:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004282:	f000 fad5 	bl	8004830 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004286:	4b11      	ldr	r3, [pc, #68]	; (80042cc <xTimerCreateTimerTask+0x54>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800428e:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <xTimerCreateTimerTask+0x58>)
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	2302      	movs	r3, #2
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	2300      	movs	r3, #0
 8004298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800429c:	490d      	ldr	r1, [pc, #52]	; (80042d4 <xTimerCreateTimerTask+0x5c>)
 800429e:	480e      	ldr	r0, [pc, #56]	; (80042d8 <xTimerCreateTimerTask+0x60>)
 80042a0:	f7ff f826 	bl	80032f0 <xTaskCreate>
 80042a4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10a      	bne.n	80042c2 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	603b      	str	r3, [r7, #0]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <xTimerCreateTimerTask+0x48>
	return xReturn;
 80042c2:	687b      	ldr	r3, [r7, #4]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000294 	.word	0x20000294
 80042d0:	20000298 	.word	0x20000298
 80042d4:	08005adc 	.word	0x08005adc
 80042d8:	08004411 	.word	0x08004411

080042dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <xTimerGenericCommand+0x2e>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	623b      	str	r3, [r7, #32]
}
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800430a:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <xTimerGenericCommand+0x98>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d02a      	beq.n	8004368 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b05      	cmp	r3, #5
 8004322:	dc18      	bgt.n	8004356 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004324:	f7ff fe9e 	bl	8004064 <xTaskGetSchedulerState>
 8004328:	4603      	mov	r3, r0
 800432a:	2b02      	cmp	r3, #2
 800432c:	d109      	bne.n	8004342 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800432e:	4b11      	ldr	r3, [pc, #68]	; (8004374 <xTimerGenericCommand+0x98>)
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	f107 0114 	add.w	r1, r7, #20
 8004336:	2300      	movs	r3, #0
 8004338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433a:	f7fe fbf5 	bl	8002b28 <xQueueGenericSend>
 800433e:	6278      	str	r0, [r7, #36]	; 0x24
 8004340:	e012      	b.n	8004368 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <xTimerGenericCommand+0x98>)
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	f107 0114 	add.w	r1, r7, #20
 800434a:	2300      	movs	r3, #0
 800434c:	2200      	movs	r2, #0
 800434e:	f7fe fbeb 	bl	8002b28 <xQueueGenericSend>
 8004352:	6278      	str	r0, [r7, #36]	; 0x24
 8004354:	e008      	b.n	8004368 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004356:	4b07      	ldr	r3, [pc, #28]	; (8004374 <xTimerGenericCommand+0x98>)
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	f107 0114 	add.w	r1, r7, #20
 800435e:	2300      	movs	r3, #0
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	f7fe fcdf 	bl	8002d24 <xQueueGenericSendFromISR>
 8004366:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800436a:	4618      	mov	r0, r3
 800436c:	3728      	adds	r7, #40	; 0x28
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000294 	.word	0x20000294

08004378 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af02      	add	r7, sp, #8
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004382:	4b22      	ldr	r3, [pc, #136]	; (800440c <prvProcessExpiredTimer+0x94>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	3304      	adds	r3, #4
 8004390:	4618      	mov	r0, r3
 8004392:	f7fe fad7 	bl	8002944 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d022      	beq.n	80043ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	699a      	ldr	r2, [r3, #24]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	18d1      	adds	r1, r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	6978      	ldr	r0, [r7, #20]
 80043b2:	f000 f8d1 	bl	8004558 <prvInsertTimerInActiveList>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01f      	beq.n	80043fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043bc:	2300      	movs	r3, #0
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2300      	movs	r3, #0
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	2100      	movs	r1, #0
 80043c6:	6978      	ldr	r0, [r7, #20]
 80043c8:	f7ff ff88 	bl	80042dc <xTimerGenericCommand>
 80043cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d113      	bne.n	80043fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	60fb      	str	r3, [r7, #12]
}
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043f0:	f023 0301 	bic.w	r3, r3, #1
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	6978      	ldr	r0, [r7, #20]
 8004402:	4798      	blx	r3
}
 8004404:	bf00      	nop
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	2000028c 	.word	0x2000028c

08004410 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004418:	f107 0308 	add.w	r3, r7, #8
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f857 	bl	80044d0 <prvGetNextExpireTime>
 8004422:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4619      	mov	r1, r3
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f803 	bl	8004434 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800442e:	f000 f8d5 	bl	80045dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004432:	e7f1      	b.n	8004418 <prvTimerTask+0x8>

08004434 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800443e:	f7ff f917 	bl	8003670 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004442:	f107 0308 	add.w	r3, r7, #8
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f866 	bl	8004518 <prvSampleTimeNow>
 800444c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d130      	bne.n	80044b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <prvProcessTimerOrBlockTask+0x3c>
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	429a      	cmp	r2, r3
 8004460:	d806      	bhi.n	8004470 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004462:	f7ff fa53 	bl	800390c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004466:	68f9      	ldr	r1, [r7, #12]
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff ff85 	bl	8004378 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800446e:	e024      	b.n	80044ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004476:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <prvProcessTimerOrBlockTask+0x90>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <prvProcessTimerOrBlockTask+0x50>
 8004480:	2301      	movs	r3, #1
 8004482:	e000      	b.n	8004486 <prvProcessTimerOrBlockTask+0x52>
 8004484:	2300      	movs	r3, #0
 8004486:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004488:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <prvProcessTimerOrBlockTask+0x94>)
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	4619      	mov	r1, r3
 8004496:	f7fe fef7 	bl	8003288 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800449a:	f7ff fa37 	bl	800390c <xTaskResumeAll>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10a      	bne.n	80044ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80044a4:	4b09      	ldr	r3, [pc, #36]	; (80044cc <prvProcessTimerOrBlockTask+0x98>)
 80044a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	f3bf 8f6f 	isb	sy
}
 80044b4:	e001      	b.n	80044ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80044b6:	f7ff fa29 	bl	800390c <xTaskResumeAll>
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000290 	.word	0x20000290
 80044c8:	20000294 	.word	0x20000294
 80044cc:	e000ed04 	.word	0xe000ed04

080044d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <prvGetNextExpireTime+0x44>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <prvGetNextExpireTime+0x16>
 80044e2:	2201      	movs	r2, #1
 80044e4:	e000      	b.n	80044e8 <prvGetNextExpireTime+0x18>
 80044e6:	2200      	movs	r2, #0
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d105      	bne.n	8004500 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044f4:	4b07      	ldr	r3, [pc, #28]	; (8004514 <prvGetNextExpireTime+0x44>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	e001      	b.n	8004504 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004504:	68fb      	ldr	r3, [r7, #12]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	2000028c 	.word	0x2000028c

08004518 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004520:	f7ff fa90 	bl	8003a44 <xTaskGetTickCount>
 8004524:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <prvSampleTimeNow+0x3c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	429a      	cmp	r2, r3
 800452e:	d205      	bcs.n	800453c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004530:	f000 f91a 	bl	8004768 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e002      	b.n	8004542 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004542:	4a04      	ldr	r2, [pc, #16]	; (8004554 <prvSampleTimeNow+0x3c>)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004548:	68fb      	ldr	r3, [r7, #12]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	2000029c 	.word	0x2000029c

08004558 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	429a      	cmp	r2, r3
 800457c:	d812      	bhi.n	80045a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	1ad2      	subs	r2, r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	429a      	cmp	r2, r3
 800458a:	d302      	bcc.n	8004592 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800458c:	2301      	movs	r3, #1
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	e01b      	b.n	80045ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004592:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <prvInsertTimerInActiveList+0x7c>)
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3304      	adds	r3, #4
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f7fe f998 	bl	80028d2 <vListInsert>
 80045a2:	e012      	b.n	80045ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d206      	bcs.n	80045ba <prvInsertTimerInActiveList+0x62>
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d302      	bcc.n	80045ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80045b4:	2301      	movs	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	e007      	b.n	80045ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045ba:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <prvInsertTimerInActiveList+0x80>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3304      	adds	r3, #4
 80045c2:	4619      	mov	r1, r3
 80045c4:	4610      	mov	r0, r2
 80045c6:	f7fe f984 	bl	80028d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80045ca:	697b      	ldr	r3, [r7, #20]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000290 	.word	0x20000290
 80045d8:	2000028c 	.word	0x2000028c

080045dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08c      	sub	sp, #48	; 0x30
 80045e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80045e2:	e0ae      	b.n	8004742 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f2c0 80aa 	blt.w	8004740 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d004      	beq.n	8004602 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	3304      	adds	r3, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe f9a1 	bl	8002944 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004602:	1d3b      	adds	r3, r7, #4
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff ff87 	bl	8004518 <prvSampleTimeNow>
 800460a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b09      	cmp	r3, #9
 8004610:	f200 8097 	bhi.w	8004742 <prvProcessReceivedCommands+0x166>
 8004614:	a201      	add	r2, pc, #4	; (adr r2, 800461c <prvProcessReceivedCommands+0x40>)
 8004616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461a:	bf00      	nop
 800461c:	08004645 	.word	0x08004645
 8004620:	08004645 	.word	0x08004645
 8004624:	08004645 	.word	0x08004645
 8004628:	080046b9 	.word	0x080046b9
 800462c:	080046cd 	.word	0x080046cd
 8004630:	08004717 	.word	0x08004717
 8004634:	08004645 	.word	0x08004645
 8004638:	08004645 	.word	0x08004645
 800463c:	080046b9 	.word	0x080046b9
 8004640:	080046cd 	.word	0x080046cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	b2da      	uxtb	r2, r3
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	18d1      	adds	r1, r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a3a      	ldr	r2, [r7, #32]
 8004662:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004664:	f7ff ff78 	bl	8004558 <prvInsertTimerInActiveList>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d069      	beq.n	8004742 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004674:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d05e      	beq.n	8004742 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	441a      	add	r2, r3
 800468c:	2300      	movs	r3, #0
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	2300      	movs	r3, #0
 8004692:	2100      	movs	r1, #0
 8004694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004696:	f7ff fe21 	bl	80042dc <xTimerGenericCommand>
 800469a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d14f      	bne.n	8004742 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	61bb      	str	r3, [r7, #24]
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80046ca:	e03a      	b.n	8004742 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10a      	bne.n	8004702 <prvProcessReceivedCommands+0x126>
	__asm volatile
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
 80046fc:	617b      	str	r3, [r7, #20]
}
 80046fe:	bf00      	nop
 8004700:	e7fe      	b.n	8004700 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	18d1      	adds	r1, r2, r3
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	6a3a      	ldr	r2, [r7, #32]
 800470e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004710:	f7ff ff22 	bl	8004558 <prvInsertTimerInActiveList>
					break;
 8004714:	e015      	b.n	8004742 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d103      	bne.n	800472c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004726:	f000 fbdb 	bl	8004ee0 <vPortFree>
 800472a:	e00a      	b.n	8004742 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	b2da      	uxtb	r2, r3
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800473e:	e000      	b.n	8004742 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004740:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <prvProcessReceivedCommands+0x188>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f107 0108 	add.w	r1, r7, #8
 800474a:	2200      	movs	r2, #0
 800474c:	4618      	mov	r0, r3
 800474e:	f7fe fb81 	bl	8002e54 <xQueueReceive>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	f47f af45 	bne.w	80045e4 <prvProcessReceivedCommands+0x8>
	}
}
 800475a:	bf00      	nop
 800475c:	bf00      	nop
 800475e:	3728      	adds	r7, #40	; 0x28
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000294 	.word	0x20000294

08004768 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800476e:	e048      	b.n	8004802 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004770:	4b2d      	ldr	r3, [pc, #180]	; (8004828 <prvSwitchTimerLists+0xc0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800477a:	4b2b      	ldr	r3, [pc, #172]	; (8004828 <prvSwitchTimerLists+0xc0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	3304      	adds	r3, #4
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe f8db 	bl	8002944 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d02e      	beq.n	8004802 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4413      	add	r3, r2
 80047ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d90e      	bls.n	80047d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047c2:	4b19      	ldr	r3, [pc, #100]	; (8004828 <prvSwitchTimerLists+0xc0>)
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4619      	mov	r1, r3
 80047cc:	4610      	mov	r0, r2
 80047ce:	f7fe f880 	bl	80028d2 <vListInsert>
 80047d2:	e016      	b.n	8004802 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047d4:	2300      	movs	r3, #0
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2300      	movs	r3, #0
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	2100      	movs	r1, #0
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f7ff fd7c 	bl	80042dc <xTimerGenericCommand>
 80047e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	603b      	str	r3, [r7, #0]
}
 80047fe:	bf00      	nop
 8004800:	e7fe      	b.n	8004800 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004802:	4b09      	ldr	r3, [pc, #36]	; (8004828 <prvSwitchTimerLists+0xc0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1b1      	bne.n	8004770 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800480c:	4b06      	ldr	r3, [pc, #24]	; (8004828 <prvSwitchTimerLists+0xc0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004812:	4b06      	ldr	r3, [pc, #24]	; (800482c <prvSwitchTimerLists+0xc4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a04      	ldr	r2, [pc, #16]	; (8004828 <prvSwitchTimerLists+0xc0>)
 8004818:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800481a:	4a04      	ldr	r2, [pc, #16]	; (800482c <prvSwitchTimerLists+0xc4>)
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	6013      	str	r3, [r2, #0]
}
 8004820:	bf00      	nop
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	2000028c 	.word	0x2000028c
 800482c:	20000290 	.word	0x20000290

08004830 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004834:	f000 f96e 	bl	8004b14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004838:	4b12      	ldr	r3, [pc, #72]	; (8004884 <prvCheckForValidListAndQueue+0x54>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d11d      	bne.n	800487c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004840:	4811      	ldr	r0, [pc, #68]	; (8004888 <prvCheckForValidListAndQueue+0x58>)
 8004842:	f7fd fff5 	bl	8002830 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004846:	4811      	ldr	r0, [pc, #68]	; (800488c <prvCheckForValidListAndQueue+0x5c>)
 8004848:	f7fd fff2 	bl	8002830 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800484c:	4b10      	ldr	r3, [pc, #64]	; (8004890 <prvCheckForValidListAndQueue+0x60>)
 800484e:	4a0e      	ldr	r2, [pc, #56]	; (8004888 <prvCheckForValidListAndQueue+0x58>)
 8004850:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004852:	4b10      	ldr	r3, [pc, #64]	; (8004894 <prvCheckForValidListAndQueue+0x64>)
 8004854:	4a0d      	ldr	r2, [pc, #52]	; (800488c <prvCheckForValidListAndQueue+0x5c>)
 8004856:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004858:	2200      	movs	r2, #0
 800485a:	210c      	movs	r1, #12
 800485c:	200a      	movs	r0, #10
 800485e:	f7fe f903 	bl	8002a68 <xQueueGenericCreate>
 8004862:	4603      	mov	r3, r0
 8004864:	4a07      	ldr	r2, [pc, #28]	; (8004884 <prvCheckForValidListAndQueue+0x54>)
 8004866:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <prvCheckForValidListAndQueue+0x54>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <prvCheckForValidListAndQueue+0x54>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4908      	ldr	r1, [pc, #32]	; (8004898 <prvCheckForValidListAndQueue+0x68>)
 8004876:	4618      	mov	r0, r3
 8004878:	f7fe fcdc 	bl	8003234 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800487c:	f000 f97a 	bl	8004b74 <vPortExitCritical>
}
 8004880:	bf00      	nop
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20000294 	.word	0x20000294
 8004888:	20000264 	.word	0x20000264
 800488c:	20000278 	.word	0x20000278
 8004890:	2000028c 	.word	0x2000028c
 8004894:	20000290 	.word	0x20000290
 8004898:	08005ae4 	.word	0x08005ae4

0800489c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3b04      	subs	r3, #4
 80048ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3b04      	subs	r3, #4
 80048ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f023 0201 	bic.w	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3b04      	subs	r3, #4
 80048ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048cc:	4a0c      	ldr	r2, [pc, #48]	; (8004900 <pxPortInitialiseStack+0x64>)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3b14      	subs	r3, #20
 80048d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3b04      	subs	r3, #4
 80048e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f06f 0202 	mvn.w	r2, #2
 80048ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3b20      	subs	r3, #32
 80048f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048f2:	68fb      	ldr	r3, [r7, #12]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	08004905 	.word	0x08004905

08004904 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800490e:	4b12      	ldr	r3, [pc, #72]	; (8004958 <prvTaskExitError+0x54>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d00a      	beq.n	800492e <prvTaskExitError+0x2a>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	60fb      	str	r3, [r7, #12]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <prvTaskExitError+0x28>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	60bb      	str	r3, [r7, #8]
}
 8004940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004942:	bf00      	nop
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0fc      	beq.n	8004944 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	2000000c 	.word	0x2000000c
 800495c:	00000000 	.word	0x00000000

08004960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <pxCurrentTCBConst2>)
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	6808      	ldr	r0, [r1, #0]
 8004966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496a:	f380 8809 	msr	PSP, r0
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f04f 0000 	mov.w	r0, #0
 8004976:	f380 8811 	msr	BASEPRI, r0
 800497a:	4770      	bx	lr
 800497c:	f3af 8000 	nop.w

08004980 <pxCurrentTCBConst2>:
 8004980:	20000098 	.word	0x20000098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop

08004988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004988:	4808      	ldr	r0, [pc, #32]	; (80049ac <prvPortStartFirstTask+0x24>)
 800498a:	6800      	ldr	r0, [r0, #0]
 800498c:	6800      	ldr	r0, [r0, #0]
 800498e:	f380 8808 	msr	MSP, r0
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8814 	msr	CONTROL, r0
 800499a:	b662      	cpsie	i
 800499c:	b661      	cpsie	f
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	df00      	svc	0
 80049a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049aa:	bf00      	nop
 80049ac:	e000ed08 	.word	0xe000ed08

080049b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049b6:	4b4e      	ldr	r3, [pc, #312]	; (8004af0 <xPortStartScheduler+0x140>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a4e      	ldr	r2, [pc, #312]	; (8004af4 <xPortStartScheduler+0x144>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d10a      	bne.n	80049d6 <xPortStartScheduler+0x26>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	61bb      	str	r3, [r7, #24]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049d6:	4b46      	ldr	r3, [pc, #280]	; (8004af0 <xPortStartScheduler+0x140>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a47      	ldr	r2, [pc, #284]	; (8004af8 <xPortStartScheduler+0x148>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10a      	bne.n	80049f6 <xPortStartScheduler+0x46>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	617b      	str	r3, [r7, #20]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049f6:	4b41      	ldr	r3, [pc, #260]	; (8004afc <xPortStartScheduler+0x14c>)
 80049f8:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	22ff      	movs	r2, #255	; 0xff
 8004a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <xPortStartScheduler+0x150>)
 8004a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a1e:	4b39      	ldr	r3, [pc, #228]	; (8004b04 <xPortStartScheduler+0x154>)
 8004a20:	2207      	movs	r2, #7
 8004a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a24:	e009      	b.n	8004a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a26:	4b37      	ldr	r3, [pc, #220]	; (8004b04 <xPortStartScheduler+0x154>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	4a35      	ldr	r2, [pc, #212]	; (8004b04 <xPortStartScheduler+0x154>)
 8004a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b80      	cmp	r3, #128	; 0x80
 8004a44:	d0ef      	beq.n	8004a26 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8004a46:	4b2f      	ldr	r3, [pc, #188]	; (8004b04 <xPortStartScheduler+0x154>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f1c3 0307 	rsb	r3, r3, #7
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d00a      	beq.n	8004a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	613b      	str	r3, [r7, #16]
}
 8004a64:	bf00      	nop
 8004a66:	e7fe      	b.n	8004a66 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a68:	4b26      	ldr	r3, [pc, #152]	; (8004b04 <xPortStartScheduler+0x154>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f1c3 0307 	rsb	r3, r3, #7
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d00a      	beq.n	8004a8a <xPortStartScheduler+0xda>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	60fb      	str	r3, [r7, #12]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a8a:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <xPortStartScheduler+0x154>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <xPortStartScheduler+0x154>)
 8004a92:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a94:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <xPortStartScheduler+0x154>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a9c:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <xPortStartScheduler+0x154>)
 8004a9e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004aa8:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <xPortStartScheduler+0x158>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <xPortStartScheduler+0x158>)
 8004aae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ab2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ab4:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <xPortStartScheduler+0x158>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <xPortStartScheduler+0x158>)
 8004aba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004abe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ac0:	f000 f8dc 	bl	8004c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ac4:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <xPortStartScheduler+0x15c>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004aca:	f000 f8fb 	bl	8004cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <xPortStartScheduler+0x160>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a0f      	ldr	r2, [pc, #60]	; (8004b10 <xPortStartScheduler+0x160>)
 8004ad4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ad8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ada:	f7ff ff55 	bl	8004988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ade:	f7ff f879 	bl	8003bd4 <vTaskSwitchContext>
	prvTaskExitError();
 8004ae2:	f7ff ff0f 	bl	8004904 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3720      	adds	r7, #32
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	e000ed00 	.word	0xe000ed00
 8004af4:	410fc271 	.word	0x410fc271
 8004af8:	410fc270 	.word	0x410fc270
 8004afc:	e000e400 	.word	0xe000e400
 8004b00:	200002a0 	.word	0x200002a0
 8004b04:	200002a4 	.word	0x200002a4
 8004b08:	e000ed20 	.word	0xe000ed20
 8004b0c:	2000000c 	.word	0x2000000c
 8004b10:	e000ef34 	.word	0xe000ef34

08004b14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	607b      	str	r3, [r7, #4]
}
 8004b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <vPortEnterCritical+0x58>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3301      	adds	r3, #1
 8004b34:	4a0d      	ldr	r2, [pc, #52]	; (8004b6c <vPortEnterCritical+0x58>)
 8004b36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <vPortEnterCritical+0x58>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d10f      	bne.n	8004b60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <vPortEnterCritical+0x5c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	603b      	str	r3, [r7, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <vPortEnterCritical+0x4a>
	}
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	2000000c 	.word	0x2000000c
 8004b70:	e000ed04 	.word	0xe000ed04

08004b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <vPortExitCritical+0x50>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <vPortExitCritical+0x24>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	607b      	str	r3, [r7, #4]
}
 8004b94:	bf00      	nop
 8004b96:	e7fe      	b.n	8004b96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <vPortExitCritical+0x50>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	4a09      	ldr	r2, [pc, #36]	; (8004bc4 <vPortExitCritical+0x50>)
 8004ba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <vPortExitCritical+0x50>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d105      	bne.n	8004bb6 <vPortExitCritical+0x42>
 8004baa:	2300      	movs	r3, #0
 8004bac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	f383 8811 	msr	BASEPRI, r3
}
 8004bb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	2000000c 	.word	0x2000000c
	...

08004bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004bd0:	f3ef 8009 	mrs	r0, PSP
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <pxCurrentTCBConst>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	f01e 0f10 	tst.w	lr, #16
 8004be0:	bf08      	it	eq
 8004be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bea:	6010      	str	r0, [r2, #0]
 8004bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bf4:	f380 8811 	msr	BASEPRI, r0
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f7fe ffe8 	bl	8003bd4 <vTaskSwitchContext>
 8004c04:	f04f 0000 	mov.w	r0, #0
 8004c08:	f380 8811 	msr	BASEPRI, r0
 8004c0c:	bc09      	pop	{r0, r3}
 8004c0e:	6819      	ldr	r1, [r3, #0]
 8004c10:	6808      	ldr	r0, [r1, #0]
 8004c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c16:	f01e 0f10 	tst.w	lr, #16
 8004c1a:	bf08      	it	eq
 8004c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c20:	f380 8809 	msr	PSP, r0
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	f3af 8000 	nop.w

08004c30 <pxCurrentTCBConst>:
 8004c30:	20000098 	.word	0x20000098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop

08004c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	607b      	str	r3, [r7, #4]
}
 8004c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c52:	f7fe ff07 	bl	8003a64 <xTaskIncrementTick>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <SysTick_Handler+0x40>)
 8004c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	2300      	movs	r3, #0
 8004c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f383 8811 	msr	BASEPRI, r3
}
 8004c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	e000ed04 	.word	0xe000ed04

08004c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortSetupTimerInterrupt+0x34>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c86:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <vPortSetupTimerInterrupt+0x38>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <vPortSetupTimerInterrupt+0x3c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <vPortSetupTimerInterrupt+0x40>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	099b      	lsrs	r3, r3, #6
 8004c98:	4a09      	ldr	r2, [pc, #36]	; (8004cc0 <vPortSetupTimerInterrupt+0x44>)
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c9e:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <vPortSetupTimerInterrupt+0x34>)
 8004ca0:	2207      	movs	r2, #7
 8004ca2:	601a      	str	r2, [r3, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	e000e010 	.word	0xe000e010
 8004cb4:	e000e018 	.word	0xe000e018
 8004cb8:	20000000 	.word	0x20000000
 8004cbc:	10624dd3 	.word	0x10624dd3
 8004cc0:	e000e014 	.word	0xe000e014

08004cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004cd4 <vPortEnableVFP+0x10>
 8004cc8:	6801      	ldr	r1, [r0, #0]
 8004cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cce:	6001      	str	r1, [r0, #0]
 8004cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004cd2:	bf00      	nop
 8004cd4:	e000ed88 	.word	0xe000ed88

08004cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cde:	f3ef 8305 	mrs	r3, IPSR
 8004ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b0f      	cmp	r3, #15
 8004ce8:	d914      	bls.n	8004d14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <vPortValidateInterruptPriority+0x70>)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cf4:	4b15      	ldr	r3, [pc, #84]	; (8004d4c <vPortValidateInterruptPriority+0x74>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	7afa      	ldrb	r2, [r7, #11]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d20a      	bcs.n	8004d14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	607b      	str	r3, [r7, #4]
}
 8004d10:	bf00      	nop
 8004d12:	e7fe      	b.n	8004d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <vPortValidateInterruptPriority+0x78>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <vPortValidateInterruptPriority+0x7c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d90a      	bls.n	8004d3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	603b      	str	r3, [r7, #0]
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <vPortValidateInterruptPriority+0x60>
	}
 8004d3a:	bf00      	nop
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	e000e3f0 	.word	0xe000e3f0
 8004d4c:	200002a0 	.word	0x200002a0
 8004d50:	e000ed0c 	.word	0xe000ed0c
 8004d54:	200002a4 	.word	0x200002a4

08004d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	; 0x28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d64:	f7fe fc84 	bl	8003670 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d68:	4b58      	ldr	r3, [pc, #352]	; (8004ecc <pvPortMalloc+0x174>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d70:	f000 f910 	bl	8004f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d74:	4b56      	ldr	r3, [pc, #344]	; (8004ed0 <pvPortMalloc+0x178>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 808e 	bne.w	8004e9e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01d      	beq.n	8004dc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d88:	2208      	movs	r2, #8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d014      	beq.n	8004dc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f023 0307 	bic.w	r3, r3, #7
 8004da0:	3308      	adds	r3, #8
 8004da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <pvPortMalloc+0x6c>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	617b      	str	r3, [r7, #20]
}
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d069      	beq.n	8004e9e <pvPortMalloc+0x146>
 8004dca:	4b42      	ldr	r3, [pc, #264]	; (8004ed4 <pvPortMalloc+0x17c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d864      	bhi.n	8004e9e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004dd4:	4b40      	ldr	r3, [pc, #256]	; (8004ed8 <pvPortMalloc+0x180>)
 8004dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004dd8:	4b3f      	ldr	r3, [pc, #252]	; (8004ed8 <pvPortMalloc+0x180>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dde:	e004      	b.n	8004dea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d903      	bls.n	8004dfc <pvPortMalloc+0xa4>
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f1      	bne.n	8004de0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004dfc:	4b33      	ldr	r3, [pc, #204]	; (8004ecc <pvPortMalloc+0x174>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d04b      	beq.n	8004e9e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2208      	movs	r2, #8
 8004e0c:	4413      	add	r3, r2
 8004e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	1ad2      	subs	r2, r2, r3
 8004e20:	2308      	movs	r3, #8
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d91f      	bls.n	8004e68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <pvPortMalloc+0xf8>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	613b      	str	r3, [r7, #16]
}
 8004e4c:	bf00      	nop
 8004e4e:	e7fe      	b.n	8004e4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	1ad2      	subs	r2, r2, r3
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e62:	69b8      	ldr	r0, [r7, #24]
 8004e64:	f000 f8f8 	bl	8005058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e68:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <pvPortMalloc+0x17c>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <pvPortMalloc+0x17c>)
 8004e74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e76:	4b17      	ldr	r3, [pc, #92]	; (8004ed4 <pvPortMalloc+0x17c>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b18      	ldr	r3, [pc, #96]	; (8004edc <pvPortMalloc+0x184>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d203      	bcs.n	8004e8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e82:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <pvPortMalloc+0x17c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a15      	ldr	r2, [pc, #84]	; (8004edc <pvPortMalloc+0x184>)
 8004e88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <pvPortMalloc+0x178>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e9e:	f7fe fd35 	bl	800390c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <pvPortMalloc+0x16a>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	60fb      	str	r3, [r7, #12]
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <pvPortMalloc+0x168>
	return pvReturn;
 8004ec2:	69fb      	ldr	r3, [r7, #28]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3728      	adds	r7, #40	; 0x28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20012eb0 	.word	0x20012eb0
 8004ed0:	20012ebc 	.word	0x20012ebc
 8004ed4:	20012eb4 	.word	0x20012eb4
 8004ed8:	20012ea8 	.word	0x20012ea8
 8004edc:	20012eb8 	.word	0x20012eb8

08004ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d048      	beq.n	8004f84 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	425b      	negs	r3, r3
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	4413      	add	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	4b21      	ldr	r3, [pc, #132]	; (8004f8c <vPortFree+0xac>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <vPortFree+0x44>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	60fb      	str	r3, [r7, #12]
}
 8004f20:	bf00      	nop
 8004f22:	e7fe      	b.n	8004f22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <vPortFree+0x62>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	60bb      	str	r3, [r7, #8]
}
 8004f3e:	bf00      	nop
 8004f40:	e7fe      	b.n	8004f40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <vPortFree+0xac>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d019      	beq.n	8004f84 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d115      	bne.n	8004f84 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <vPortFree+0xac>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	43db      	mvns	r3, r3
 8004f62:	401a      	ands	r2, r3
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f68:	f7fe fb82 	bl	8003670 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <vPortFree+0xb0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4413      	add	r3, r2
 8004f76:	4a06      	ldr	r2, [pc, #24]	; (8004f90 <vPortFree+0xb0>)
 8004f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f7a:	6938      	ldr	r0, [r7, #16]
 8004f7c:	f000 f86c 	bl	8005058 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f80:	f7fe fcc4 	bl	800390c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f84:	bf00      	nop
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20012ebc 	.word	0x20012ebc
 8004f90:	20012eb4 	.word	0x20012eb4

08004f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f9a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fa0:	4b27      	ldr	r3, [pc, #156]	; (8005040 <prvHeapInit+0xac>)
 8004fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00c      	beq.n	8004fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3307      	adds	r3, #7
 8004fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0307 	bic.w	r3, r3, #7
 8004fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <prvHeapInit+0xac>)
 8004fc4:	4413      	add	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <prvHeapInit+0xb0>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fd2:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <prvHeapInit+0xb0>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	4413      	add	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fe0:	2208      	movs	r2, #8
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0307 	bic.w	r3, r3, #7
 8004fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a15      	ldr	r2, [pc, #84]	; (8005048 <prvHeapInit+0xb4>)
 8004ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <prvHeapInit+0xb4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ffe:	4b12      	ldr	r3, [pc, #72]	; (8005048 <prvHeapInit+0xb4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <prvHeapInit+0xb4>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	4a0a      	ldr	r2, [pc, #40]	; (800504c <prvHeapInit+0xb8>)
 8005022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4a09      	ldr	r2, [pc, #36]	; (8005050 <prvHeapInit+0xbc>)
 800502a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <prvHeapInit+0xc0>)
 800502e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005032:	601a      	str	r2, [r3, #0]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	200002a8 	.word	0x200002a8
 8005044:	20012ea8 	.word	0x20012ea8
 8005048:	20012eb0 	.word	0x20012eb0
 800504c:	20012eb8 	.word	0x20012eb8
 8005050:	20012eb4 	.word	0x20012eb4
 8005054:	20012ebc 	.word	0x20012ebc

08005058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005060:	4b28      	ldr	r3, [pc, #160]	; (8005104 <prvInsertBlockIntoFreeList+0xac>)
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	e002      	b.n	800506c <prvInsertBlockIntoFreeList+0x14>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	429a      	cmp	r2, r3
 8005074:	d8f7      	bhi.n	8005066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	4413      	add	r3, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	d108      	bne.n	800509a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	441a      	add	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	441a      	add	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d118      	bne.n	80050e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <prvInsertBlockIntoFreeList+0xb0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d00d      	beq.n	80050d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	e008      	b.n	80050e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050d6:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <prvInsertBlockIntoFreeList+0xb0>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	e003      	b.n	80050e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d002      	beq.n	80050f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050f6:	bf00      	nop
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20012ea8 	.word	0x20012ea8
 8005108:	20012eb0 	.word	0x20012eb0

0800510c <__errno>:
 800510c:	4b01      	ldr	r3, [pc, #4]	; (8005114 <__errno+0x8>)
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20000010 	.word	0x20000010

08005118 <__libc_init_array>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	4d0d      	ldr	r5, [pc, #52]	; (8005150 <__libc_init_array+0x38>)
 800511c:	4c0d      	ldr	r4, [pc, #52]	; (8005154 <__libc_init_array+0x3c>)
 800511e:	1b64      	subs	r4, r4, r5
 8005120:	10a4      	asrs	r4, r4, #2
 8005122:	2600      	movs	r6, #0
 8005124:	42a6      	cmp	r6, r4
 8005126:	d109      	bne.n	800513c <__libc_init_array+0x24>
 8005128:	4d0b      	ldr	r5, [pc, #44]	; (8005158 <__libc_init_array+0x40>)
 800512a:	4c0c      	ldr	r4, [pc, #48]	; (800515c <__libc_init_array+0x44>)
 800512c:	f000 fc4e 	bl	80059cc <_init>
 8005130:	1b64      	subs	r4, r4, r5
 8005132:	10a4      	asrs	r4, r4, #2
 8005134:	2600      	movs	r6, #0
 8005136:	42a6      	cmp	r6, r4
 8005138:	d105      	bne.n	8005146 <__libc_init_array+0x2e>
 800513a:	bd70      	pop	{r4, r5, r6, pc}
 800513c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005140:	4798      	blx	r3
 8005142:	3601      	adds	r6, #1
 8005144:	e7ee      	b.n	8005124 <__libc_init_array+0xc>
 8005146:	f855 3b04 	ldr.w	r3, [r5], #4
 800514a:	4798      	blx	r3
 800514c:	3601      	adds	r6, #1
 800514e:	e7f2      	b.n	8005136 <__libc_init_array+0x1e>
 8005150:	08005b40 	.word	0x08005b40
 8005154:	08005b40 	.word	0x08005b40
 8005158:	08005b40 	.word	0x08005b40
 800515c:	08005b44 	.word	0x08005b44

08005160 <memcpy>:
 8005160:	440a      	add	r2, r1
 8005162:	4291      	cmp	r1, r2
 8005164:	f100 33ff 	add.w	r3, r0, #4294967295
 8005168:	d100      	bne.n	800516c <memcpy+0xc>
 800516a:	4770      	bx	lr
 800516c:	b510      	push	{r4, lr}
 800516e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005176:	4291      	cmp	r1, r2
 8005178:	d1f9      	bne.n	800516e <memcpy+0xe>
 800517a:	bd10      	pop	{r4, pc}

0800517c <memset>:
 800517c:	4402      	add	r2, r0
 800517e:	4603      	mov	r3, r0
 8005180:	4293      	cmp	r3, r2
 8005182:	d100      	bne.n	8005186 <memset+0xa>
 8005184:	4770      	bx	lr
 8005186:	f803 1b01 	strb.w	r1, [r3], #1
 800518a:	e7f9      	b.n	8005180 <memset+0x4>

0800518c <siprintf>:
 800518c:	b40e      	push	{r1, r2, r3}
 800518e:	b500      	push	{lr}
 8005190:	b09c      	sub	sp, #112	; 0x70
 8005192:	ab1d      	add	r3, sp, #116	; 0x74
 8005194:	9002      	str	r0, [sp, #8]
 8005196:	9006      	str	r0, [sp, #24]
 8005198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800519c:	4809      	ldr	r0, [pc, #36]	; (80051c4 <siprintf+0x38>)
 800519e:	9107      	str	r1, [sp, #28]
 80051a0:	9104      	str	r1, [sp, #16]
 80051a2:	4909      	ldr	r1, [pc, #36]	; (80051c8 <siprintf+0x3c>)
 80051a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051a8:	9105      	str	r1, [sp, #20]
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	a902      	add	r1, sp, #8
 80051b0:	f000 f868 	bl	8005284 <_svfiprintf_r>
 80051b4:	9b02      	ldr	r3, [sp, #8]
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	b01c      	add	sp, #112	; 0x70
 80051bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051c0:	b003      	add	sp, #12
 80051c2:	4770      	bx	lr
 80051c4:	20000010 	.word	0x20000010
 80051c8:	ffff0208 	.word	0xffff0208

080051cc <__ssputs_r>:
 80051cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d0:	688e      	ldr	r6, [r1, #8]
 80051d2:	429e      	cmp	r6, r3
 80051d4:	4682      	mov	sl, r0
 80051d6:	460c      	mov	r4, r1
 80051d8:	4690      	mov	r8, r2
 80051da:	461f      	mov	r7, r3
 80051dc:	d838      	bhi.n	8005250 <__ssputs_r+0x84>
 80051de:	898a      	ldrh	r2, [r1, #12]
 80051e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051e4:	d032      	beq.n	800524c <__ssputs_r+0x80>
 80051e6:	6825      	ldr	r5, [r4, #0]
 80051e8:	6909      	ldr	r1, [r1, #16]
 80051ea:	eba5 0901 	sub.w	r9, r5, r1
 80051ee:	6965      	ldr	r5, [r4, #20]
 80051f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051f8:	3301      	adds	r3, #1
 80051fa:	444b      	add	r3, r9
 80051fc:	106d      	asrs	r5, r5, #1
 80051fe:	429d      	cmp	r5, r3
 8005200:	bf38      	it	cc
 8005202:	461d      	movcc	r5, r3
 8005204:	0553      	lsls	r3, r2, #21
 8005206:	d531      	bpl.n	800526c <__ssputs_r+0xa0>
 8005208:	4629      	mov	r1, r5
 800520a:	f000 fb39 	bl	8005880 <_malloc_r>
 800520e:	4606      	mov	r6, r0
 8005210:	b950      	cbnz	r0, 8005228 <__ssputs_r+0x5c>
 8005212:	230c      	movs	r3, #12
 8005214:	f8ca 3000 	str.w	r3, [sl]
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800521e:	81a3      	strh	r3, [r4, #12]
 8005220:	f04f 30ff 	mov.w	r0, #4294967295
 8005224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005228:	6921      	ldr	r1, [r4, #16]
 800522a:	464a      	mov	r2, r9
 800522c:	f7ff ff98 	bl	8005160 <memcpy>
 8005230:	89a3      	ldrh	r3, [r4, #12]
 8005232:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523a:	81a3      	strh	r3, [r4, #12]
 800523c:	6126      	str	r6, [r4, #16]
 800523e:	6165      	str	r5, [r4, #20]
 8005240:	444e      	add	r6, r9
 8005242:	eba5 0509 	sub.w	r5, r5, r9
 8005246:	6026      	str	r6, [r4, #0]
 8005248:	60a5      	str	r5, [r4, #8]
 800524a:	463e      	mov	r6, r7
 800524c:	42be      	cmp	r6, r7
 800524e:	d900      	bls.n	8005252 <__ssputs_r+0x86>
 8005250:	463e      	mov	r6, r7
 8005252:	4632      	mov	r2, r6
 8005254:	6820      	ldr	r0, [r4, #0]
 8005256:	4641      	mov	r1, r8
 8005258:	f000 faa8 	bl	80057ac <memmove>
 800525c:	68a3      	ldr	r3, [r4, #8]
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	1b9b      	subs	r3, r3, r6
 8005262:	4432      	add	r2, r6
 8005264:	60a3      	str	r3, [r4, #8]
 8005266:	6022      	str	r2, [r4, #0]
 8005268:	2000      	movs	r0, #0
 800526a:	e7db      	b.n	8005224 <__ssputs_r+0x58>
 800526c:	462a      	mov	r2, r5
 800526e:	f000 fb61 	bl	8005934 <_realloc_r>
 8005272:	4606      	mov	r6, r0
 8005274:	2800      	cmp	r0, #0
 8005276:	d1e1      	bne.n	800523c <__ssputs_r+0x70>
 8005278:	6921      	ldr	r1, [r4, #16]
 800527a:	4650      	mov	r0, sl
 800527c:	f000 fab0 	bl	80057e0 <_free_r>
 8005280:	e7c7      	b.n	8005212 <__ssputs_r+0x46>
	...

08005284 <_svfiprintf_r>:
 8005284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005288:	4698      	mov	r8, r3
 800528a:	898b      	ldrh	r3, [r1, #12]
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	b09d      	sub	sp, #116	; 0x74
 8005290:	4607      	mov	r7, r0
 8005292:	460d      	mov	r5, r1
 8005294:	4614      	mov	r4, r2
 8005296:	d50e      	bpl.n	80052b6 <_svfiprintf_r+0x32>
 8005298:	690b      	ldr	r3, [r1, #16]
 800529a:	b963      	cbnz	r3, 80052b6 <_svfiprintf_r+0x32>
 800529c:	2140      	movs	r1, #64	; 0x40
 800529e:	f000 faef 	bl	8005880 <_malloc_r>
 80052a2:	6028      	str	r0, [r5, #0]
 80052a4:	6128      	str	r0, [r5, #16]
 80052a6:	b920      	cbnz	r0, 80052b2 <_svfiprintf_r+0x2e>
 80052a8:	230c      	movs	r3, #12
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	f04f 30ff 	mov.w	r0, #4294967295
 80052b0:	e0d1      	b.n	8005456 <_svfiprintf_r+0x1d2>
 80052b2:	2340      	movs	r3, #64	; 0x40
 80052b4:	616b      	str	r3, [r5, #20]
 80052b6:	2300      	movs	r3, #0
 80052b8:	9309      	str	r3, [sp, #36]	; 0x24
 80052ba:	2320      	movs	r3, #32
 80052bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80052c4:	2330      	movs	r3, #48	; 0x30
 80052c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005470 <_svfiprintf_r+0x1ec>
 80052ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052ce:	f04f 0901 	mov.w	r9, #1
 80052d2:	4623      	mov	r3, r4
 80052d4:	469a      	mov	sl, r3
 80052d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052da:	b10a      	cbz	r2, 80052e0 <_svfiprintf_r+0x5c>
 80052dc:	2a25      	cmp	r2, #37	; 0x25
 80052de:	d1f9      	bne.n	80052d4 <_svfiprintf_r+0x50>
 80052e0:	ebba 0b04 	subs.w	fp, sl, r4
 80052e4:	d00b      	beq.n	80052fe <_svfiprintf_r+0x7a>
 80052e6:	465b      	mov	r3, fp
 80052e8:	4622      	mov	r2, r4
 80052ea:	4629      	mov	r1, r5
 80052ec:	4638      	mov	r0, r7
 80052ee:	f7ff ff6d 	bl	80051cc <__ssputs_r>
 80052f2:	3001      	adds	r0, #1
 80052f4:	f000 80aa 	beq.w	800544c <_svfiprintf_r+0x1c8>
 80052f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052fa:	445a      	add	r2, fp
 80052fc:	9209      	str	r2, [sp, #36]	; 0x24
 80052fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 80a2 	beq.w	800544c <_svfiprintf_r+0x1c8>
 8005308:	2300      	movs	r3, #0
 800530a:	f04f 32ff 	mov.w	r2, #4294967295
 800530e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005312:	f10a 0a01 	add.w	sl, sl, #1
 8005316:	9304      	str	r3, [sp, #16]
 8005318:	9307      	str	r3, [sp, #28]
 800531a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800531e:	931a      	str	r3, [sp, #104]	; 0x68
 8005320:	4654      	mov	r4, sl
 8005322:	2205      	movs	r2, #5
 8005324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005328:	4851      	ldr	r0, [pc, #324]	; (8005470 <_svfiprintf_r+0x1ec>)
 800532a:	f7fa ff59 	bl	80001e0 <memchr>
 800532e:	9a04      	ldr	r2, [sp, #16]
 8005330:	b9d8      	cbnz	r0, 800536a <_svfiprintf_r+0xe6>
 8005332:	06d0      	lsls	r0, r2, #27
 8005334:	bf44      	itt	mi
 8005336:	2320      	movmi	r3, #32
 8005338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800533c:	0711      	lsls	r1, r2, #28
 800533e:	bf44      	itt	mi
 8005340:	232b      	movmi	r3, #43	; 0x2b
 8005342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005346:	f89a 3000 	ldrb.w	r3, [sl]
 800534a:	2b2a      	cmp	r3, #42	; 0x2a
 800534c:	d015      	beq.n	800537a <_svfiprintf_r+0xf6>
 800534e:	9a07      	ldr	r2, [sp, #28]
 8005350:	4654      	mov	r4, sl
 8005352:	2000      	movs	r0, #0
 8005354:	f04f 0c0a 	mov.w	ip, #10
 8005358:	4621      	mov	r1, r4
 800535a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800535e:	3b30      	subs	r3, #48	; 0x30
 8005360:	2b09      	cmp	r3, #9
 8005362:	d94e      	bls.n	8005402 <_svfiprintf_r+0x17e>
 8005364:	b1b0      	cbz	r0, 8005394 <_svfiprintf_r+0x110>
 8005366:	9207      	str	r2, [sp, #28]
 8005368:	e014      	b.n	8005394 <_svfiprintf_r+0x110>
 800536a:	eba0 0308 	sub.w	r3, r0, r8
 800536e:	fa09 f303 	lsl.w	r3, r9, r3
 8005372:	4313      	orrs	r3, r2
 8005374:	9304      	str	r3, [sp, #16]
 8005376:	46a2      	mov	sl, r4
 8005378:	e7d2      	b.n	8005320 <_svfiprintf_r+0x9c>
 800537a:	9b03      	ldr	r3, [sp, #12]
 800537c:	1d19      	adds	r1, r3, #4
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	9103      	str	r1, [sp, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	bfbb      	ittet	lt
 8005386:	425b      	neglt	r3, r3
 8005388:	f042 0202 	orrlt.w	r2, r2, #2
 800538c:	9307      	strge	r3, [sp, #28]
 800538e:	9307      	strlt	r3, [sp, #28]
 8005390:	bfb8      	it	lt
 8005392:	9204      	strlt	r2, [sp, #16]
 8005394:	7823      	ldrb	r3, [r4, #0]
 8005396:	2b2e      	cmp	r3, #46	; 0x2e
 8005398:	d10c      	bne.n	80053b4 <_svfiprintf_r+0x130>
 800539a:	7863      	ldrb	r3, [r4, #1]
 800539c:	2b2a      	cmp	r3, #42	; 0x2a
 800539e:	d135      	bne.n	800540c <_svfiprintf_r+0x188>
 80053a0:	9b03      	ldr	r3, [sp, #12]
 80053a2:	1d1a      	adds	r2, r3, #4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	9203      	str	r2, [sp, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	bfb8      	it	lt
 80053ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80053b0:	3402      	adds	r4, #2
 80053b2:	9305      	str	r3, [sp, #20]
 80053b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005480 <_svfiprintf_r+0x1fc>
 80053b8:	7821      	ldrb	r1, [r4, #0]
 80053ba:	2203      	movs	r2, #3
 80053bc:	4650      	mov	r0, sl
 80053be:	f7fa ff0f 	bl	80001e0 <memchr>
 80053c2:	b140      	cbz	r0, 80053d6 <_svfiprintf_r+0x152>
 80053c4:	2340      	movs	r3, #64	; 0x40
 80053c6:	eba0 000a 	sub.w	r0, r0, sl
 80053ca:	fa03 f000 	lsl.w	r0, r3, r0
 80053ce:	9b04      	ldr	r3, [sp, #16]
 80053d0:	4303      	orrs	r3, r0
 80053d2:	3401      	adds	r4, #1
 80053d4:	9304      	str	r3, [sp, #16]
 80053d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053da:	4826      	ldr	r0, [pc, #152]	; (8005474 <_svfiprintf_r+0x1f0>)
 80053dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053e0:	2206      	movs	r2, #6
 80053e2:	f7fa fefd 	bl	80001e0 <memchr>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d038      	beq.n	800545c <_svfiprintf_r+0x1d8>
 80053ea:	4b23      	ldr	r3, [pc, #140]	; (8005478 <_svfiprintf_r+0x1f4>)
 80053ec:	bb1b      	cbnz	r3, 8005436 <_svfiprintf_r+0x1b2>
 80053ee:	9b03      	ldr	r3, [sp, #12]
 80053f0:	3307      	adds	r3, #7
 80053f2:	f023 0307 	bic.w	r3, r3, #7
 80053f6:	3308      	adds	r3, #8
 80053f8:	9303      	str	r3, [sp, #12]
 80053fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053fc:	4433      	add	r3, r6
 80053fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005400:	e767      	b.n	80052d2 <_svfiprintf_r+0x4e>
 8005402:	fb0c 3202 	mla	r2, ip, r2, r3
 8005406:	460c      	mov	r4, r1
 8005408:	2001      	movs	r0, #1
 800540a:	e7a5      	b.n	8005358 <_svfiprintf_r+0xd4>
 800540c:	2300      	movs	r3, #0
 800540e:	3401      	adds	r4, #1
 8005410:	9305      	str	r3, [sp, #20]
 8005412:	4619      	mov	r1, r3
 8005414:	f04f 0c0a 	mov.w	ip, #10
 8005418:	4620      	mov	r0, r4
 800541a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800541e:	3a30      	subs	r2, #48	; 0x30
 8005420:	2a09      	cmp	r2, #9
 8005422:	d903      	bls.n	800542c <_svfiprintf_r+0x1a8>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0c5      	beq.n	80053b4 <_svfiprintf_r+0x130>
 8005428:	9105      	str	r1, [sp, #20]
 800542a:	e7c3      	b.n	80053b4 <_svfiprintf_r+0x130>
 800542c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005430:	4604      	mov	r4, r0
 8005432:	2301      	movs	r3, #1
 8005434:	e7f0      	b.n	8005418 <_svfiprintf_r+0x194>
 8005436:	ab03      	add	r3, sp, #12
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	462a      	mov	r2, r5
 800543c:	4b0f      	ldr	r3, [pc, #60]	; (800547c <_svfiprintf_r+0x1f8>)
 800543e:	a904      	add	r1, sp, #16
 8005440:	4638      	mov	r0, r7
 8005442:	f3af 8000 	nop.w
 8005446:	1c42      	adds	r2, r0, #1
 8005448:	4606      	mov	r6, r0
 800544a:	d1d6      	bne.n	80053fa <_svfiprintf_r+0x176>
 800544c:	89ab      	ldrh	r3, [r5, #12]
 800544e:	065b      	lsls	r3, r3, #25
 8005450:	f53f af2c 	bmi.w	80052ac <_svfiprintf_r+0x28>
 8005454:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005456:	b01d      	add	sp, #116	; 0x74
 8005458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545c:	ab03      	add	r3, sp, #12
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	462a      	mov	r2, r5
 8005462:	4b06      	ldr	r3, [pc, #24]	; (800547c <_svfiprintf_r+0x1f8>)
 8005464:	a904      	add	r1, sp, #16
 8005466:	4638      	mov	r0, r7
 8005468:	f000 f87a 	bl	8005560 <_printf_i>
 800546c:	e7eb      	b.n	8005446 <_svfiprintf_r+0x1c2>
 800546e:	bf00      	nop
 8005470:	08005b04 	.word	0x08005b04
 8005474:	08005b0e 	.word	0x08005b0e
 8005478:	00000000 	.word	0x00000000
 800547c:	080051cd 	.word	0x080051cd
 8005480:	08005b0a 	.word	0x08005b0a

08005484 <_printf_common>:
 8005484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	4616      	mov	r6, r2
 800548a:	4699      	mov	r9, r3
 800548c:	688a      	ldr	r2, [r1, #8]
 800548e:	690b      	ldr	r3, [r1, #16]
 8005490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005494:	4293      	cmp	r3, r2
 8005496:	bfb8      	it	lt
 8005498:	4613      	movlt	r3, r2
 800549a:	6033      	str	r3, [r6, #0]
 800549c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054a0:	4607      	mov	r7, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	b10a      	cbz	r2, 80054aa <_printf_common+0x26>
 80054a6:	3301      	adds	r3, #1
 80054a8:	6033      	str	r3, [r6, #0]
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	0699      	lsls	r1, r3, #26
 80054ae:	bf42      	ittt	mi
 80054b0:	6833      	ldrmi	r3, [r6, #0]
 80054b2:	3302      	addmi	r3, #2
 80054b4:	6033      	strmi	r3, [r6, #0]
 80054b6:	6825      	ldr	r5, [r4, #0]
 80054b8:	f015 0506 	ands.w	r5, r5, #6
 80054bc:	d106      	bne.n	80054cc <_printf_common+0x48>
 80054be:	f104 0a19 	add.w	sl, r4, #25
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	6832      	ldr	r2, [r6, #0]
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	dc26      	bgt.n	800551a <_printf_common+0x96>
 80054cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054d0:	1e13      	subs	r3, r2, #0
 80054d2:	6822      	ldr	r2, [r4, #0]
 80054d4:	bf18      	it	ne
 80054d6:	2301      	movne	r3, #1
 80054d8:	0692      	lsls	r2, r2, #26
 80054da:	d42b      	bmi.n	8005534 <_printf_common+0xb0>
 80054dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054e0:	4649      	mov	r1, r9
 80054e2:	4638      	mov	r0, r7
 80054e4:	47c0      	blx	r8
 80054e6:	3001      	adds	r0, #1
 80054e8:	d01e      	beq.n	8005528 <_printf_common+0xa4>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	68e5      	ldr	r5, [r4, #12]
 80054ee:	6832      	ldr	r2, [r6, #0]
 80054f0:	f003 0306 	and.w	r3, r3, #6
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	bf08      	it	eq
 80054f8:	1aad      	subeq	r5, r5, r2
 80054fa:	68a3      	ldr	r3, [r4, #8]
 80054fc:	6922      	ldr	r2, [r4, #16]
 80054fe:	bf0c      	ite	eq
 8005500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005504:	2500      	movne	r5, #0
 8005506:	4293      	cmp	r3, r2
 8005508:	bfc4      	itt	gt
 800550a:	1a9b      	subgt	r3, r3, r2
 800550c:	18ed      	addgt	r5, r5, r3
 800550e:	2600      	movs	r6, #0
 8005510:	341a      	adds	r4, #26
 8005512:	42b5      	cmp	r5, r6
 8005514:	d11a      	bne.n	800554c <_printf_common+0xc8>
 8005516:	2000      	movs	r0, #0
 8005518:	e008      	b.n	800552c <_printf_common+0xa8>
 800551a:	2301      	movs	r3, #1
 800551c:	4652      	mov	r2, sl
 800551e:	4649      	mov	r1, r9
 8005520:	4638      	mov	r0, r7
 8005522:	47c0      	blx	r8
 8005524:	3001      	adds	r0, #1
 8005526:	d103      	bne.n	8005530 <_printf_common+0xac>
 8005528:	f04f 30ff 	mov.w	r0, #4294967295
 800552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005530:	3501      	adds	r5, #1
 8005532:	e7c6      	b.n	80054c2 <_printf_common+0x3e>
 8005534:	18e1      	adds	r1, r4, r3
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	2030      	movs	r0, #48	; 0x30
 800553a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800553e:	4422      	add	r2, r4
 8005540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005548:	3302      	adds	r3, #2
 800554a:	e7c7      	b.n	80054dc <_printf_common+0x58>
 800554c:	2301      	movs	r3, #1
 800554e:	4622      	mov	r2, r4
 8005550:	4649      	mov	r1, r9
 8005552:	4638      	mov	r0, r7
 8005554:	47c0      	blx	r8
 8005556:	3001      	adds	r0, #1
 8005558:	d0e6      	beq.n	8005528 <_printf_common+0xa4>
 800555a:	3601      	adds	r6, #1
 800555c:	e7d9      	b.n	8005512 <_printf_common+0x8e>
	...

08005560 <_printf_i>:
 8005560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005564:	460c      	mov	r4, r1
 8005566:	4691      	mov	r9, r2
 8005568:	7e27      	ldrb	r7, [r4, #24]
 800556a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800556c:	2f78      	cmp	r7, #120	; 0x78
 800556e:	4680      	mov	r8, r0
 8005570:	469a      	mov	sl, r3
 8005572:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005576:	d807      	bhi.n	8005588 <_printf_i+0x28>
 8005578:	2f62      	cmp	r7, #98	; 0x62
 800557a:	d80a      	bhi.n	8005592 <_printf_i+0x32>
 800557c:	2f00      	cmp	r7, #0
 800557e:	f000 80d8 	beq.w	8005732 <_printf_i+0x1d2>
 8005582:	2f58      	cmp	r7, #88	; 0x58
 8005584:	f000 80a3 	beq.w	80056ce <_printf_i+0x16e>
 8005588:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800558c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005590:	e03a      	b.n	8005608 <_printf_i+0xa8>
 8005592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005596:	2b15      	cmp	r3, #21
 8005598:	d8f6      	bhi.n	8005588 <_printf_i+0x28>
 800559a:	a001      	add	r0, pc, #4	; (adr r0, 80055a0 <_printf_i+0x40>)
 800559c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80055a0:	080055f9 	.word	0x080055f9
 80055a4:	0800560d 	.word	0x0800560d
 80055a8:	08005589 	.word	0x08005589
 80055ac:	08005589 	.word	0x08005589
 80055b0:	08005589 	.word	0x08005589
 80055b4:	08005589 	.word	0x08005589
 80055b8:	0800560d 	.word	0x0800560d
 80055bc:	08005589 	.word	0x08005589
 80055c0:	08005589 	.word	0x08005589
 80055c4:	08005589 	.word	0x08005589
 80055c8:	08005589 	.word	0x08005589
 80055cc:	08005719 	.word	0x08005719
 80055d0:	0800563d 	.word	0x0800563d
 80055d4:	080056fb 	.word	0x080056fb
 80055d8:	08005589 	.word	0x08005589
 80055dc:	08005589 	.word	0x08005589
 80055e0:	0800573b 	.word	0x0800573b
 80055e4:	08005589 	.word	0x08005589
 80055e8:	0800563d 	.word	0x0800563d
 80055ec:	08005589 	.word	0x08005589
 80055f0:	08005589 	.word	0x08005589
 80055f4:	08005703 	.word	0x08005703
 80055f8:	680b      	ldr	r3, [r1, #0]
 80055fa:	1d1a      	adds	r2, r3, #4
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	600a      	str	r2, [r1, #0]
 8005600:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005608:	2301      	movs	r3, #1
 800560a:	e0a3      	b.n	8005754 <_printf_i+0x1f4>
 800560c:	6825      	ldr	r5, [r4, #0]
 800560e:	6808      	ldr	r0, [r1, #0]
 8005610:	062e      	lsls	r6, r5, #24
 8005612:	f100 0304 	add.w	r3, r0, #4
 8005616:	d50a      	bpl.n	800562e <_printf_i+0xce>
 8005618:	6805      	ldr	r5, [r0, #0]
 800561a:	600b      	str	r3, [r1, #0]
 800561c:	2d00      	cmp	r5, #0
 800561e:	da03      	bge.n	8005628 <_printf_i+0xc8>
 8005620:	232d      	movs	r3, #45	; 0x2d
 8005622:	426d      	negs	r5, r5
 8005624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005628:	485e      	ldr	r0, [pc, #376]	; (80057a4 <_printf_i+0x244>)
 800562a:	230a      	movs	r3, #10
 800562c:	e019      	b.n	8005662 <_printf_i+0x102>
 800562e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005632:	6805      	ldr	r5, [r0, #0]
 8005634:	600b      	str	r3, [r1, #0]
 8005636:	bf18      	it	ne
 8005638:	b22d      	sxthne	r5, r5
 800563a:	e7ef      	b.n	800561c <_printf_i+0xbc>
 800563c:	680b      	ldr	r3, [r1, #0]
 800563e:	6825      	ldr	r5, [r4, #0]
 8005640:	1d18      	adds	r0, r3, #4
 8005642:	6008      	str	r0, [r1, #0]
 8005644:	0628      	lsls	r0, r5, #24
 8005646:	d501      	bpl.n	800564c <_printf_i+0xec>
 8005648:	681d      	ldr	r5, [r3, #0]
 800564a:	e002      	b.n	8005652 <_printf_i+0xf2>
 800564c:	0669      	lsls	r1, r5, #25
 800564e:	d5fb      	bpl.n	8005648 <_printf_i+0xe8>
 8005650:	881d      	ldrh	r5, [r3, #0]
 8005652:	4854      	ldr	r0, [pc, #336]	; (80057a4 <_printf_i+0x244>)
 8005654:	2f6f      	cmp	r7, #111	; 0x6f
 8005656:	bf0c      	ite	eq
 8005658:	2308      	moveq	r3, #8
 800565a:	230a      	movne	r3, #10
 800565c:	2100      	movs	r1, #0
 800565e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005662:	6866      	ldr	r6, [r4, #4]
 8005664:	60a6      	str	r6, [r4, #8]
 8005666:	2e00      	cmp	r6, #0
 8005668:	bfa2      	ittt	ge
 800566a:	6821      	ldrge	r1, [r4, #0]
 800566c:	f021 0104 	bicge.w	r1, r1, #4
 8005670:	6021      	strge	r1, [r4, #0]
 8005672:	b90d      	cbnz	r5, 8005678 <_printf_i+0x118>
 8005674:	2e00      	cmp	r6, #0
 8005676:	d04d      	beq.n	8005714 <_printf_i+0x1b4>
 8005678:	4616      	mov	r6, r2
 800567a:	fbb5 f1f3 	udiv	r1, r5, r3
 800567e:	fb03 5711 	mls	r7, r3, r1, r5
 8005682:	5dc7      	ldrb	r7, [r0, r7]
 8005684:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005688:	462f      	mov	r7, r5
 800568a:	42bb      	cmp	r3, r7
 800568c:	460d      	mov	r5, r1
 800568e:	d9f4      	bls.n	800567a <_printf_i+0x11a>
 8005690:	2b08      	cmp	r3, #8
 8005692:	d10b      	bne.n	80056ac <_printf_i+0x14c>
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	07df      	lsls	r7, r3, #31
 8005698:	d508      	bpl.n	80056ac <_printf_i+0x14c>
 800569a:	6923      	ldr	r3, [r4, #16]
 800569c:	6861      	ldr	r1, [r4, #4]
 800569e:	4299      	cmp	r1, r3
 80056a0:	bfde      	ittt	le
 80056a2:	2330      	movle	r3, #48	; 0x30
 80056a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056ac:	1b92      	subs	r2, r2, r6
 80056ae:	6122      	str	r2, [r4, #16]
 80056b0:	f8cd a000 	str.w	sl, [sp]
 80056b4:	464b      	mov	r3, r9
 80056b6:	aa03      	add	r2, sp, #12
 80056b8:	4621      	mov	r1, r4
 80056ba:	4640      	mov	r0, r8
 80056bc:	f7ff fee2 	bl	8005484 <_printf_common>
 80056c0:	3001      	adds	r0, #1
 80056c2:	d14c      	bne.n	800575e <_printf_i+0x1fe>
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	b004      	add	sp, #16
 80056ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ce:	4835      	ldr	r0, [pc, #212]	; (80057a4 <_printf_i+0x244>)
 80056d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	680e      	ldr	r6, [r1, #0]
 80056d8:	061f      	lsls	r7, r3, #24
 80056da:	f856 5b04 	ldr.w	r5, [r6], #4
 80056de:	600e      	str	r6, [r1, #0]
 80056e0:	d514      	bpl.n	800570c <_printf_i+0x1ac>
 80056e2:	07d9      	lsls	r1, r3, #31
 80056e4:	bf44      	itt	mi
 80056e6:	f043 0320 	orrmi.w	r3, r3, #32
 80056ea:	6023      	strmi	r3, [r4, #0]
 80056ec:	b91d      	cbnz	r5, 80056f6 <_printf_i+0x196>
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	f023 0320 	bic.w	r3, r3, #32
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	2310      	movs	r3, #16
 80056f8:	e7b0      	b.n	800565c <_printf_i+0xfc>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	f043 0320 	orr.w	r3, r3, #32
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	2378      	movs	r3, #120	; 0x78
 8005704:	4828      	ldr	r0, [pc, #160]	; (80057a8 <_printf_i+0x248>)
 8005706:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800570a:	e7e3      	b.n	80056d4 <_printf_i+0x174>
 800570c:	065e      	lsls	r6, r3, #25
 800570e:	bf48      	it	mi
 8005710:	b2ad      	uxthmi	r5, r5
 8005712:	e7e6      	b.n	80056e2 <_printf_i+0x182>
 8005714:	4616      	mov	r6, r2
 8005716:	e7bb      	b.n	8005690 <_printf_i+0x130>
 8005718:	680b      	ldr	r3, [r1, #0]
 800571a:	6826      	ldr	r6, [r4, #0]
 800571c:	6960      	ldr	r0, [r4, #20]
 800571e:	1d1d      	adds	r5, r3, #4
 8005720:	600d      	str	r5, [r1, #0]
 8005722:	0635      	lsls	r5, r6, #24
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	d501      	bpl.n	800572c <_printf_i+0x1cc>
 8005728:	6018      	str	r0, [r3, #0]
 800572a:	e002      	b.n	8005732 <_printf_i+0x1d2>
 800572c:	0671      	lsls	r1, r6, #25
 800572e:	d5fb      	bpl.n	8005728 <_printf_i+0x1c8>
 8005730:	8018      	strh	r0, [r3, #0]
 8005732:	2300      	movs	r3, #0
 8005734:	6123      	str	r3, [r4, #16]
 8005736:	4616      	mov	r6, r2
 8005738:	e7ba      	b.n	80056b0 <_printf_i+0x150>
 800573a:	680b      	ldr	r3, [r1, #0]
 800573c:	1d1a      	adds	r2, r3, #4
 800573e:	600a      	str	r2, [r1, #0]
 8005740:	681e      	ldr	r6, [r3, #0]
 8005742:	6862      	ldr	r2, [r4, #4]
 8005744:	2100      	movs	r1, #0
 8005746:	4630      	mov	r0, r6
 8005748:	f7fa fd4a 	bl	80001e0 <memchr>
 800574c:	b108      	cbz	r0, 8005752 <_printf_i+0x1f2>
 800574e:	1b80      	subs	r0, r0, r6
 8005750:	6060      	str	r0, [r4, #4]
 8005752:	6863      	ldr	r3, [r4, #4]
 8005754:	6123      	str	r3, [r4, #16]
 8005756:	2300      	movs	r3, #0
 8005758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800575c:	e7a8      	b.n	80056b0 <_printf_i+0x150>
 800575e:	6923      	ldr	r3, [r4, #16]
 8005760:	4632      	mov	r2, r6
 8005762:	4649      	mov	r1, r9
 8005764:	4640      	mov	r0, r8
 8005766:	47d0      	blx	sl
 8005768:	3001      	adds	r0, #1
 800576a:	d0ab      	beq.n	80056c4 <_printf_i+0x164>
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	079b      	lsls	r3, r3, #30
 8005770:	d413      	bmi.n	800579a <_printf_i+0x23a>
 8005772:	68e0      	ldr	r0, [r4, #12]
 8005774:	9b03      	ldr	r3, [sp, #12]
 8005776:	4298      	cmp	r0, r3
 8005778:	bfb8      	it	lt
 800577a:	4618      	movlt	r0, r3
 800577c:	e7a4      	b.n	80056c8 <_printf_i+0x168>
 800577e:	2301      	movs	r3, #1
 8005780:	4632      	mov	r2, r6
 8005782:	4649      	mov	r1, r9
 8005784:	4640      	mov	r0, r8
 8005786:	47d0      	blx	sl
 8005788:	3001      	adds	r0, #1
 800578a:	d09b      	beq.n	80056c4 <_printf_i+0x164>
 800578c:	3501      	adds	r5, #1
 800578e:	68e3      	ldr	r3, [r4, #12]
 8005790:	9903      	ldr	r1, [sp, #12]
 8005792:	1a5b      	subs	r3, r3, r1
 8005794:	42ab      	cmp	r3, r5
 8005796:	dcf2      	bgt.n	800577e <_printf_i+0x21e>
 8005798:	e7eb      	b.n	8005772 <_printf_i+0x212>
 800579a:	2500      	movs	r5, #0
 800579c:	f104 0619 	add.w	r6, r4, #25
 80057a0:	e7f5      	b.n	800578e <_printf_i+0x22e>
 80057a2:	bf00      	nop
 80057a4:	08005b15 	.word	0x08005b15
 80057a8:	08005b26 	.word	0x08005b26

080057ac <memmove>:
 80057ac:	4288      	cmp	r0, r1
 80057ae:	b510      	push	{r4, lr}
 80057b0:	eb01 0402 	add.w	r4, r1, r2
 80057b4:	d902      	bls.n	80057bc <memmove+0x10>
 80057b6:	4284      	cmp	r4, r0
 80057b8:	4623      	mov	r3, r4
 80057ba:	d807      	bhi.n	80057cc <memmove+0x20>
 80057bc:	1e43      	subs	r3, r0, #1
 80057be:	42a1      	cmp	r1, r4
 80057c0:	d008      	beq.n	80057d4 <memmove+0x28>
 80057c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057ca:	e7f8      	b.n	80057be <memmove+0x12>
 80057cc:	4402      	add	r2, r0
 80057ce:	4601      	mov	r1, r0
 80057d0:	428a      	cmp	r2, r1
 80057d2:	d100      	bne.n	80057d6 <memmove+0x2a>
 80057d4:	bd10      	pop	{r4, pc}
 80057d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057de:	e7f7      	b.n	80057d0 <memmove+0x24>

080057e0 <_free_r>:
 80057e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057e2:	2900      	cmp	r1, #0
 80057e4:	d048      	beq.n	8005878 <_free_r+0x98>
 80057e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057ea:	9001      	str	r0, [sp, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f1a1 0404 	sub.w	r4, r1, #4
 80057f2:	bfb8      	it	lt
 80057f4:	18e4      	addlt	r4, r4, r3
 80057f6:	f000 f8d3 	bl	80059a0 <__malloc_lock>
 80057fa:	4a20      	ldr	r2, [pc, #128]	; (800587c <_free_r+0x9c>)
 80057fc:	9801      	ldr	r0, [sp, #4]
 80057fe:	6813      	ldr	r3, [r2, #0]
 8005800:	4615      	mov	r5, r2
 8005802:	b933      	cbnz	r3, 8005812 <_free_r+0x32>
 8005804:	6063      	str	r3, [r4, #4]
 8005806:	6014      	str	r4, [r2, #0]
 8005808:	b003      	add	sp, #12
 800580a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800580e:	f000 b8cd 	b.w	80059ac <__malloc_unlock>
 8005812:	42a3      	cmp	r3, r4
 8005814:	d90b      	bls.n	800582e <_free_r+0x4e>
 8005816:	6821      	ldr	r1, [r4, #0]
 8005818:	1862      	adds	r2, r4, r1
 800581a:	4293      	cmp	r3, r2
 800581c:	bf04      	itt	eq
 800581e:	681a      	ldreq	r2, [r3, #0]
 8005820:	685b      	ldreq	r3, [r3, #4]
 8005822:	6063      	str	r3, [r4, #4]
 8005824:	bf04      	itt	eq
 8005826:	1852      	addeq	r2, r2, r1
 8005828:	6022      	streq	r2, [r4, #0]
 800582a:	602c      	str	r4, [r5, #0]
 800582c:	e7ec      	b.n	8005808 <_free_r+0x28>
 800582e:	461a      	mov	r2, r3
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	b10b      	cbz	r3, 8005838 <_free_r+0x58>
 8005834:	42a3      	cmp	r3, r4
 8005836:	d9fa      	bls.n	800582e <_free_r+0x4e>
 8005838:	6811      	ldr	r1, [r2, #0]
 800583a:	1855      	adds	r5, r2, r1
 800583c:	42a5      	cmp	r5, r4
 800583e:	d10b      	bne.n	8005858 <_free_r+0x78>
 8005840:	6824      	ldr	r4, [r4, #0]
 8005842:	4421      	add	r1, r4
 8005844:	1854      	adds	r4, r2, r1
 8005846:	42a3      	cmp	r3, r4
 8005848:	6011      	str	r1, [r2, #0]
 800584a:	d1dd      	bne.n	8005808 <_free_r+0x28>
 800584c:	681c      	ldr	r4, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	6053      	str	r3, [r2, #4]
 8005852:	4421      	add	r1, r4
 8005854:	6011      	str	r1, [r2, #0]
 8005856:	e7d7      	b.n	8005808 <_free_r+0x28>
 8005858:	d902      	bls.n	8005860 <_free_r+0x80>
 800585a:	230c      	movs	r3, #12
 800585c:	6003      	str	r3, [r0, #0]
 800585e:	e7d3      	b.n	8005808 <_free_r+0x28>
 8005860:	6825      	ldr	r5, [r4, #0]
 8005862:	1961      	adds	r1, r4, r5
 8005864:	428b      	cmp	r3, r1
 8005866:	bf04      	itt	eq
 8005868:	6819      	ldreq	r1, [r3, #0]
 800586a:	685b      	ldreq	r3, [r3, #4]
 800586c:	6063      	str	r3, [r4, #4]
 800586e:	bf04      	itt	eq
 8005870:	1949      	addeq	r1, r1, r5
 8005872:	6021      	streq	r1, [r4, #0]
 8005874:	6054      	str	r4, [r2, #4]
 8005876:	e7c7      	b.n	8005808 <_free_r+0x28>
 8005878:	b003      	add	sp, #12
 800587a:	bd30      	pop	{r4, r5, pc}
 800587c:	20012ec0 	.word	0x20012ec0

08005880 <_malloc_r>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	1ccd      	adds	r5, r1, #3
 8005884:	f025 0503 	bic.w	r5, r5, #3
 8005888:	3508      	adds	r5, #8
 800588a:	2d0c      	cmp	r5, #12
 800588c:	bf38      	it	cc
 800588e:	250c      	movcc	r5, #12
 8005890:	2d00      	cmp	r5, #0
 8005892:	4606      	mov	r6, r0
 8005894:	db01      	blt.n	800589a <_malloc_r+0x1a>
 8005896:	42a9      	cmp	r1, r5
 8005898:	d903      	bls.n	80058a2 <_malloc_r+0x22>
 800589a:	230c      	movs	r3, #12
 800589c:	6033      	str	r3, [r6, #0]
 800589e:	2000      	movs	r0, #0
 80058a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a2:	f000 f87d 	bl	80059a0 <__malloc_lock>
 80058a6:	4921      	ldr	r1, [pc, #132]	; (800592c <_malloc_r+0xac>)
 80058a8:	680a      	ldr	r2, [r1, #0]
 80058aa:	4614      	mov	r4, r2
 80058ac:	b99c      	cbnz	r4, 80058d6 <_malloc_r+0x56>
 80058ae:	4f20      	ldr	r7, [pc, #128]	; (8005930 <_malloc_r+0xb0>)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	b923      	cbnz	r3, 80058be <_malloc_r+0x3e>
 80058b4:	4621      	mov	r1, r4
 80058b6:	4630      	mov	r0, r6
 80058b8:	f000 f862 	bl	8005980 <_sbrk_r>
 80058bc:	6038      	str	r0, [r7, #0]
 80058be:	4629      	mov	r1, r5
 80058c0:	4630      	mov	r0, r6
 80058c2:	f000 f85d 	bl	8005980 <_sbrk_r>
 80058c6:	1c43      	adds	r3, r0, #1
 80058c8:	d123      	bne.n	8005912 <_malloc_r+0x92>
 80058ca:	230c      	movs	r3, #12
 80058cc:	6033      	str	r3, [r6, #0]
 80058ce:	4630      	mov	r0, r6
 80058d0:	f000 f86c 	bl	80059ac <__malloc_unlock>
 80058d4:	e7e3      	b.n	800589e <_malloc_r+0x1e>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	1b5b      	subs	r3, r3, r5
 80058da:	d417      	bmi.n	800590c <_malloc_r+0x8c>
 80058dc:	2b0b      	cmp	r3, #11
 80058de:	d903      	bls.n	80058e8 <_malloc_r+0x68>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	441c      	add	r4, r3
 80058e4:	6025      	str	r5, [r4, #0]
 80058e6:	e004      	b.n	80058f2 <_malloc_r+0x72>
 80058e8:	6863      	ldr	r3, [r4, #4]
 80058ea:	42a2      	cmp	r2, r4
 80058ec:	bf0c      	ite	eq
 80058ee:	600b      	streq	r3, [r1, #0]
 80058f0:	6053      	strne	r3, [r2, #4]
 80058f2:	4630      	mov	r0, r6
 80058f4:	f000 f85a 	bl	80059ac <__malloc_unlock>
 80058f8:	f104 000b 	add.w	r0, r4, #11
 80058fc:	1d23      	adds	r3, r4, #4
 80058fe:	f020 0007 	bic.w	r0, r0, #7
 8005902:	1ac2      	subs	r2, r0, r3
 8005904:	d0cc      	beq.n	80058a0 <_malloc_r+0x20>
 8005906:	1a1b      	subs	r3, r3, r0
 8005908:	50a3      	str	r3, [r4, r2]
 800590a:	e7c9      	b.n	80058a0 <_malloc_r+0x20>
 800590c:	4622      	mov	r2, r4
 800590e:	6864      	ldr	r4, [r4, #4]
 8005910:	e7cc      	b.n	80058ac <_malloc_r+0x2c>
 8005912:	1cc4      	adds	r4, r0, #3
 8005914:	f024 0403 	bic.w	r4, r4, #3
 8005918:	42a0      	cmp	r0, r4
 800591a:	d0e3      	beq.n	80058e4 <_malloc_r+0x64>
 800591c:	1a21      	subs	r1, r4, r0
 800591e:	4630      	mov	r0, r6
 8005920:	f000 f82e 	bl	8005980 <_sbrk_r>
 8005924:	3001      	adds	r0, #1
 8005926:	d1dd      	bne.n	80058e4 <_malloc_r+0x64>
 8005928:	e7cf      	b.n	80058ca <_malloc_r+0x4a>
 800592a:	bf00      	nop
 800592c:	20012ec0 	.word	0x20012ec0
 8005930:	20012ec4 	.word	0x20012ec4

08005934 <_realloc_r>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	4607      	mov	r7, r0
 8005938:	4614      	mov	r4, r2
 800593a:	460e      	mov	r6, r1
 800593c:	b921      	cbnz	r1, 8005948 <_realloc_r+0x14>
 800593e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005942:	4611      	mov	r1, r2
 8005944:	f7ff bf9c 	b.w	8005880 <_malloc_r>
 8005948:	b922      	cbnz	r2, 8005954 <_realloc_r+0x20>
 800594a:	f7ff ff49 	bl	80057e0 <_free_r>
 800594e:	4625      	mov	r5, r4
 8005950:	4628      	mov	r0, r5
 8005952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005954:	f000 f830 	bl	80059b8 <_malloc_usable_size_r>
 8005958:	42a0      	cmp	r0, r4
 800595a:	d20f      	bcs.n	800597c <_realloc_r+0x48>
 800595c:	4621      	mov	r1, r4
 800595e:	4638      	mov	r0, r7
 8005960:	f7ff ff8e 	bl	8005880 <_malloc_r>
 8005964:	4605      	mov	r5, r0
 8005966:	2800      	cmp	r0, #0
 8005968:	d0f2      	beq.n	8005950 <_realloc_r+0x1c>
 800596a:	4631      	mov	r1, r6
 800596c:	4622      	mov	r2, r4
 800596e:	f7ff fbf7 	bl	8005160 <memcpy>
 8005972:	4631      	mov	r1, r6
 8005974:	4638      	mov	r0, r7
 8005976:	f7ff ff33 	bl	80057e0 <_free_r>
 800597a:	e7e9      	b.n	8005950 <_realloc_r+0x1c>
 800597c:	4635      	mov	r5, r6
 800597e:	e7e7      	b.n	8005950 <_realloc_r+0x1c>

08005980 <_sbrk_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4d06      	ldr	r5, [pc, #24]	; (800599c <_sbrk_r+0x1c>)
 8005984:	2300      	movs	r3, #0
 8005986:	4604      	mov	r4, r0
 8005988:	4608      	mov	r0, r1
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	f7fb f980 	bl	8000c90 <_sbrk>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d102      	bne.n	800599a <_sbrk_r+0x1a>
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	b103      	cbz	r3, 800599a <_sbrk_r+0x1a>
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	20012f9c 	.word	0x20012f9c

080059a0 <__malloc_lock>:
 80059a0:	4801      	ldr	r0, [pc, #4]	; (80059a8 <__malloc_lock+0x8>)
 80059a2:	f000 b811 	b.w	80059c8 <__retarget_lock_acquire_recursive>
 80059a6:	bf00      	nop
 80059a8:	20012fa4 	.word	0x20012fa4

080059ac <__malloc_unlock>:
 80059ac:	4801      	ldr	r0, [pc, #4]	; (80059b4 <__malloc_unlock+0x8>)
 80059ae:	f000 b80c 	b.w	80059ca <__retarget_lock_release_recursive>
 80059b2:	bf00      	nop
 80059b4:	20012fa4 	.word	0x20012fa4

080059b8 <_malloc_usable_size_r>:
 80059b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059bc:	1f18      	subs	r0, r3, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bfbc      	itt	lt
 80059c2:	580b      	ldrlt	r3, [r1, r0]
 80059c4:	18c0      	addlt	r0, r0, r3
 80059c6:	4770      	bx	lr

080059c8 <__retarget_lock_acquire_recursive>:
 80059c8:	4770      	bx	lr

080059ca <__retarget_lock_release_recursive>:
 80059ca:	4770      	bx	lr

080059cc <_init>:
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	bf00      	nop
 80059d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d2:	bc08      	pop	{r3}
 80059d4:	469e      	mov	lr, r3
 80059d6:	4770      	bx	lr

080059d8 <_fini>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	bf00      	nop
 80059dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059de:	bc08      	pop	{r3}
 80059e0:	469e      	mov	lr, r3
 80059e2:	4770      	bx	lr
