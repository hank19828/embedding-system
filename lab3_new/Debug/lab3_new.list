
lab3_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005698  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005878  08005878  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005878  08005878  00015878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005880  08005880  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005880  08005880  00015880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005884  08005884  00015884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00012e68  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e78  20012e78  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013485  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a94  00000000  00000000  000334c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00035f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f38  00000000  00000000  00036fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a1a  00000000  00000000  00037ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001164f  00000000  00000000  00059912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1cdb  00000000  00000000  0006af61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013cc3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004458  00000000  00000000  0013cc90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005810 	.word	0x08005810

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005810 	.word	0x08005810

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MEMS_Write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MEMS_Write(uint8_t address,uint8_t data){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	460a      	mov	r2, r1
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	4613      	mov	r3, r2
 80004d6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2108      	movs	r1, #8
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <MEMS_Write+0x44>)
 80004de:	f000 fe29 	bl	8001134 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 80004e2:	1df9      	adds	r1, r7, #7
 80004e4:	230a      	movs	r3, #10
 80004e6:	2201      	movs	r2, #1
 80004e8:	4809      	ldr	r0, [pc, #36]	; (8000510 <MEMS_Write+0x48>)
 80004ea:	f001 fb8a 	bl	8001c02 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data,1,10);
 80004ee:	1db9      	adds	r1, r7, #6
 80004f0:	230a      	movs	r3, #10
 80004f2:	2201      	movs	r2, #1
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <MEMS_Write+0x48>)
 80004f6:	f001 fb84 	bl	8001c02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2108      	movs	r1, #8
 80004fe:	4803      	ldr	r0, [pc, #12]	; (800050c <MEMS_Write+0x44>)
 8000500:	f000 fe18 	bl	8001134 <HAL_GPIO_WritePin>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	20012d94 	.word	0x20012d94

08000514 <MEMS_Read>:
void MEMS_Read(uint8_t address,uint8_t *data){
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	6039      	str	r1, [r7, #0]
 800051e:	71fb      	strb	r3, [r7, #7]
    address |= 0x80;
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000526:	b2db      	uxtb	r3, r3
 8000528:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	2108      	movs	r1, #8
 800052e:	480c      	ldr	r0, [pc, #48]	; (8000560 <MEMS_Read+0x4c>)
 8000530:	f000 fe00 	bl	8001134 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 8000534:	1df9      	adds	r1, r7, #7
 8000536:	230a      	movs	r3, #10
 8000538:	2201      	movs	r2, #1
 800053a:	480a      	ldr	r0, [pc, #40]	; (8000564 <MEMS_Read+0x50>)
 800053c:	f001 fb61 	bl	8001c02 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,data,1,10);
 8000540:	230a      	movs	r3, #10
 8000542:	2201      	movs	r2, #1
 8000544:	6839      	ldr	r1, [r7, #0]
 8000546:	4807      	ldr	r0, [pc, #28]	; (8000564 <MEMS_Read+0x50>)
 8000548:	f001 fc97 	bl	8001e7a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2108      	movs	r1, #8
 8000550:	4803      	ldr	r0, [pc, #12]	; (8000560 <MEMS_Read+0x4c>)
 8000552:	f000 fdef 	bl	8001134 <HAL_GPIO_WritePin>
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000
 8000564:	20012d94 	.word	0x20012d94

08000568 <Green_LED_Task>:
void Green_LED_Task(void *pvParameters)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		//綠燈閃爍
		uint8_t data;
		MEMS_Read(LIS3DSH_WHO_AM_I_ADDR,&data);
 8000570:	f107 030f 	add.w	r3, r7, #15
 8000574:	4619      	mov	r1, r3
 8000576:	200f      	movs	r0, #15
 8000578:	f7ff ffcc 	bl	8000514 <MEMS_Read>
		if(data == 0x3F){
 800057c:	7bfb      	ldrb	r3, [r7, #15]
 800057e:	2b3f      	cmp	r3, #63	; 0x3f
 8000580:	d104      	bne.n	800058c <Green_LED_Task+0x24>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000582:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000586:	4804      	ldr	r0, [pc, #16]	; (8000598 <Green_LED_Task+0x30>)
 8000588:	f000 fded 	bl	8001166 <HAL_GPIO_TogglePin>
		}
		vTaskDelay(500/portTICK_RATE_MS);
 800058c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000590:	f003 fb54 	bl	8003c3c <vTaskDelay>
	{
 8000594:	e7ec      	b.n	8000570 <Green_LED_Task+0x8>
 8000596:	bf00      	nop
 8000598:	40020c00 	.word	0x40020c00

0800059c <vHandlerTask>:
	}
}
SemaphoreHandle_t xSemaphore;
void vHandlerTask( void *pvParameters )
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	uint8_t data;
	for(;;)
		{
			/* Take the semaphore */
			xSemaphoreTake( xSemaphore, portMAX_DELAY);
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <vHandlerTask+0x58>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f04f 31ff 	mov.w	r1, #4294967295
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 ff75 	bl	800349c <xQueueSemaphoreTake>


			// semaphore was obtained
			for(int i = 0 ; i < 10 ; i ++ ){
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	e012      	b.n	80005de <vHandlerTask+0x42>
				uint32_t From_begin_time = HAL_GetTick();
 80005b8:	f000 fb32 	bl	8000c20 <HAL_GetTick>
 80005bc:	6138      	str	r0, [r7, #16]
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	480d      	ldr	r0, [pc, #52]	; (80005f8 <vHandlerTask+0x5c>)
 80005c4:	f000 fdcf 	bl	8001166 <HAL_GPIO_TogglePin>
				while(HAL_GetTick() - From_begin_time < 250/portTICK_RATE_MS){
 80005c8:	bf00      	nop
 80005ca:	f000 fb29 	bl	8000c20 <HAL_GetTick>
 80005ce:	4602      	mov	r2, r0
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	2bf9      	cmp	r3, #249	; 0xf9
 80005d6:	d9f8      	bls.n	80005ca <vHandlerTask+0x2e>
			for(int i = 0 ; i < 10 ; i ++ ){
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	3301      	adds	r3, #1
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	2b09      	cmp	r3, #9
 80005e2:	dde9      	ble.n	80005b8 <vHandlerTask+0x1c>
                // 橘燈閃5次


			// reset interrupt register

			MEMS_Read(0x5F,&data);
 80005e4:	f107 030f 	add.w	r3, r7, #15
 80005e8:	4619      	mov	r1, r3
 80005ea:	205f      	movs	r0, #95	; 0x5f
 80005ec:	f7ff ff92 	bl	8000514 <MEMS_Read>
			xSemaphoreTake( xSemaphore, portMAX_DELAY);
 80005f0:	e7d8      	b.n	80005a4 <vHandlerTask+0x8>
 80005f2:	bf00      	nop
 80005f4:	20012d8c 	.word	0x20012d8c
 80005f8:	40020c00 	.word	0x40020c00

080005fc <HAL_GPIO_EXTI_Callback>:

		}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken ;
	/* 紅燈 toggle */

	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060a:	480e      	ldr	r0, [pc, #56]	; (8000644 <HAL_GPIO_EXTI_Callback+0x48>)
 800060c:	f000 fdab 	bl	8001166 <HAL_GPIO_TogglePin>
	/* Give the semaphore to unblock the handler task */
	xHigherPriorityTaskWoken = pdFALSE ;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR( xSemaphore , &xHigherPriorityTaskWoken);
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f107 020c 	add.w	r2, r7, #12
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fdce 	bl	80031c0 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d007      	beq.n	800063a <HAL_GPIO_EXTI_Callback+0x3e>
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <HAL_GPIO_EXTI_Callback+0x50>)
 800062c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	f3bf 8f4f 	dsb	sy
 8000636:	f3bf 8f6f 	isb	sy
}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40020c00 	.word	0x40020c00
 8000648:	20012d8c 	.word	0x20012d8c
 800064c:	e000ed04 	.word	0xe000ed04

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 faad 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f855 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 f8e7 	bl	8000830 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000662:	f000 f8af 	bl	80007c4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // 寫入 register //
  MEMS_Write(0x21,0x01);
 8000666:	2101      	movs	r1, #1
 8000668:	2021      	movs	r0, #33	; 0x21
 800066a:	f7ff ff2d 	bl	80004c8 <MEMS_Write>
  MEMS_Write(0x23,0x48);
 800066e:	2148      	movs	r1, #72	; 0x48
 8000670:	2023      	movs	r0, #35	; 0x23
 8000672:	f7ff ff29 	bl	80004c8 <MEMS_Write>
  MEMS_Write(0x20,0x67);
 8000676:	2167      	movs	r1, #103	; 0x67
 8000678:	2020      	movs	r0, #32
 800067a:	f7ff ff25 	bl	80004c8 <MEMS_Write>
  MEMS_Write(0x24,0x00);
 800067e:	2100      	movs	r1, #0
 8000680:	2024      	movs	r0, #36	; 0x24
 8000682:	f7ff ff21 	bl	80004c8 <MEMS_Write>
  MEMS_Write(0x57,0x55);
 8000686:	2155      	movs	r1, #85	; 0x55
 8000688:	2057      	movs	r0, #87	; 0x57
 800068a:	f7ff ff1d 	bl	80004c8 <MEMS_Write>
  MEMS_Write(0x40,0x05);
 800068e:	2105      	movs	r1, #5
 8000690:	2040      	movs	r0, #64	; 0x40
 8000692:	f7ff ff19 	bl	80004c8 <MEMS_Write>
  MEMS_Write(0x41,0x11);
 8000696:	2111      	movs	r1, #17
 8000698:	2041      	movs	r0, #65	; 0x41
 800069a:	f7ff ff15 	bl	80004c8 <MEMS_Write>
  MEMS_Write(0x59,0xFC);
 800069e:	21fc      	movs	r1, #252	; 0xfc
 80006a0:	2059      	movs	r0, #89	; 0x59
 80006a2:	f7ff ff11 	bl	80004c8 <MEMS_Write>
  MEMS_Write(0x5A,0xFC);
 80006a6:	21fc      	movs	r1, #252	; 0xfc
 80006a8:	205a      	movs	r0, #90	; 0x5a
 80006aa:	f7ff ff0d 	bl	80004c8 <MEMS_Write>
  MEMS_Write(0x5B,0x1);
 80006ae:	2101      	movs	r1, #1
 80006b0:	205b      	movs	r0, #91	; 0x5b
 80006b2:	f7ff ff09 	bl	80004c8 <MEMS_Write>

  // Create the semaphore //
  xSemaphore = xSemaphoreCreateBinary();
 80006b6:	2203      	movs	r2, #3
 80006b8:	2100      	movs	r1, #0
 80006ba:	2001      	movs	r0, #1
 80006bc:	f002 fb8a 	bl	8002dd4 <xQueueGenericCreate>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <main+0xa4>)
 80006c4:	6013      	str	r3, [r2, #0]

  // task create //
  xTaskCreate(
 80006c6:	2300      	movs	r3, #0
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	2301      	movs	r3, #1
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	2280      	movs	r2, #128	; 0x80
 80006d2:	4909      	ldr	r1, [pc, #36]	; (80006f8 <main+0xa8>)
 80006d4:	4809      	ldr	r0, [pc, #36]	; (80006fc <main+0xac>)
 80006d6:	f003 f973 	bl	80039c0 <xTaskCreate>
      		  "Green_LED_Task",
      		  128,
      		  NULL,
      		  1,
      		  NULL);
  xTaskCreate(
 80006da:	2300      	movs	r3, #0
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2305      	movs	r3, #5
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	4906      	ldr	r1, [pc, #24]	; (8000700 <main+0xb0>)
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <main+0xb4>)
 80006ea:	f003 f969 	bl	80039c0 <xTaskCreate>
        		  "vHandlerTask",
        		  128,
        		  NULL,
        		  5,
        		  NULL);
  vTaskStartScheduler();
 80006ee:	f003 fad9 	bl	8003ca4 <vTaskStartScheduler>

  // USER CODE END 2 //

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0xa2>
 80006f4:	20012d8c 	.word	0x20012d8c
 80006f8:	08005828 	.word	0x08005828
 80006fc:	08000569 	.word	0x08000569
 8000700:	08005838 	.word	0x08005838
 8000704:	0800059d 	.word	0x0800059d

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2230      	movs	r2, #48	; 0x30
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f005 f872 	bl	8005800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <SystemClock_Config+0xb4>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <SystemClock_Config+0xb4>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	; 0x40
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <SystemClock_Config+0xb4>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <SystemClock_Config+0xb8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <SystemClock_Config+0xb8>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <SystemClock_Config+0xb8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fd27 	bl	80011cc <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000784:	f000 f8e2 	bl	800094c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 ff8a 	bl	80016bc <HAL_RCC_ClockConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007ae:	f000 f8cd 	bl	800094c <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000

080007c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_SPI1_Init+0x64>)
 80007ca:	4a18      	ldr	r2, [pc, #96]	; (800082c <MX_SPI1_Init+0x68>)
 80007cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_SPI1_Init+0x64>)
 80007d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_SPI1_Init+0x64>)
 80007f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_SPI1_Init+0x64>)
 8000810:	220a      	movs	r2, #10
 8000812:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_SPI1_Init+0x64>)
 8000816:	f001 f96b 	bl	8001af0 <HAL_SPI_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000820:	f000 f894 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20012d94 	.word	0x20012d94
 800082c:	40013000 	.word	0x40013000

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b34      	ldr	r3, [pc, #208]	; (800091c <MX_GPIO_Init+0xec>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a33      	ldr	r2, [pc, #204]	; (800091c <MX_GPIO_Init+0xec>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b31      	ldr	r3, [pc, #196]	; (800091c <MX_GPIO_Init+0xec>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b2d      	ldr	r3, [pc, #180]	; (800091c <MX_GPIO_Init+0xec>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a2c      	ldr	r2, [pc, #176]	; (800091c <MX_GPIO_Init+0xec>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b2a      	ldr	r3, [pc, #168]	; (800091c <MX_GPIO_Init+0xec>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b26      	ldr	r3, [pc, #152]	; (800091c <MX_GPIO_Init+0xec>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a25      	ldr	r2, [pc, #148]	; (800091c <MX_GPIO_Init+0xec>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b23      	ldr	r3, [pc, #140]	; (800091c <MX_GPIO_Init+0xec>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2108      	movs	r1, #8
 800089e:	4820      	ldr	r0, [pc, #128]	; (8000920 <MX_GPIO_Init+0xf0>)
 80008a0:	f000 fc48 	bl	8001134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80008aa:	481e      	ldr	r0, [pc, #120]	; (8000924 <MX_GPIO_Init+0xf4>)
 80008ac:	f000 fc42 	bl	8001134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008b0:	2308      	movs	r3, #8
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	4619      	mov	r1, r3
 80008c6:	4816      	ldr	r0, [pc, #88]	; (8000920 <MX_GPIO_Init+0xf0>)
 80008c8:	f000 fa98 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80008cc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80008d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4619      	mov	r1, r3
 80008e4:	480f      	ldr	r0, [pc, #60]	; (8000924 <MX_GPIO_Init+0xf4>)
 80008e6:	f000 fa89 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ea:	2301      	movs	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	4808      	ldr	r0, [pc, #32]	; (8000920 <MX_GPIO_Init+0xf0>)
 8000900:	f000 fa7c 	bl	8000dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2105      	movs	r1, #5
 8000908:	2006      	movs	r0, #6
 800090a:	f000 fa4d 	bl	8000da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800090e:	2006      	movs	r0, #6
 8000910:	f000 fa66 	bl	8000de0 <HAL_NVIC_EnableIRQ>

}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40021000 	.word	0x40021000
 8000924:	40020c00 	.word	0x40020c00

08000928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d101      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093a:	f000 f95d 	bl	8000bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40001400 	.word	0x40001400

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <HAL_SPI_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12b      	bne.n	8000a22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a02:	23e0      	movs	r3, #224	; 0xe0
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a12:	2305      	movs	r3, #5
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_SPI_MspInit+0x8c>)
 8000a1e:	f000 f9ed 	bl	8000dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40013000 	.word	0x40013000
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000

08000a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	2037      	movs	r0, #55	; 0x37
 8000a4e:	f000 f9ab 	bl	8000da8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000a52:	2037      	movs	r0, #55	; 0x37
 8000a54:	f000 f9c4 	bl	8000de0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <HAL_InitTick+0xa4>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a1e      	ldr	r2, [pc, #120]	; (8000adc <HAL_InitTick+0xa4>)
 8000a62:	f043 0320 	orr.w	r3, r3, #32
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_InitTick+0xa4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	f003 0320 	and.w	r3, r3, #32
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a74:	f107 0210 	add.w	r2, r7, #16
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 f804 	bl	8001a8c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a84:	f000 ffee 	bl	8001a64 <HAL_RCC_GetPCLK1Freq>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <HAL_InitTick+0xa8>)
 8000a92:	fba2 2303 	umull	r2, r3, r2, r3
 8000a96:	0c9b      	lsrs	r3, r3, #18
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_InitTick+0xac>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <HAL_InitTick+0xb0>)
 8000aa0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_InitTick+0xac>)
 8000aa4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_InitTick+0xac>)
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_InitTick+0xac>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_InitTick+0xac>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <HAL_InitTick+0xac>)
 8000abe:	f001 fdbf 	bl	8002640 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d104      	bne.n	8000ad2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <HAL_InitTick+0xac>)
 8000aca:	f001 fe13 	bl	80026f4 <HAL_TIM_Base_Start_IT>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	20012dec 	.word	0x20012dec
 8000ae8:	40001400 	.word	0x40001400

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f000 fb3d 	bl	800119c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <TIM7_IRQHandler+0x10>)
 8000b2e:	f001 fe51 	bl	80027d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20012dec 	.word	0x20012dec

08000b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b8a:	f7ff ffd7 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f004 fe05 	bl	800579c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fd5d 	bl	8000650 <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ba4:	08005888 	.word	0x08005888
  ldr r2, =_sbss
 8000ba8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bac:	20012e78 	.word	0x20012e78

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <HAL_Init+0x40>)
 8000bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_Init+0x40>)
 8000bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x40>)
 8000bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f8d8 	bl	8000d92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff ff28 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff feb6 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20012e34 	.word	0x20012e34

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20012e34 	.word	0x20012e34

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ff4c 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dba:	f7ff ff61 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000dbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	6978      	ldr	r0, [r7, #20]
 8000dc6:	f7ff ffb1 	bl	8000d2c <NVIC_EncodePriority>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff80 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff54 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	e16b      	b.n	80010f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 815a 	bne.w	80010ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d005      	beq.n	8000e4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d130      	bne.n	8000eb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68da      	ldr	r2, [r3, #12]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e84:	2201      	movs	r2, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	091b      	lsrs	r3, r3, #4
 8000e9a:	f003 0201 	and.w	r2, r3, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d017      	beq.n	8000eec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d123      	bne.n	8000f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	69b9      	ldr	r1, [r7, #24]
 8000f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0203 	and.w	r2, r3, #3
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80b4 	beq.w	80010ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b60      	ldr	r3, [pc, #384]	; (8001108 <HAL_GPIO_Init+0x30c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a5f      	ldr	r2, [pc, #380]	; (8001108 <HAL_GPIO_Init+0x30c>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b5d      	ldr	r3, [pc, #372]	; (8001108 <HAL_GPIO_Init+0x30c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9e:	4a5b      	ldr	r2, [pc, #364]	; (800110c <HAL_GPIO_Init+0x310>)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a52      	ldr	r2, [pc, #328]	; (8001110 <HAL_GPIO_Init+0x314>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d02b      	beq.n	8001022 <HAL_GPIO_Init+0x226>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a51      	ldr	r2, [pc, #324]	; (8001114 <HAL_GPIO_Init+0x318>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d025      	beq.n	800101e <HAL_GPIO_Init+0x222>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a50      	ldr	r2, [pc, #320]	; (8001118 <HAL_GPIO_Init+0x31c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01f      	beq.n	800101a <HAL_GPIO_Init+0x21e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4f      	ldr	r2, [pc, #316]	; (800111c <HAL_GPIO_Init+0x320>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x21a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4e      	ldr	r2, [pc, #312]	; (8001120 <HAL_GPIO_Init+0x324>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x216>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4d      	ldr	r2, [pc, #308]	; (8001124 <HAL_GPIO_Init+0x328>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x212>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4c      	ldr	r2, [pc, #304]	; (8001128 <HAL_GPIO_Init+0x32c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x20e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4b      	ldr	r2, [pc, #300]	; (800112c <HAL_GPIO_Init+0x330>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x20a>
 8001002:	2307      	movs	r3, #7
 8001004:	e00e      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001006:	2308      	movs	r3, #8
 8001008:	e00c      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800100a:	2306      	movs	r3, #6
 800100c:	e00a      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800100e:	2305      	movs	r3, #5
 8001010:	e008      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001012:	2304      	movs	r3, #4
 8001014:	e006      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001016:	2303      	movs	r3, #3
 8001018:	e004      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800101a:	2302      	movs	r3, #2
 800101c:	e002      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001022:	2300      	movs	r3, #0
 8001024:	69fa      	ldr	r2, [r7, #28]
 8001026:	f002 0203 	and.w	r2, r2, #3
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	4093      	lsls	r3, r2
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001034:	4935      	ldr	r1, [pc, #212]	; (800110c <HAL_GPIO_Init+0x310>)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001042:	4b3b      	ldr	r3, [pc, #236]	; (8001130 <HAL_GPIO_Init+0x334>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001066:	4a32      	ldr	r2, [pc, #200]	; (8001130 <HAL_GPIO_Init+0x334>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800106c:	4b30      	ldr	r3, [pc, #192]	; (8001130 <HAL_GPIO_Init+0x334>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <HAL_GPIO_Init+0x334>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <HAL_GPIO_Init+0x334>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ba:	4a1d      	ldr	r2, [pc, #116]	; (8001130 <HAL_GPIO_Init+0x334>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <HAL_GPIO_Init+0x334>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e4:	4a12      	ldr	r2, [pc, #72]	; (8001130 <HAL_GPIO_Init+0x334>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3301      	adds	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	f67f ae90 	bls.w	8000e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40013800 	.word	0x40013800
 8001110:	40020000 	.word	0x40020000
 8001114:	40020400 	.word	0x40020400
 8001118:	40020800 	.word	0x40020800
 800111c:	40020c00 	.word	0x40020c00
 8001120:	40021000 	.word	0x40021000
 8001124:	40021400 	.word	0x40021400
 8001128:	40021800 	.word	0x40021800
 800112c:	40021c00 	.word	0x40021c00
 8001130:	40013c00 	.word	0x40013c00

08001134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001144:	787b      	ldrb	r3, [r7, #1]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800114a:	887a      	ldrh	r2, [r7, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001150:	e003      	b.n	800115a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	041a      	lsls	r2, r3, #16
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	619a      	str	r2, [r3, #24]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001166:	b480      	push	{r7}
 8001168:	b085      	sub	sp, #20
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001178:	887a      	ldrh	r2, [r7, #2]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	4013      	ands	r3, r2
 800117e:	041a      	lsls	r2, r3, #16
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	43d9      	mvns	r1, r3
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	400b      	ands	r3, r1
 8001188:	431a      	orrs	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	619a      	str	r2, [r3, #24]
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a8:	695a      	ldr	r2, [r3, #20]
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d006      	beq.n	80011c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fa1e 	bl	80005fc <HAL_GPIO_EXTI_Callback>
  }
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40013c00 	.word	0x40013c00

080011cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e264      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d075      	beq.n	80012d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ea:	4ba3      	ldr	r3, [pc, #652]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d00c      	beq.n	8001210 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011f6:	4ba0      	ldr	r3, [pc, #640]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011fe:	2b08      	cmp	r3, #8
 8001200:	d112      	bne.n	8001228 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001202:	4b9d      	ldr	r3, [pc, #628]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800120a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800120e:	d10b      	bne.n	8001228 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	4b99      	ldr	r3, [pc, #612]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d05b      	beq.n	80012d4 <HAL_RCC_OscConfig+0x108>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d157      	bne.n	80012d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e23f      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	d106      	bne.n	8001240 <HAL_RCC_OscConfig+0x74>
 8001232:	4b91      	ldr	r3, [pc, #580]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a90      	ldr	r2, [pc, #576]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e01d      	b.n	800127c <HAL_RCC_OscConfig+0xb0>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x98>
 800124a:	4b8b      	ldr	r3, [pc, #556]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a8a      	ldr	r2, [pc, #552]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a87      	ldr	r2, [pc, #540]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e00b      	b.n	800127c <HAL_RCC_OscConfig+0xb0>
 8001264:	4b84      	ldr	r3, [pc, #528]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a83      	ldr	r2, [pc, #524]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800126a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b81      	ldr	r3, [pc, #516]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a80      	ldr	r2, [pc, #512]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d013      	beq.n	80012ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fccc 	bl	8000c20 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fcc8 	bl	8000c20 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e204      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0xc0>
 80012aa:	e014      	b.n	80012d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fcb8 	bl	8000c20 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fcb4 	bl	8000c20 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	; 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e1f0      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c6:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0xe8>
 80012d2:	e000      	b.n	80012d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d063      	beq.n	80013aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e2:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00b      	beq.n	8001306 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ee:	4b62      	ldr	r3, [pc, #392]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d11c      	bne.n	8001334 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012fa:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d116      	bne.n	8001334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001306:	4b5c      	ldr	r3, [pc, #368]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d005      	beq.n	800131e <HAL_RCC_OscConfig+0x152>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d001      	beq.n	800131e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e1c4      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4952      	ldr	r1, [pc, #328]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001332:	e03a      	b.n	80013aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d020      	beq.n	800137e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133c:	4b4f      	ldr	r3, [pc, #316]	; (800147c <HAL_RCC_OscConfig+0x2b0>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001342:	f7ff fc6d 	bl	8000c20 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134a:	f7ff fc69 	bl	8000c20 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e1a5      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	4b46      	ldr	r3, [pc, #280]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001368:	4b43      	ldr	r3, [pc, #268]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4940      	ldr	r1, [pc, #256]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
 800137c:	e015      	b.n	80013aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137e:	4b3f      	ldr	r3, [pc, #252]	; (800147c <HAL_RCC_OscConfig+0x2b0>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fc4c 	bl	8000c20 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800138c:	f7ff fc48 	bl	8000c20 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e184      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	4b36      	ldr	r3, [pc, #216]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d030      	beq.n	8001418 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d016      	beq.n	80013ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013be:	4b30      	ldr	r3, [pc, #192]	; (8001480 <HAL_RCC_OscConfig+0x2b4>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c4:	f7ff fc2c 	bl	8000c20 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013cc:	f7ff fc28 	bl	8000c20 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e164      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x200>
 80013ea:	e015      	b.n	8001418 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <HAL_RCC_OscConfig+0x2b4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fc15 	bl	8000c20 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fa:	f7ff fc11 	bl	8000c20 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e14d      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800140e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f0      	bne.n	80013fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80a0 	beq.w	8001566 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10f      	bne.n	8001456 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001452:	2301      	movs	r3, #1
 8001454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_RCC_OscConfig+0x2b8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145e:	2b00      	cmp	r3, #0
 8001460:	d121      	bne.n	80014a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <HAL_RCC_OscConfig+0x2b8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a07      	ldr	r2, [pc, #28]	; (8001484 <HAL_RCC_OscConfig+0x2b8>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800146e:	f7ff fbd7 	bl	8000c20 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001474:	e011      	b.n	800149a <HAL_RCC_OscConfig+0x2ce>
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	42470000 	.word	0x42470000
 8001480:	42470e80 	.word	0x42470e80
 8001484:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001488:	f7ff fbca 	bl	8000c20 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e106      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <HAL_RCC_OscConfig+0x4e4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d106      	bne.n	80014bc <HAL_RCC_OscConfig+0x2f0>
 80014ae:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 80014b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b2:	4a80      	ldr	r2, [pc, #512]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ba:	e01c      	b.n	80014f6 <HAL_RCC_OscConfig+0x32a>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	d10c      	bne.n	80014de <HAL_RCC_OscConfig+0x312>
 80014c4:	4b7b      	ldr	r3, [pc, #492]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c8:	4a7a      	ldr	r2, [pc, #488]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6713      	str	r3, [r2, #112]	; 0x70
 80014d0:	4b78      	ldr	r3, [pc, #480]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d4:	4a77      	ldr	r2, [pc, #476]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6713      	str	r3, [r2, #112]	; 0x70
 80014dc:	e00b      	b.n	80014f6 <HAL_RCC_OscConfig+0x32a>
 80014de:	4b75      	ldr	r3, [pc, #468]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e2:	4a74      	ldr	r2, [pc, #464]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 80014e4:	f023 0301 	bic.w	r3, r3, #1
 80014e8:	6713      	str	r3, [r2, #112]	; 0x70
 80014ea:	4b72      	ldr	r3, [pc, #456]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 80014ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ee:	4a71      	ldr	r2, [pc, #452]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 80014f0:	f023 0304 	bic.w	r3, r3, #4
 80014f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d015      	beq.n	800152a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fe:	f7ff fb8f 	bl	8000c20 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff fb8b 	bl	8000c20 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f241 3288 	movw	r2, #5000	; 0x1388
 8001514:	4293      	cmp	r3, r2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e0c5      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800151c:	4b65      	ldr	r3, [pc, #404]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0ee      	beq.n	8001506 <HAL_RCC_OscConfig+0x33a>
 8001528:	e014      	b.n	8001554 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff fb79 	bl	8000c20 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001530:	e00a      	b.n	8001548 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f7ff fb75 	bl	8000c20 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001540:	4293      	cmp	r3, r2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e0af      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001548:	4b5a      	ldr	r3, [pc, #360]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1ee      	bne.n	8001532 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d105      	bne.n	8001566 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800155a:	4b56      	ldr	r3, [pc, #344]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a55      	ldr	r2, [pc, #340]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 8001560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 809b 	beq.w	80016a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001570:	4b50      	ldr	r3, [pc, #320]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 030c 	and.w	r3, r3, #12
 8001578:	2b08      	cmp	r3, #8
 800157a:	d05c      	beq.n	8001636 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	2b02      	cmp	r3, #2
 8001582:	d141      	bne.n	8001608 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001584:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <HAL_RCC_OscConfig+0x4ec>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fb49 	bl	8000c20 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001592:	f7ff fb45 	bl	8000c20 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e081      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a4:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f0      	bne.n	8001592 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	69da      	ldr	r2, [r3, #28]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015be:	019b      	lsls	r3, r3, #6
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	085b      	lsrs	r3, r3, #1
 80015c8:	3b01      	subs	r3, #1
 80015ca:	041b      	lsls	r3, r3, #16
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	061b      	lsls	r3, r3, #24
 80015d4:	4937      	ldr	r1, [pc, #220]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015da:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <HAL_RCC_OscConfig+0x4ec>)
 80015dc:	2201      	movs	r2, #1
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb1e 	bl	8000c20 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff fb1a 	bl	8000c20 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e056      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fa:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x41c>
 8001606:	e04e      	b.n	80016a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001608:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <HAL_RCC_OscConfig+0x4ec>)
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fb07 	bl	8000c20 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001616:	f7ff fb03 	bl	8000c20 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e03f      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f0      	bne.n	8001616 <HAL_RCC_OscConfig+0x44a>
 8001634:	e037      	b.n	80016a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d101      	bne.n	8001642 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e032      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_RCC_OscConfig+0x4e8>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d028      	beq.n	80016a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d121      	bne.n	80016a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001668:	429a      	cmp	r2, r3
 800166a:	d11a      	bne.n	80016a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001672:	4013      	ands	r3, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001678:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800167a:	4293      	cmp	r3, r2
 800167c:	d111      	bne.n	80016a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	085b      	lsrs	r3, r3, #1
 800168a:	3b01      	subs	r3, #1
 800168c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800168e:	429a      	cmp	r2, r3
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40007000 	.word	0x40007000
 80016b4:	40023800 	.word	0x40023800
 80016b8:	42470060 	.word	0x42470060

080016bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0cc      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d90c      	bls.n	80016f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b65      	ldr	r3, [pc, #404]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b63      	ldr	r3, [pc, #396]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0b8      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001710:	4b59      	ldr	r3, [pc, #356]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a58      	ldr	r2, [pc, #352]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800171a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001728:	4b53      	ldr	r3, [pc, #332]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a52      	ldr	r2, [pc, #328]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001734:	4b50      	ldr	r3, [pc, #320]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	494d      	ldr	r1, [pc, #308]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d044      	beq.n	80017dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b47      	ldr	r3, [pc, #284]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d119      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e07f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d003      	beq.n	800177a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001776:	2b03      	cmp	r3, #3
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177a:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e06f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	4b3b      	ldr	r3, [pc, #236]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e067      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179a:	4b37      	ldr	r3, [pc, #220]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f023 0203 	bic.w	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4934      	ldr	r1, [pc, #208]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017ac:	f7ff fa38 	bl	8000c20 <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff fa34 	bl	8000c20 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e04f      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 020c 	and.w	r2, r3, #12
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1eb      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d20c      	bcs.n	8001804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e032      	b.n	800186a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4916      	ldr	r1, [pc, #88]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	490e      	ldr	r1, [pc, #56]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	4313      	orrs	r3, r2
 8001840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001842:	f000 f821 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8001846:	4602      	mov	r2, r0
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	490a      	ldr	r1, [pc, #40]	; (800187c <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	5ccb      	ldrb	r3, [r1, r3]
 8001856:	fa22 f303 	lsr.w	r3, r2, r3
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_RCC_ClockConfig+0x1c8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f8e8 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00
 8001878:	40023800 	.word	0x40023800
 800187c:	08005860 	.word	0x08005860
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004

08001888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	2300      	movs	r3, #0
 800189a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a0:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d00d      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x40>
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	f200 80bd 	bhi.w	8001a2c <HAL_RCC_GetSysClockFreq+0x1a4>
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x34>
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d003      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80018ba:	e0b7      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018bc:	4b61      	ldr	r3, [pc, #388]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018be:	60bb      	str	r3, [r7, #8]
       break;
 80018c0:	e0b7      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c2:	4b61      	ldr	r3, [pc, #388]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80018c4:	60bb      	str	r3, [r7, #8]
      break;
 80018c6:	e0b4      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c8:	4b5d      	ldr	r3, [pc, #372]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d2:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d04d      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018de:	4b58      	ldr	r3, [pc, #352]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	099b      	lsrs	r3, r3, #6
 80018e4:	461a      	mov	r2, r3
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018ee:	f04f 0100 	mov.w	r1, #0
 80018f2:	ea02 0800 	and.w	r8, r2, r0
 80018f6:	ea03 0901 	and.w	r9, r3, r1
 80018fa:	4640      	mov	r0, r8
 80018fc:	4649      	mov	r1, r9
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	014b      	lsls	r3, r1, #5
 8001908:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800190c:	0142      	lsls	r2, r0, #5
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	ebb0 0008 	subs.w	r0, r0, r8
 8001916:	eb61 0109 	sbc.w	r1, r1, r9
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	018b      	lsls	r3, r1, #6
 8001924:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001928:	0182      	lsls	r2, r0, #6
 800192a:	1a12      	subs	r2, r2, r0
 800192c:	eb63 0301 	sbc.w	r3, r3, r1
 8001930:	f04f 0000 	mov.w	r0, #0
 8001934:	f04f 0100 	mov.w	r1, #0
 8001938:	00d9      	lsls	r1, r3, #3
 800193a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800193e:	00d0      	lsls	r0, r2, #3
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	eb12 0208 	adds.w	r2, r2, r8
 8001948:	eb43 0309 	adc.w	r3, r3, r9
 800194c:	f04f 0000 	mov.w	r0, #0
 8001950:	f04f 0100 	mov.w	r1, #0
 8001954:	0259      	lsls	r1, r3, #9
 8001956:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800195a:	0250      	lsls	r0, r2, #9
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	461a      	mov	r2, r3
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	f7fe fc30 	bl	80001d0 <__aeabi_uldivmod>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4613      	mov	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e04a      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197a:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	461a      	mov	r2, r3
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	f240 10ff 	movw	r0, #511	; 0x1ff
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	ea02 0400 	and.w	r4, r2, r0
 8001992:	ea03 0501 	and.w	r5, r3, r1
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	014b      	lsls	r3, r1, #5
 80019a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019a8:	0142      	lsls	r2, r0, #5
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	1b00      	subs	r0, r0, r4
 80019b0:	eb61 0105 	sbc.w	r1, r1, r5
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	018b      	lsls	r3, r1, #6
 80019be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019c2:	0182      	lsls	r2, r0, #6
 80019c4:	1a12      	subs	r2, r2, r0
 80019c6:	eb63 0301 	sbc.w	r3, r3, r1
 80019ca:	f04f 0000 	mov.w	r0, #0
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	00d9      	lsls	r1, r3, #3
 80019d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019d8:	00d0      	lsls	r0, r2, #3
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	1912      	adds	r2, r2, r4
 80019e0:	eb45 0303 	adc.w	r3, r5, r3
 80019e4:	f04f 0000 	mov.w	r0, #0
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	0299      	lsls	r1, r3, #10
 80019ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019f2:	0290      	lsls	r0, r2, #10
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	461a      	mov	r2, r3
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	f7fe fbe4 	bl	80001d0 <__aeabi_uldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	0c1b      	lsrs	r3, r3, #16
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a28:	60bb      	str	r3, [r7, #8]
      break;
 8001a2a:	e002      	b.n	8001a32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a2e:	60bb      	str	r3, [r7, #8]
      break;
 8001a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a32:	68bb      	ldr	r3, [r7, #8]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	00f42400 	.word	0x00f42400
 8001a48:	007a1200 	.word	0x007a1200

08001a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000000 	.word	0x20000000

08001a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a68:	f7ff fff0 	bl	8001a4c <HAL_RCC_GetHCLKFreq>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	0a9b      	lsrs	r3, r3, #10
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	4903      	ldr	r1, [pc, #12]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	08005870 	.word	0x08005870

08001a8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	220f      	movs	r2, #15
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0203 	and.w	r2, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	08db      	lsrs	r3, r3, #3
 8001ac6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <HAL_RCC_GetClockConfig+0x60>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0207 	and.w	r2, r3, #7
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	601a      	str	r2, [r3, #0]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e07b      	b.n	8001bfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d108      	bne.n	8001b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b12:	d009      	beq.n	8001b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
 8001b1a:	e005      	b.n	8001b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7fe ff30 	bl	80009a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bac:	ea42 0103 	orr.w	r1, r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	f003 0104 	and.w	r1, r3, #4
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	f003 0210 	and.w	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69da      	ldr	r2, [r3, #28]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b088      	sub	sp, #32
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	60f8      	str	r0, [r7, #12]
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	603b      	str	r3, [r7, #0]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_SPI_Transmit+0x22>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e126      	b.n	8001e72 <HAL_SPI_Transmit+0x270>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c2c:	f7fe fff8 	bl	8000c20 <HAL_GetTick>
 8001c30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d002      	beq.n	8001c48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c42:	2302      	movs	r3, #2
 8001c44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c46:	e10b      	b.n	8001e60 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d002      	beq.n	8001c54 <HAL_SPI_Transmit+0x52>
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c58:	e102      	b.n	8001e60 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca0:	d10f      	bne.n	8001cc2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ccc:	2b40      	cmp	r3, #64	; 0x40
 8001cce:	d007      	beq.n	8001ce0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ce8:	d14b      	bne.n	8001d82 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_SPI_Transmit+0xf6>
 8001cf2:	8afb      	ldrh	r3, [r7, #22]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d13e      	bne.n	8001d76 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	881a      	ldrh	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d08:	1c9a      	adds	r2, r3, #2
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d1c:	e02b      	b.n	8001d76 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d112      	bne.n	8001d52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	881a      	ldrh	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	1c9a      	adds	r2, r3, #2
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d50:	e011      	b.n	8001d76 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d52:	f7fe ff65 	bl	8000c20 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d803      	bhi.n	8001d6a <HAL_SPI_Transmit+0x168>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d102      	bne.n	8001d70 <HAL_SPI_Transmit+0x16e>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d102      	bne.n	8001d76 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d74:	e074      	b.n	8001e60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1ce      	bne.n	8001d1e <HAL_SPI_Transmit+0x11c>
 8001d80:	e04c      	b.n	8001e1c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_SPI_Transmit+0x18e>
 8001d8a:	8afb      	ldrh	r3, [r7, #22]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d140      	bne.n	8001e12 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	330c      	adds	r3, #12
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001db6:	e02c      	b.n	8001e12 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d113      	bne.n	8001dee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	330c      	adds	r3, #12
 8001dd0:	7812      	ldrb	r2, [r2, #0]
 8001dd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	86da      	strh	r2, [r3, #54]	; 0x36
 8001dec:	e011      	b.n	8001e12 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dee:	f7fe ff17 	bl	8000c20 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d803      	bhi.n	8001e06 <HAL_SPI_Transmit+0x204>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d102      	bne.n	8001e0c <HAL_SPI_Transmit+0x20a>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e10:	e026      	b.n	8001e60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1cd      	bne.n	8001db8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	6839      	ldr	r1, [r7, #0]
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 fbcb 	bl	80025bc <SPI_EndRxTxTransaction>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10a      	bne.n	8001e50 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	77fb      	strb	r3, [r7, #31]
 8001e5c:	e000      	b.n	8001e60 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001e5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e70:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3720      	adds	r7, #32
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b088      	sub	sp, #32
 8001e7e:	af02      	add	r7, sp, #8
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	4613      	mov	r3, r2
 8001e88:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e96:	d112      	bne.n	8001ebe <HAL_SPI_Receive+0x44>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10e      	bne.n	8001ebe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001ea8:	88fa      	ldrh	r2, [r7, #6]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	68b9      	ldr	r1, [r7, #8]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f8f1 	bl	800209c <HAL_SPI_TransmitReceive>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	e0ea      	b.n	8002094 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_SPI_Receive+0x52>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e0e3      	b.n	8002094 <HAL_SPI_Receive+0x21a>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ed4:	f7fe fea4 	bl	8000c20 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d002      	beq.n	8001eec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001eea:	e0ca      	b.n	8002082 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_SPI_Receive+0x7e>
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001efc:	e0c1      	b.n	8002082 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2204      	movs	r2, #4
 8001f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	88fa      	ldrh	r2, [r7, #6]
 8001f16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	88fa      	ldrh	r2, [r7, #6]
 8001f1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f44:	d10f      	bne.n	8001f66 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f70:	2b40      	cmp	r3, #64	; 0x40
 8001f72:	d007      	beq.n	8001f84 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d162      	bne.n	8002052 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001f8c:	e02e      	b.n	8001fec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d115      	bne.n	8001fc8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f103 020c 	add.w	r2, r3, #12
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fc6:	e011      	b.n	8001fec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fc8:	f7fe fe2a 	bl	8000c20 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d803      	bhi.n	8001fe0 <HAL_SPI_Receive+0x166>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fde:	d102      	bne.n	8001fe6 <HAL_SPI_Receive+0x16c>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001fea:	e04a      	b.n	8002082 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1cb      	bne.n	8001f8e <HAL_SPI_Receive+0x114>
 8001ff6:	e031      	b.n	800205c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d113      	bne.n	800202e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002010:	b292      	uxth	r2, r2
 8002012:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002018:	1c9a      	adds	r2, r3, #2
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800202c:	e011      	b.n	8002052 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800202e:	f7fe fdf7 	bl	8000c20 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d803      	bhi.n	8002046 <HAL_SPI_Receive+0x1cc>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d102      	bne.n	800204c <HAL_SPI_Receive+0x1d2>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002050:	e017      	b.n	8002082 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002056:	b29b      	uxth	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1cd      	bne.n	8001ff8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fa45 	bl	80024f0 <SPI_EndRxTransaction>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]
 800207e:	e000      	b.n	8002082 <HAL_SPI_Receive+0x208>
  }

error :
 8002080:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002092:	7dfb      	ldrb	r3, [r7, #23]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08c      	sub	sp, #48	; 0x30
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020aa:	2301      	movs	r3, #1
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_SPI_TransmitReceive+0x26>
 80020be:	2302      	movs	r3, #2
 80020c0:	e18a      	b.n	80023d8 <HAL_SPI_TransmitReceive+0x33c>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020ca:	f7fe fda9 	bl	8000c20 <HAL_GetTick>
 80020ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d00f      	beq.n	800210c <HAL_SPI_TransmitReceive+0x70>
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020f2:	d107      	bne.n	8002104 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d103      	bne.n	8002104 <HAL_SPI_TransmitReceive+0x68>
 80020fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002100:	2b04      	cmp	r3, #4
 8002102:	d003      	beq.n	800210c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002104:	2302      	movs	r3, #2
 8002106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800210a:	e15b      	b.n	80023c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_SPI_TransmitReceive+0x82>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_SPI_TransmitReceive+0x82>
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d103      	bne.n	8002126 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002124:	e14e      	b.n	80023c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b04      	cmp	r3, #4
 8002130:	d003      	beq.n	800213a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2205      	movs	r2, #5
 8002136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	887a      	ldrh	r2, [r7, #2]
 800214a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	887a      	ldrh	r2, [r7, #2]
 8002162:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217a:	2b40      	cmp	r3, #64	; 0x40
 800217c:	d007      	beq.n	800218e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002196:	d178      	bne.n	800228a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <HAL_SPI_TransmitReceive+0x10a>
 80021a0:	8b7b      	ldrh	r3, [r7, #26]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d166      	bne.n	8002274 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	881a      	ldrh	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	1c9a      	adds	r2, r3, #2
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021ca:	e053      	b.n	8002274 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d11b      	bne.n	8002212 <HAL_SPI_TransmitReceive+0x176>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d016      	beq.n	8002212 <HAL_SPI_TransmitReceive+0x176>
 80021e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d113      	bne.n	8002212 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	881a      	ldrh	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	1c9a      	adds	r2, r3, #2
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d119      	bne.n	8002254 <HAL_SPI_TransmitReceive+0x1b8>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d014      	beq.n	8002254 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002234:	b292      	uxth	r2, r2
 8002236:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223c:	1c9a      	adds	r2, r3, #2
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002250:	2301      	movs	r3, #1
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002254:	f7fe fce4 	bl	8000c20 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002260:	429a      	cmp	r2, r3
 8002262:	d807      	bhi.n	8002274 <HAL_SPI_TransmitReceive+0x1d8>
 8002264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226a:	d003      	beq.n	8002274 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002272:	e0a7      	b.n	80023c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1a6      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x130>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1a1      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x130>
 8002288:	e07c      	b.n	8002384 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_SPI_TransmitReceive+0x1fc>
 8002292:	8b7b      	ldrh	r3, [r7, #26]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d16b      	bne.n	8002370 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	330c      	adds	r3, #12
 80022a2:	7812      	ldrb	r2, [r2, #0]
 80022a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022be:	e057      	b.n	8002370 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d11c      	bne.n	8002308 <HAL_SPI_TransmitReceive+0x26c>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d017      	beq.n	8002308 <HAL_SPI_TransmitReceive+0x26c>
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d114      	bne.n	8002308 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	330c      	adds	r3, #12
 80022e8:	7812      	ldrb	r2, [r2, #0]
 80022ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b01      	cmp	r3, #1
 8002314:	d119      	bne.n	800234a <HAL_SPI_TransmitReceive+0x2ae>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800231a:	b29b      	uxth	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d014      	beq.n	800234a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002346:	2301      	movs	r3, #1
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800234a:	f7fe fc69 	bl	8000c20 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002356:	429a      	cmp	r2, r3
 8002358:	d803      	bhi.n	8002362 <HAL_SPI_TransmitReceive+0x2c6>
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002360:	d102      	bne.n	8002368 <HAL_SPI_TransmitReceive+0x2cc>
 8002362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002364:	2b00      	cmp	r3, #0
 8002366:	d103      	bne.n	8002370 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800236e:	e029      	b.n	80023c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1a2      	bne.n	80022c0 <HAL_SPI_TransmitReceive+0x224>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d19d      	bne.n	80022c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002386:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f917 	bl	80025bc <SPI_EndRxTxTransaction>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2220      	movs	r2, #32
 800239e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80023a0:	e010      	b.n	80023c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10b      	bne.n	80023c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	e000      	b.n	80023c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80023c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3730      	adds	r7, #48	; 0x30
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023f0:	f7fe fc16 	bl	8000c20 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002400:	f7fe fc0e 	bl	8000c20 <HAL_GetTick>
 8002404:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002406:	4b39      	ldr	r3, [pc, #228]	; (80024ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	015b      	lsls	r3, r3, #5
 800240c:	0d1b      	lsrs	r3, r3, #20
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	fb02 f303 	mul.w	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002416:	e054      	b.n	80024c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241e:	d050      	beq.n	80024c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002420:	f7fe fbfe 	bl	8000c20 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	429a      	cmp	r2, r3
 800242e:	d902      	bls.n	8002436 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d13d      	bne.n	80024b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002444:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800244e:	d111      	bne.n	8002474 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002458:	d004      	beq.n	8002464 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002462:	d107      	bne.n	8002474 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002472:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247c:	d10f      	bne.n	800249e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800249c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e017      	b.n	80024e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	3b01      	subs	r3, #1
 80024c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4013      	ands	r3, r2
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d19b      	bne.n	8002418 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3720      	adds	r7, #32
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000000 	.word	0x20000000

080024f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002504:	d111      	bne.n	800252a <SPI_EndRxTransaction+0x3a>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800250e:	d004      	beq.n	800251a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002518:	d107      	bne.n	800252a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002528:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002532:	d12a      	bne.n	800258a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800253c:	d012      	beq.n	8002564 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2200      	movs	r2, #0
 8002546:	2180      	movs	r1, #128	; 0x80
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f7ff ff49 	bl	80023e0 <SPI_WaitFlagStateUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d02d      	beq.n	80025b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	f043 0220 	orr.w	r2, r3, #32
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e026      	b.n	80025b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2200      	movs	r2, #0
 800256c:	2101      	movs	r1, #1
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f7ff ff36 	bl	80023e0 <SPI_WaitFlagStateUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01a      	beq.n	80025b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	f043 0220 	orr.w	r2, r3, #32
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e013      	b.n	80025b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2200      	movs	r2, #0
 8002592:	2101      	movs	r1, #1
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff ff23 	bl	80023e0 <SPI_WaitFlagStateUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d007      	beq.n	80025b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	f043 0220 	orr.w	r2, r3, #32
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e000      	b.n	80025b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <SPI_EndRxTxTransaction+0x7c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1b      	ldr	r2, [pc, #108]	; (800263c <SPI_EndRxTxTransaction+0x80>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	0d5b      	lsrs	r3, r3, #21
 80025d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025e6:	d112      	bne.n	800260e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2200      	movs	r2, #0
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f7ff fef4 	bl	80023e0 <SPI_WaitFlagStateUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d016      	beq.n	800262c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f043 0220 	orr.w	r2, r3, #32
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e00f      	b.n	800262e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3b01      	subs	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b80      	cmp	r3, #128	; 0x80
 8002626:	d0f2      	beq.n	800260e <SPI_EndRxTxTransaction+0x52>
 8002628:	e000      	b.n	800262c <SPI_EndRxTxTransaction+0x70>
        break;
 800262a:	bf00      	nop
  }

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000000 	.word	0x20000000
 800263c:	165e9f81 	.word	0x165e9f81

08002640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e041      	b.n	80026d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f839 	bl	80026de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	4619      	mov	r1, r3
 800267e:	4610      	mov	r0, r2
 8002680:	f000 f9d8 	bl	8002a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d001      	beq.n	800270c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e04e      	b.n	80027aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d022      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d01d      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1f      	ldr	r2, [pc, #124]	; (80027bc <HAL_TIM_Base_Start_IT+0xc8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d018      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d013      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1c      	ldr	r2, [pc, #112]	; (80027c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00e      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1b      	ldr	r2, [pc, #108]	; (80027c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_TIM_Base_Start_IT+0xd8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d004      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x80>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a18      	ldr	r2, [pc, #96]	; (80027d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d111      	bne.n	8002798 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b06      	cmp	r3, #6
 8002784:	d010      	beq.n	80027a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002796:	e007      	b.n	80027a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40010000 	.word	0x40010000
 80027bc:	40000400 	.word	0x40000400
 80027c0:	40000800 	.word	0x40000800
 80027c4:	40000c00 	.word	0x40000c00
 80027c8:	40010400 	.word	0x40010400
 80027cc:	40014000 	.word	0x40014000
 80027d0:	40001800 	.word	0x40001800

080027d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d122      	bne.n	8002830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d11b      	bne.n	8002830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0202 	mvn.w	r2, #2
 8002800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8ee 	bl	80029f8 <HAL_TIM_IC_CaptureCallback>
 800281c:	e005      	b.n	800282a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8e0 	bl	80029e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f8f1 	bl	8002a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b04      	cmp	r3, #4
 800283c:	d122      	bne.n	8002884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d11b      	bne.n	8002884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0204 	mvn.w	r2, #4
 8002854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2202      	movs	r2, #2
 800285a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f8c4 	bl	80029f8 <HAL_TIM_IC_CaptureCallback>
 8002870:	e005      	b.n	800287e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f8b6 	bl	80029e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f8c7 	bl	8002a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b08      	cmp	r3, #8
 8002890:	d122      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b08      	cmp	r3, #8
 800289e:	d11b      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0208 	mvn.w	r2, #8
 80028a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2204      	movs	r2, #4
 80028ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f89a 	bl	80029f8 <HAL_TIM_IC_CaptureCallback>
 80028c4:	e005      	b.n	80028d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f88c 	bl	80029e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f89d 	bl	8002a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d122      	bne.n	800292c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d11b      	bne.n	800292c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0210 	mvn.w	r2, #16
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2208      	movs	r2, #8
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f870 	bl	80029f8 <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f862 	bl	80029e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f873 	bl	8002a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b01      	cmp	r3, #1
 8002938:	d10e      	bne.n	8002958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b01      	cmp	r3, #1
 8002946:	d107      	bne.n	8002958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0201 	mvn.w	r2, #1
 8002950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7fd ffe8 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002962:	2b80      	cmp	r3, #128	; 0x80
 8002964:	d10e      	bne.n	8002984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002970:	2b80      	cmp	r3, #128	; 0x80
 8002972:	d107      	bne.n	8002984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800297c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f902 	bl	8002b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	2b40      	cmp	r3, #64	; 0x40
 8002990:	d10e      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	d107      	bne.n	80029b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f838 	bl	8002a20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d10e      	bne.n	80029dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d107      	bne.n	80029dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0220 	mvn.w	r2, #32
 80029d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f8cc 	bl	8002b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a40      	ldr	r2, [pc, #256]	; (8002b48 <TIM_Base_SetConfig+0x114>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <TIM_Base_SetConfig+0x40>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a52:	d00f      	beq.n	8002a74 <TIM_Base_SetConfig+0x40>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a3d      	ldr	r2, [pc, #244]	; (8002b4c <TIM_Base_SetConfig+0x118>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00b      	beq.n	8002a74 <TIM_Base_SetConfig+0x40>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a3c      	ldr	r2, [pc, #240]	; (8002b50 <TIM_Base_SetConfig+0x11c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d007      	beq.n	8002a74 <TIM_Base_SetConfig+0x40>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a3b      	ldr	r2, [pc, #236]	; (8002b54 <TIM_Base_SetConfig+0x120>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d003      	beq.n	8002a74 <TIM_Base_SetConfig+0x40>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a3a      	ldr	r2, [pc, #232]	; (8002b58 <TIM_Base_SetConfig+0x124>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d108      	bne.n	8002a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a2f      	ldr	r2, [pc, #188]	; (8002b48 <TIM_Base_SetConfig+0x114>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d02b      	beq.n	8002ae6 <TIM_Base_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a94:	d027      	beq.n	8002ae6 <TIM_Base_SetConfig+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a2c      	ldr	r2, [pc, #176]	; (8002b4c <TIM_Base_SetConfig+0x118>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d023      	beq.n	8002ae6 <TIM_Base_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <TIM_Base_SetConfig+0x11c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d01f      	beq.n	8002ae6 <TIM_Base_SetConfig+0xb2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	; (8002b54 <TIM_Base_SetConfig+0x120>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01b      	beq.n	8002ae6 <TIM_Base_SetConfig+0xb2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a29      	ldr	r2, [pc, #164]	; (8002b58 <TIM_Base_SetConfig+0x124>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d017      	beq.n	8002ae6 <TIM_Base_SetConfig+0xb2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a28      	ldr	r2, [pc, #160]	; (8002b5c <TIM_Base_SetConfig+0x128>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <TIM_Base_SetConfig+0xb2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a27      	ldr	r2, [pc, #156]	; (8002b60 <TIM_Base_SetConfig+0x12c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00f      	beq.n	8002ae6 <TIM_Base_SetConfig+0xb2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a26      	ldr	r2, [pc, #152]	; (8002b64 <TIM_Base_SetConfig+0x130>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00b      	beq.n	8002ae6 <TIM_Base_SetConfig+0xb2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a25      	ldr	r2, [pc, #148]	; (8002b68 <TIM_Base_SetConfig+0x134>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a24      	ldr	r2, [pc, #144]	; (8002b6c <TIM_Base_SetConfig+0x138>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <TIM_Base_SetConfig+0xb2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a23      	ldr	r2, [pc, #140]	; (8002b70 <TIM_Base_SetConfig+0x13c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d108      	bne.n	8002af8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <TIM_Base_SetConfig+0x114>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d003      	beq.n	8002b2c <TIM_Base_SetConfig+0xf8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a0c      	ldr	r2, [pc, #48]	; (8002b58 <TIM_Base_SetConfig+0x124>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d103      	bne.n	8002b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	615a      	str	r2, [r3, #20]
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40010000 	.word	0x40010000
 8002b4c:	40000400 	.word	0x40000400
 8002b50:	40000800 	.word	0x40000800
 8002b54:	40000c00 	.word	0x40000c00
 8002b58:	40010400 	.word	0x40010400
 8002b5c:	40014000 	.word	0x40014000
 8002b60:	40014400 	.word	0x40014400
 8002b64:	40014800 	.word	0x40014800
 8002b68:	40001800 	.word	0x40001800
 8002b6c:	40001c00 	.word	0x40001c00
 8002b70:	40002000 	.word	0x40002000

08002b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f103 0208 	add.w	r2, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f103 0208 	add.w	r2, r3, #8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f103 0208 	add.w	r2, r3, #8
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	601a      	str	r2, [r3, #0]
}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d103      	bne.n	8002c5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	e00c      	b.n	8002c78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3308      	adds	r3, #8
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e002      	b.n	8002c6c <vListInsert+0x2e>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d2f6      	bcs.n	8002c66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	601a      	str	r2, [r3, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6892      	ldr	r2, [r2, #8]
 8002cc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6852      	ldr	r2, [r2, #4]
 8002cd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d103      	bne.n	8002ce4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	1e5a      	subs	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10a      	bne.n	8002d2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d2e:	f002 fa39 	bl	80051a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	68f9      	ldr	r1, [r7, #12]
 8002d3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	441a      	add	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	68f9      	ldr	r1, [r7, #12]
 8002d62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	441a      	add	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	22ff      	movs	r2, #255	; 0xff
 8002d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	22ff      	movs	r2, #255	; 0xff
 8002d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d114      	bne.n	8002dae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01a      	beq.n	8002dc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3310      	adds	r3, #16
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 f9f3 	bl	800417c <xTaskRemoveFromEventList>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d012      	beq.n	8002dc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <xQueueGenericReset+0xcc>)
 8002d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	e009      	b.n	8002dc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3310      	adds	r3, #16
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fef2 	bl	8002b9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3324      	adds	r3, #36	; 0x24
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff feed 	bl	8002b9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dc2:	f002 fa1f 	bl	8005204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002dc6:	2301      	movs	r3, #1
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	e000ed04 	.word	0xe000ed04

08002dd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	4613      	mov	r3, r2
 8002de0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10a      	bne.n	8002dfe <xQueueGenericCreate+0x2a>
	__asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	613b      	str	r3, [r7, #16]
}
 8002dfa:	bf00      	nop
 8002dfc:	e7fe      	b.n	8002dfc <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	e004      	b.n	8002e14 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	3350      	adds	r3, #80	; 0x50
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f002 fae5 	bl	80053e8 <pvPortMalloc>
 8002e1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00d      	beq.n	8002e42 <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	3350      	adds	r3, #80	; 0x50
 8002e2e:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e30:	79fa      	ldrb	r2, [r7, #7]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f805 	bl	8002e4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e42:	69bb      	ldr	r3, [r7, #24]
	}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3720      	adds	r7, #32
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e002      	b.n	8002e6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	69b8      	ldr	r0, [r7, #24]
 8002e7e:	f7ff ff41 	bl	8002d04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08e      	sub	sp, #56	; 0x38
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <xQueueGenericSend+0x32>
	__asm volatile
 8002eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb4:	f383 8811 	msr	BASEPRI, r3
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ec2:	bf00      	nop
 8002ec4:	e7fe      	b.n	8002ec4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d103      	bne.n	8002ed4 <xQueueGenericSend+0x40>
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <xQueueGenericSend+0x44>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <xQueueGenericSend+0x46>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <xQueueGenericSend+0x60>
	__asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ef0:	bf00      	nop
 8002ef2:	e7fe      	b.n	8002ef2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d103      	bne.n	8002f02 <xQueueGenericSend+0x6e>
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <xQueueGenericSend+0x72>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <xQueueGenericSend+0x74>
 8002f06:	2300      	movs	r3, #0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10a      	bne.n	8002f22 <xQueueGenericSend+0x8e>
	__asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	623b      	str	r3, [r7, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	e7fe      	b.n	8002f20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f22:	f001 fac7 	bl	80044b4 <xTaskGetSchedulerState>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <xQueueGenericSend+0x9e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <xQueueGenericSend+0xa2>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <xQueueGenericSend+0xa4>
 8002f36:	2300      	movs	r3, #0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <xQueueGenericSend+0xbe>
	__asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	61fb      	str	r3, [r7, #28]
}
 8002f4e:	bf00      	nop
 8002f50:	e7fe      	b.n	8002f50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f52:	f002 f927 	bl	80051a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <xQueueGenericSend+0xd4>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d129      	bne.n	8002fbc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f6e:	f000 fbb9 	bl	80036e4 <prvCopyDataToQueue>
 8002f72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	3324      	adds	r3, #36	; 0x24
 8002f80:	4618      	mov	r0, r3
 8002f82:	f001 f8fb 	bl	800417c <xTaskRemoveFromEventList>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d013      	beq.n	8002fb4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f8c:	4b3f      	ldr	r3, [pc, #252]	; (800308c <xQueueGenericSend+0x1f8>)
 8002f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	e00a      	b.n	8002fb4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d007      	beq.n	8002fb4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fa4:	4b39      	ldr	r3, [pc, #228]	; (800308c <xQueueGenericSend+0x1f8>)
 8002fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fb4:	f002 f926 	bl	8005204 <vPortExitCritical>
				return pdPASS;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e063      	b.n	8003084 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fc2:	f002 f91f 	bl	8005204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e05c      	b.n	8003084 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f001 f933 	bl	8004240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fde:	f002 f911 	bl	8005204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fe2:	f000 fead 	bl	8003d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fe6:	f002 f8dd 	bl	80051a4 <vPortEnterCritical>
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ff0:	b25b      	sxtb	r3, r3
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d103      	bne.n	8003000 <xQueueGenericSend+0x16c>
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003006:	b25b      	sxtb	r3, r3
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d103      	bne.n	8003016 <xQueueGenericSend+0x182>
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003016:	f002 f8f5 	bl	8005204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800301a:	1d3a      	adds	r2, r7, #4
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f001 f922 	bl	800426c <xTaskCheckForTimeOut>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d124      	bne.n	8003078 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800302e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003030:	f000 fc50 	bl	80038d4 <prvIsQueueFull>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d018      	beq.n	800306c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	3310      	adds	r3, #16
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f001 f84a 	bl	80040dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800304a:	f000 fbdb 	bl	8003804 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800304e:	f000 fe85 	bl	8003d5c <xTaskResumeAll>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	f47f af7c 	bne.w	8002f52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <xQueueGenericSend+0x1f8>)
 800305c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	e772      	b.n	8002f52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800306c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800306e:	f000 fbc9 	bl	8003804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003072:	f000 fe73 	bl	8003d5c <xTaskResumeAll>
 8003076:	e76c      	b.n	8002f52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800307a:	f000 fbc3 	bl	8003804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800307e:	f000 fe6d 	bl	8003d5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003082:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003084:	4618      	mov	r0, r3
 8003086:	3738      	adds	r7, #56	; 0x38
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	e000ed04 	.word	0xe000ed04

08003090 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08e      	sub	sp, #56	; 0x38
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10a      	bne.n	80030be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80030a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80030ba:	bf00      	nop
 80030bc:	e7fe      	b.n	80030bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d103      	bne.n	80030cc <xQueueGenericSendFromISR+0x3c>
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <xQueueGenericSendFromISR+0x40>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <xQueueGenericSendFromISR+0x42>
 80030d0:	2300      	movs	r3, #0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	623b      	str	r3, [r7, #32]
}
 80030e8:	bf00      	nop
 80030ea:	e7fe      	b.n	80030ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d103      	bne.n	80030fa <xQueueGenericSendFromISR+0x6a>
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <xQueueGenericSendFromISR+0x6e>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <xQueueGenericSendFromISR+0x70>
 80030fe:	2300      	movs	r3, #0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	61fb      	str	r3, [r7, #28]
}
 8003116:	bf00      	nop
 8003118:	e7fe      	b.n	8003118 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800311a:	f002 f925 	bl	8005368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800311e:	f3ef 8211 	mrs	r2, BASEPRI
 8003122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003126:	f383 8811 	msr	BASEPRI, r3
 800312a:	f3bf 8f6f 	isb	sy
 800312e:	f3bf 8f4f 	dsb	sy
 8003132:	61ba      	str	r2, [r7, #24]
 8003134:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003136:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	429a      	cmp	r2, r3
 8003144:	d302      	bcc.n	800314c <xQueueGenericSendFromISR+0xbc>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d12c      	bne.n	80031a6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800315c:	f000 fac2 	bl	80036e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003160:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d112      	bne.n	8003190 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	d016      	beq.n	80031a0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	3324      	adds	r3, #36	; 0x24
 8003176:	4618      	mov	r0, r3
 8003178:	f001 f800 	bl	800417c <xTaskRemoveFromEventList>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00e      	beq.n	80031a0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e007      	b.n	80031a0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003190:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003194:	3301      	adds	r3, #1
 8003196:	b2db      	uxtb	r3, r3
 8003198:	b25a      	sxtb	r2, r3
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031a0:	2301      	movs	r3, #1
 80031a2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80031a4:	e001      	b.n	80031aa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	637b      	str	r3, [r7, #52]	; 0x34
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3738      	adds	r7, #56	; 0x38
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08e      	sub	sp, #56	; 0x38
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <xQueueGiveFromISR+0x2a>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	623b      	str	r3, [r7, #32]
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <xQueueGiveFromISR+0x48>
	__asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	61fb      	str	r3, [r7, #28]
}
 8003204:	bf00      	nop
 8003206:	e7fe      	b.n	8003206 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d103      	bne.n	8003218 <xQueueGiveFromISR+0x58>
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <xQueueGiveFromISR+0x5c>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <xQueueGiveFromISR+0x5e>
 800321c:	2300      	movs	r3, #0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	61bb      	str	r3, [r7, #24]
}
 8003234:	bf00      	nop
 8003236:	e7fe      	b.n	8003236 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003238:	f002 f896 	bl	8005368 <vPortValidateInterruptPriority>
	__asm volatile
 800323c:	f3ef 8211 	mrs	r2, BASEPRI
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	617a      	str	r2, [r7, #20]
 8003252:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003254:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003264:	429a      	cmp	r2, r3
 8003266:	d22b      	bcs.n	80032c0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800326e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800327a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	d112      	bne.n	80032aa <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	2b00      	cmp	r3, #0
 800328a:	d016      	beq.n	80032ba <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	3324      	adds	r3, #36	; 0x24
 8003290:	4618      	mov	r0, r3
 8003292:	f000 ff73 	bl	800417c <xTaskRemoveFromEventList>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	e007      	b.n	80032ba <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032ae:	3301      	adds	r3, #1
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	b25a      	sxtb	r2, r3
 80032b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032ba:	2301      	movs	r3, #1
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
 80032be:	e001      	b.n	80032c4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	637b      	str	r3, [r7, #52]	; 0x34
 80032c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f383 8811 	msr	BASEPRI, r3
}
 80032ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3738      	adds	r7, #56	; 0x38
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08c      	sub	sp, #48	; 0x30
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <xQueueReceive+0x30>
	__asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	623b      	str	r3, [r7, #32]
}
 8003308:	bf00      	nop
 800330a:	e7fe      	b.n	800330a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d103      	bne.n	800331a <xQueueReceive+0x3e>
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <xQueueReceive+0x42>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <xQueueReceive+0x44>
 800331e:	2300      	movs	r3, #0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <xQueueReceive+0x5e>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	61fb      	str	r3, [r7, #28]
}
 8003336:	bf00      	nop
 8003338:	e7fe      	b.n	8003338 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800333a:	f001 f8bb 	bl	80044b4 <xTaskGetSchedulerState>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d102      	bne.n	800334a <xQueueReceive+0x6e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <xQueueReceive+0x72>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <xQueueReceive+0x74>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <xQueueReceive+0x8e>
	__asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	61bb      	str	r3, [r7, #24]
}
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800336a:	f001 ff1b 	bl	80051a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003372:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01f      	beq.n	80033ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800337e:	f000 fa1b 	bl	80037b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	1e5a      	subs	r2, r3, #1
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800338a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00f      	beq.n	80033b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	3310      	adds	r3, #16
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fef0 	bl	800417c <xTaskRemoveFromEventList>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033a2:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <xQueueReceive+0x1bc>)
 80033a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033b2:	f001 ff27 	bl	8005204 <vPortExitCritical>
				return pdPASS;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e069      	b.n	800348e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d103      	bne.n	80033c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033c0:	f001 ff20 	bl	8005204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033c4:	2300      	movs	r3, #0
 80033c6:	e062      	b.n	800348e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033ce:	f107 0310 	add.w	r3, r7, #16
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 ff34 	bl	8004240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033d8:	2301      	movs	r3, #1
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033dc:	f001 ff12 	bl	8005204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033e0:	f000 fcae 	bl	8003d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033e4:	f001 fede 	bl	80051a4 <vPortEnterCritical>
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ee:	b25b      	sxtb	r3, r3
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f4:	d103      	bne.n	80033fe <xQueueReceive+0x122>
 80033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003400:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003404:	b25b      	sxtb	r3, r3
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d103      	bne.n	8003414 <xQueueReceive+0x138>
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003414:	f001 fef6 	bl	8005204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003418:	1d3a      	adds	r2, r7, #4
 800341a:	f107 0310 	add.w	r3, r7, #16
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f000 ff23 	bl	800426c <xTaskCheckForTimeOut>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d123      	bne.n	8003474 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800342c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800342e:	f000 fa3b 	bl	80038a8 <prvIsQueueEmpty>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d017      	beq.n	8003468 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	3324      	adds	r3, #36	; 0x24
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fe4b 	bl	80040dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003448:	f000 f9dc 	bl	8003804 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800344c:	f000 fc86 	bl	8003d5c <xTaskResumeAll>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d189      	bne.n	800336a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <xQueueReceive+0x1bc>)
 8003458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	e780      	b.n	800336a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800346a:	f000 f9cb 	bl	8003804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800346e:	f000 fc75 	bl	8003d5c <xTaskResumeAll>
 8003472:	e77a      	b.n	800336a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003476:	f000 f9c5 	bl	8003804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800347a:	f000 fc6f 	bl	8003d5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800347e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003480:	f000 fa12 	bl	80038a8 <prvIsQueueEmpty>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	f43f af6f 	beq.w	800336a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800348c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800348e:	4618      	mov	r0, r3
 8003490:	3730      	adds	r7, #48	; 0x30
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000ed04 	.word	0xe000ed04

0800349c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08e      	sub	sp, #56	; 0x38
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <xQueueSemaphoreTake+0x32>
	__asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	623b      	str	r3, [r7, #32]
}
 80034ca:	bf00      	nop
 80034cc:	e7fe      	b.n	80034cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <xQueueSemaphoreTake+0x50>
	__asm volatile
 80034d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034da:	f383 8811 	msr	BASEPRI, r3
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	61fb      	str	r3, [r7, #28]
}
 80034e8:	bf00      	nop
 80034ea:	e7fe      	b.n	80034ea <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ec:	f000 ffe2 	bl	80044b4 <xTaskGetSchedulerState>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <xQueueSemaphoreTake+0x60>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <xQueueSemaphoreTake+0x64>
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <xQueueSemaphoreTake+0x66>
 8003500:	2300      	movs	r3, #0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10a      	bne.n	800351c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	61bb      	str	r3, [r7, #24]
}
 8003518:	bf00      	nop
 800351a:	e7fe      	b.n	800351a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800351c:	f001 fe42 	bl	80051a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	2b00      	cmp	r3, #0
 800352a:	d024      	beq.n	8003576 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800352c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352e:	1e5a      	subs	r2, r3, #1
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d104      	bne.n	8003546 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800353c:	f001 f978 	bl	8004830 <pvTaskIncrementMutexHeldCount>
 8003540:	4602      	mov	r2, r0
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00f      	beq.n	800356e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003550:	3310      	adds	r3, #16
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fe12 	bl	800417c <xTaskRemoveFromEventList>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800355e:	4b54      	ldr	r3, [pc, #336]	; (80036b0 <xQueueSemaphoreTake+0x214>)
 8003560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800356e:	f001 fe49 	bl	8005204 <vPortExitCritical>
				return pdPASS;
 8003572:	2301      	movs	r3, #1
 8003574:	e097      	b.n	80036a6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d111      	bne.n	80035a0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	617b      	str	r3, [r7, #20]
}
 8003594:	bf00      	nop
 8003596:	e7fe      	b.n	8003596 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003598:	f001 fe34 	bl	8005204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800359c:	2300      	movs	r3, #0
 800359e:	e082      	b.n	80036a6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035a6:	f107 030c 	add.w	r3, r7, #12
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fe48 	bl	8004240 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035b4:	f001 fe26 	bl	8005204 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035b8:	f000 fbc2 	bl	8003d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035bc:	f001 fdf2 	bl	80051a4 <vPortEnterCritical>
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035c6:	b25b      	sxtb	r3, r3
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d103      	bne.n	80035d6 <xQueueSemaphoreTake+0x13a>
 80035ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035dc:	b25b      	sxtb	r3, r3
 80035de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e2:	d103      	bne.n	80035ec <xQueueSemaphoreTake+0x150>
 80035e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035ec:	f001 fe0a 	bl	8005204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035f0:	463a      	mov	r2, r7
 80035f2:	f107 030c 	add.w	r3, r7, #12
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fe37 	bl	800426c <xTaskCheckForTimeOut>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d132      	bne.n	800366a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003604:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003606:	f000 f94f 	bl	80038a8 <prvIsQueueEmpty>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d026      	beq.n	800365e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003618:	f001 fdc4 	bl	80051a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 ff65 	bl	80044f0 <xTaskPriorityInherit>
 8003626:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003628:	f001 fdec 	bl	8005204 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	3324      	adds	r3, #36	; 0x24
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fd51 	bl	80040dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800363a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800363c:	f000 f8e2 	bl	8003804 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003640:	f000 fb8c 	bl	8003d5c <xTaskResumeAll>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	f47f af68 	bne.w	800351c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800364c:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <xQueueSemaphoreTake+0x214>)
 800364e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	e75e      	b.n	800351c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800365e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003660:	f000 f8d0 	bl	8003804 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003664:	f000 fb7a 	bl	8003d5c <xTaskResumeAll>
 8003668:	e758      	b.n	800351c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800366a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800366c:	f000 f8ca 	bl	8003804 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003670:	f000 fb74 	bl	8003d5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003676:	f000 f917 	bl	80038a8 <prvIsQueueEmpty>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	f43f af4d 	beq.w	800351c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00d      	beq.n	80036a4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003688:	f001 fd8c 	bl	80051a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800368c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800368e:	f000 f811 	bl	80036b4 <prvGetDisinheritPriorityAfterTimeout>
 8003692:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800369a:	4618      	mov	r0, r3
 800369c:	f001 f82e 	bl	80046fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80036a0:	f001 fdb0 	bl	8005204 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3738      	adds	r7, #56	; 0x38
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	e000ed04 	.word	0xe000ed04

080036b4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d006      	beq.n	80036d2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f1c3 0305 	rsb	r3, r3, #5
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	e001      	b.n	80036d6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036d6:	68fb      	ldr	r3, [r7, #12]
	}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10d      	bne.n	800371e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d14d      	bne.n	80037a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 ff6e 	bl	80045f0 <xTaskPriorityDisinherit>
 8003714:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	e043      	b.n	80037a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d119      	bne.n	8003758 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6858      	ldr	r0, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	461a      	mov	r2, r3
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	f002 f858 	bl	80057e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	441a      	add	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	429a      	cmp	r2, r3
 800374c:	d32b      	bcc.n	80037a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	e026      	b.n	80037a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	68d8      	ldr	r0, [r3, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	461a      	mov	r2, r3
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	f002 f83e 	bl	80057e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	425b      	negs	r3, r3
 8003772:	441a      	add	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d207      	bcs.n	8003794 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	425b      	negs	r3, r3
 800378e:	441a      	add	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d105      	bne.n	80037a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037ae:	697b      	ldr	r3, [r7, #20]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d018      	beq.n	80037fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	441a      	add	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d303      	bcc.n	80037ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68d9      	ldr	r1, [r3, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	461a      	mov	r2, r3
 80037f6:	6838      	ldr	r0, [r7, #0]
 80037f8:	f001 fff4 	bl	80057e4 <memcpy>
	}
}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800380c:	f001 fcca 	bl	80051a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003816:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003818:	e011      	b.n	800383e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b00      	cmp	r3, #0
 8003820:	d012      	beq.n	8003848 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3324      	adds	r3, #36	; 0x24
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fca8 	bl	800417c <xTaskRemoveFromEventList>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003832:	f000 fd7d 	bl	8004330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	3b01      	subs	r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800383e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	dce9      	bgt.n	800381a <prvUnlockQueue+0x16>
 8003846:	e000      	b.n	800384a <prvUnlockQueue+0x46>
					break;
 8003848:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	22ff      	movs	r2, #255	; 0xff
 800384e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003852:	f001 fcd7 	bl	8005204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003856:	f001 fca5 	bl	80051a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003860:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003862:	e011      	b.n	8003888 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d012      	beq.n	8003892 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3310      	adds	r3, #16
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fc83 	bl	800417c <xTaskRemoveFromEventList>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800387c:	f000 fd58 	bl	8004330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003880:	7bbb      	ldrb	r3, [r7, #14]
 8003882:	3b01      	subs	r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003888:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800388c:	2b00      	cmp	r3, #0
 800388e:	dce9      	bgt.n	8003864 <prvUnlockQueue+0x60>
 8003890:	e000      	b.n	8003894 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003892:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	22ff      	movs	r2, #255	; 0xff
 8003898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800389c:	f001 fcb2 	bl	8005204 <vPortExitCritical>
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038b0:	f001 fc78 	bl	80051a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038bc:	2301      	movs	r3, #1
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	e001      	b.n	80038c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038c6:	f001 fc9d 	bl	8005204 <vPortExitCritical>

	return xReturn;
 80038ca:	68fb      	ldr	r3, [r7, #12]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038dc:	f001 fc62 	bl	80051a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d102      	bne.n	80038f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038ec:	2301      	movs	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e001      	b.n	80038f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038f6:	f001 fc85 	bl	8005204 <vPortExitCritical>

	return xReturn;
 80038fa:	68fb      	ldr	r3, [r7, #12]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e014      	b.n	800393e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003914:	4a0f      	ldr	r2, [pc, #60]	; (8003954 <vQueueAddToRegistry+0x50>)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10b      	bne.n	8003938 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003920:	490c      	ldr	r1, [pc, #48]	; (8003954 <vQueueAddToRegistry+0x50>)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800392a:	4a0a      	ldr	r2, [pc, #40]	; (8003954 <vQueueAddToRegistry+0x50>)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003936:	e006      	b.n	8003946 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	3301      	adds	r3, #1
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b07      	cmp	r3, #7
 8003942:	d9e7      	bls.n	8003914 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003944:	bf00      	nop
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20012e38 	.word	0x20012e38

08003958 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003968:	f001 fc1c 	bl	80051a4 <vPortEnterCritical>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003972:	b25b      	sxtb	r3, r3
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d103      	bne.n	8003982 <vQueueWaitForMessageRestricted+0x2a>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003988:	b25b      	sxtb	r3, r3
 800398a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398e:	d103      	bne.n	8003998 <vQueueWaitForMessageRestricted+0x40>
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003998:	f001 fc34 	bl	8005204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d106      	bne.n	80039b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	3324      	adds	r3, #36	; 0x24
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68b9      	ldr	r1, [r7, #8]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fbb9 	bl	8004124 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039b2:	6978      	ldr	r0, [r7, #20]
 80039b4:	f7ff ff26 	bl	8003804 <prvUnlockQueue>
	}
 80039b8:	bf00      	nop
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08c      	sub	sp, #48	; 0x30
 80039c4:	af04      	add	r7, sp, #16
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 fd07 	bl	80053e8 <pvPortMalloc>
 80039da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00e      	beq.n	8003a00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039e2:	2058      	movs	r0, #88	; 0x58
 80039e4:	f001 fd00 	bl	80053e8 <pvPortMalloc>
 80039e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
 80039f6:	e005      	b.n	8003a04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039f8:	6978      	ldr	r0, [r7, #20]
 80039fa:	f001 fdb9 	bl	8005570 <vPortFree>
 80039fe:	e001      	b.n	8003a04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d013      	beq.n	8003a32 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9303      	str	r3, [sp, #12]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	9302      	str	r3, [sp, #8]
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f80e 	bl	8003a42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a26:	69f8      	ldr	r0, [r7, #28]
 8003a28:	f000 f89a 	bl	8003b60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	e002      	b.n	8003a38 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295
 8003a36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a38:	69bb      	ldr	r3, [r7, #24]
	}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b088      	sub	sp, #32
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	461a      	mov	r2, r3
 8003a5a:	21a5      	movs	r1, #165	; 0xa5
 8003a5c:	f001 fed0 	bl	8005800 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f023 0307 	bic.w	r3, r3, #7
 8003a78:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <prvInitialiseNewTask+0x58>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	617b      	str	r3, [r7, #20]
}
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01f      	beq.n	8003ae0 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	e012      	b.n	8003acc <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	4413      	add	r3, r2
 8003aac:	7819      	ldrb	r1, [r3, #0]
 8003aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3334      	adds	r3, #52	; 0x34
 8003ab6:	460a      	mov	r2, r1
 8003ab8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	4413      	add	r3, r2
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d006      	beq.n	8003ad4 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	d9e9      	bls.n	8003aa6 <prvInitialiseNewTask+0x64>
 8003ad2:	e000      	b.n	8003ad6 <prvInitialiseNewTask+0x94>
			{
				break;
 8003ad4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003ade:	e003      	b.n	8003ae8 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d901      	bls.n	8003af2 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003aee:	2304      	movs	r3, #4
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003afc:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	2200      	movs	r2, #0
 8003b02:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	3304      	adds	r3, #4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff f867 	bl	8002bdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	3318      	adds	r3, #24
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff f862 	bl	8002bdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	f1c3 0205 	rsb	r2, r3, #5
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	2200      	movs	r2, #0
 8003b32:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	68f9      	ldr	r1, [r7, #12]
 8003b40:	69b8      	ldr	r0, [r7, #24]
 8003b42:	f001 fa01 	bl	8004f48 <pxPortInitialiseStack>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b58:	bf00      	nop
 8003b5a:	3720      	adds	r7, #32
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b68:	f001 fb1c 	bl	80051a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b6c:	4b2c      	ldr	r3, [pc, #176]	; (8003c20 <prvAddNewTaskToReadyList+0xc0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	4a2b      	ldr	r2, [pc, #172]	; (8003c20 <prvAddNewTaskToReadyList+0xc0>)
 8003b74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b76:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <prvAddNewTaskToReadyList+0xc4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b7e:	4a29      	ldr	r2, [pc, #164]	; (8003c24 <prvAddNewTaskToReadyList+0xc4>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b84:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <prvAddNewTaskToReadyList+0xc0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d110      	bne.n	8003bae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b8c:	f000 fbf4 	bl	8004378 <prvInitialiseTaskLists>
 8003b90:	e00d      	b.n	8003bae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b92:	4b25      	ldr	r3, [pc, #148]	; (8003c28 <prvAddNewTaskToReadyList+0xc8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b9a:	4b22      	ldr	r3, [pc, #136]	; (8003c24 <prvAddNewTaskToReadyList+0xc4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d802      	bhi.n	8003bae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ba8:	4a1e      	ldr	r2, [pc, #120]	; (8003c24 <prvAddNewTaskToReadyList+0xc4>)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bae:	4b1f      	ldr	r3, [pc, #124]	; (8003c2c <prvAddNewTaskToReadyList+0xcc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <prvAddNewTaskToReadyList+0xcc>)
 8003bb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bb8:	4b1c      	ldr	r3, [pc, #112]	; (8003c2c <prvAddNewTaskToReadyList+0xcc>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	4b19      	ldr	r3, [pc, #100]	; (8003c30 <prvAddNewTaskToReadyList+0xd0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <prvAddNewTaskToReadyList+0xd0>)
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <prvAddNewTaskToReadyList+0xd4>)
 8003be0:	441a      	add	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3304      	adds	r3, #4
 8003be6:	4619      	mov	r1, r3
 8003be8:	4610      	mov	r0, r2
 8003bea:	f7ff f804 	bl	8002bf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bee:	f001 fb09 	bl	8005204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <prvAddNewTaskToReadyList+0xc8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00e      	beq.n	8003c18 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <prvAddNewTaskToReadyList+0xc4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d207      	bcs.n	8003c18 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <prvAddNewTaskToReadyList+0xd8>)
 8003c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000104 	.word	0x20000104
 8003c24:	2000002c 	.word	0x2000002c
 8003c28:	20000110 	.word	0x20000110
 8003c2c:	20000120 	.word	0x20000120
 8003c30:	2000010c 	.word	0x2000010c
 8003c34:	20000030 	.word	0x20000030
 8003c38:	e000ed04 	.word	0xe000ed04

08003c3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d017      	beq.n	8003c7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c4e:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <vTaskDelay+0x60>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <vTaskDelay+0x30>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60bb      	str	r3, [r7, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c6c:	f000 f868 	bl	8003d40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c70:	2100      	movs	r1, #0
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fdf0 	bl	8004858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c78:	f000 f870 	bl	8003d5c <xTaskResumeAll>
 8003c7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d107      	bne.n	8003c94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <vTaskDelay+0x64>)
 8003c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	2000012c 	.word	0x2000012c
 8003ca0:	e000ed04 	.word	0xe000ed04

08003ca4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003caa:	4b1f      	ldr	r3, [pc, #124]	; (8003d28 <vTaskStartScheduler+0x84>)
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2282      	movs	r2, #130	; 0x82
 8003cb6:	491d      	ldr	r1, [pc, #116]	; (8003d2c <vTaskStartScheduler+0x88>)
 8003cb8:	481d      	ldr	r0, [pc, #116]	; (8003d30 <vTaskStartScheduler+0x8c>)
 8003cba:	f7ff fe81 	bl	80039c0 <xTaskCreate>
 8003cbe:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003cc6:	f000 fe2d 	bl	8004924 <xTimerCreateTimerTask>
 8003cca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d116      	bne.n	8003d00 <vTaskStartScheduler+0x5c>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	60bb      	str	r3, [r7, #8]
}
 8003ce4:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ce6:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <vTaskStartScheduler+0x90>)
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cee:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <vTaskStartScheduler+0x94>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <vTaskStartScheduler+0x98>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cfa:	f001 f9b1 	bl	8005060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cfe:	e00e      	b.n	8003d1e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d06:	d10a      	bne.n	8003d1e <vTaskStartScheduler+0x7a>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	607b      	str	r3, [r7, #4]
}
 8003d1a:	bf00      	nop
 8003d1c:	e7fe      	b.n	8003d1c <vTaskStartScheduler+0x78>
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000128 	.word	0x20000128
 8003d2c:	08005848 	.word	0x08005848
 8003d30:	08004349 	.word	0x08004349
 8003d34:	20000124 	.word	0x20000124
 8003d38:	20000110 	.word	0x20000110
 8003d3c:	20000108 	.word	0x20000108

08003d40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <vTaskSuspendAll+0x18>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	4a03      	ldr	r2, [pc, #12]	; (8003d58 <vTaskSuspendAll+0x18>)
 8003d4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003d4e:	bf00      	nop
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	2000012c 	.word	0x2000012c

08003d5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d6a:	4b41      	ldr	r3, [pc, #260]	; (8003e70 <xTaskResumeAll+0x114>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <xTaskResumeAll+0x2c>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	603b      	str	r3, [r7, #0]
}
 8003d84:	bf00      	nop
 8003d86:	e7fe      	b.n	8003d86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d88:	f001 fa0c 	bl	80051a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d8c:	4b38      	ldr	r3, [pc, #224]	; (8003e70 <xTaskResumeAll+0x114>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3b01      	subs	r3, #1
 8003d92:	4a37      	ldr	r2, [pc, #220]	; (8003e70 <xTaskResumeAll+0x114>)
 8003d94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d96:	4b36      	ldr	r3, [pc, #216]	; (8003e70 <xTaskResumeAll+0x114>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d161      	bne.n	8003e62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d9e:	4b35      	ldr	r3, [pc, #212]	; (8003e74 <xTaskResumeAll+0x118>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d05d      	beq.n	8003e62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003da6:	e02e      	b.n	8003e06 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003da8:	4b33      	ldr	r3, [pc, #204]	; (8003e78 <xTaskResumeAll+0x11c>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3318      	adds	r3, #24
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe ff7b 	bl	8002cb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fe ff76 	bl	8002cb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	2201      	movs	r2, #1
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <xTaskResumeAll+0x120>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	4a2a      	ldr	r2, [pc, #168]	; (8003e7c <xTaskResumeAll+0x120>)
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4a27      	ldr	r2, [pc, #156]	; (8003e80 <xTaskResumeAll+0x124>)
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3304      	adds	r3, #4
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f7fe ff02 	bl	8002bf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df6:	4b23      	ldr	r3, [pc, #140]	; (8003e84 <xTaskResumeAll+0x128>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d302      	bcc.n	8003e06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e00:	4b21      	ldr	r3, [pc, #132]	; (8003e88 <xTaskResumeAll+0x12c>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e06:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <xTaskResumeAll+0x11c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1cc      	bne.n	8003da8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e14:	f000 fb2e 	bl	8004474 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e18:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <xTaskResumeAll+0x130>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d010      	beq.n	8003e46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e24:	f000 f846 	bl	8003eb4 <xTaskIncrementTick>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e2e:	4b16      	ldr	r3, [pc, #88]	; (8003e88 <xTaskResumeAll+0x12c>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f1      	bne.n	8003e24 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003e40:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <xTaskResumeAll+0x130>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <xTaskResumeAll+0x12c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e52:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <xTaskResumeAll+0x134>)
 8003e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e62:	f001 f9cf 	bl	8005204 <vPortExitCritical>

	return xAlreadyYielded;
 8003e66:	68bb      	ldr	r3, [r7, #8]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	2000012c 	.word	0x2000012c
 8003e74:	20000104 	.word	0x20000104
 8003e78:	200000c4 	.word	0x200000c4
 8003e7c:	2000010c 	.word	0x2000010c
 8003e80:	20000030 	.word	0x20000030
 8003e84:	2000002c 	.word	0x2000002c
 8003e88:	20000118 	.word	0x20000118
 8003e8c:	20000114 	.word	0x20000114
 8003e90:	e000ed04 	.word	0xe000ed04

08003e94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <xTaskGetTickCount+0x1c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ea0:	687b      	ldr	r3, [r7, #4]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	20000108 	.word	0x20000108

08003eb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ebe:	4b4e      	ldr	r3, [pc, #312]	; (8003ff8 <xTaskIncrementTick+0x144>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 8088 	bne.w	8003fd8 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ec8:	4b4c      	ldr	r3, [pc, #304]	; (8003ffc <xTaskIncrementTick+0x148>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ed0:	4a4a      	ldr	r2, [pc, #296]	; (8003ffc <xTaskIncrementTick+0x148>)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d120      	bne.n	8003f1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003edc:	4b48      	ldr	r3, [pc, #288]	; (8004000 <xTaskIncrementTick+0x14c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <xTaskIncrementTick+0x48>
	__asm volatile
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	603b      	str	r3, [r7, #0]
}
 8003ef8:	bf00      	nop
 8003efa:	e7fe      	b.n	8003efa <xTaskIncrementTick+0x46>
 8003efc:	4b40      	ldr	r3, [pc, #256]	; (8004000 <xTaskIncrementTick+0x14c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	4b40      	ldr	r3, [pc, #256]	; (8004004 <xTaskIncrementTick+0x150>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a3e      	ldr	r2, [pc, #248]	; (8004000 <xTaskIncrementTick+0x14c>)
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4a3e      	ldr	r2, [pc, #248]	; (8004004 <xTaskIncrementTick+0x150>)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	4b3d      	ldr	r3, [pc, #244]	; (8004008 <xTaskIncrementTick+0x154>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	4a3c      	ldr	r2, [pc, #240]	; (8004008 <xTaskIncrementTick+0x154>)
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	f000 faab 	bl	8004474 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f1e:	4b3b      	ldr	r3, [pc, #236]	; (800400c <xTaskIncrementTick+0x158>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d348      	bcc.n	8003fba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f28:	4b35      	ldr	r3, [pc, #212]	; (8004000 <xTaskIncrementTick+0x14c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f32:	4b36      	ldr	r3, [pc, #216]	; (800400c <xTaskIncrementTick+0x158>)
 8003f34:	f04f 32ff 	mov.w	r2, #4294967295
 8003f38:	601a      	str	r2, [r3, #0]
					break;
 8003f3a:	e03e      	b.n	8003fba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f3c:	4b30      	ldr	r3, [pc, #192]	; (8004000 <xTaskIncrementTick+0x14c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d203      	bcs.n	8003f5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f54:	4a2d      	ldr	r2, [pc, #180]	; (800400c <xTaskIncrementTick+0x158>)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f5a:	e02e      	b.n	8003fba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe fea5 	bl	8002cb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	3318      	adds	r3, #24
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fe9c 	bl	8002cb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	4b23      	ldr	r3, [pc, #140]	; (8004010 <xTaskIncrementTick+0x15c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	4a22      	ldr	r2, [pc, #136]	; (8004010 <xTaskIncrementTick+0x15c>)
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4a1f      	ldr	r2, [pc, #124]	; (8004014 <xTaskIncrementTick+0x160>)
 8003f98:	441a      	add	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f7fe fe28 	bl	8002bf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <xTaskIncrementTick+0x164>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d3b9      	bcc.n	8003f28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fb8:	e7b6      	b.n	8003f28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fba:	4b17      	ldr	r3, [pc, #92]	; (8004018 <xTaskIncrementTick+0x164>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc0:	4914      	ldr	r1, [pc, #80]	; (8004014 <xTaskIncrementTick+0x160>)
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d907      	bls.n	8003fe2 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e004      	b.n	8003fe2 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003fd8:	4b10      	ldr	r3, [pc, #64]	; (800401c <xTaskIncrementTick+0x168>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	4a0f      	ldr	r2, [pc, #60]	; (800401c <xTaskIncrementTick+0x168>)
 8003fe0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003fe2:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <xTaskIncrementTick+0x16c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003fea:	2301      	movs	r3, #1
 8003fec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003fee:	697b      	ldr	r3, [r7, #20]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	2000012c 	.word	0x2000012c
 8003ffc:	20000108 	.word	0x20000108
 8004000:	200000bc 	.word	0x200000bc
 8004004:	200000c0 	.word	0x200000c0
 8004008:	2000011c 	.word	0x2000011c
 800400c:	20000124 	.word	0x20000124
 8004010:	2000010c 	.word	0x2000010c
 8004014:	20000030 	.word	0x20000030
 8004018:	2000002c 	.word	0x2000002c
 800401c:	20000114 	.word	0x20000114
 8004020:	20000118 	.word	0x20000118

08004024 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800402a:	4b27      	ldr	r3, [pc, #156]	; (80040c8 <vTaskSwitchContext+0xa4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004032:	4b26      	ldr	r3, [pc, #152]	; (80040cc <vTaskSwitchContext+0xa8>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004038:	e03f      	b.n	80040ba <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <vTaskSwitchContext+0xa8>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004040:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <vTaskSwitchContext+0xac>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	fab3 f383 	clz	r3, r3
 800404c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800404e:	7afb      	ldrb	r3, [r7, #11]
 8004050:	f1c3 031f 	rsb	r3, r3, #31
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	491f      	ldr	r1, [pc, #124]	; (80040d4 <vTaskSwitchContext+0xb0>)
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4613      	mov	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <vTaskSwitchContext+0x5c>
	__asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	607b      	str	r3, [r7, #4]
}
 800407c:	bf00      	nop
 800407e:	e7fe      	b.n	800407e <vTaskSwitchContext+0x5a>
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4a12      	ldr	r2, [pc, #72]	; (80040d4 <vTaskSwitchContext+0xb0>)
 800408c:	4413      	add	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	3308      	adds	r3, #8
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d104      	bne.n	80040b0 <vTaskSwitchContext+0x8c>
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	4a08      	ldr	r2, [pc, #32]	; (80040d8 <vTaskSwitchContext+0xb4>)
 80040b8:	6013      	str	r3, [r2, #0]
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	2000012c 	.word	0x2000012c
 80040cc:	20000118 	.word	0x20000118
 80040d0:	2000010c 	.word	0x2000010c
 80040d4:	20000030 	.word	0x20000030
 80040d8:	2000002c 	.word	0x2000002c

080040dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10a      	bne.n	8004102 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	f383 8811 	msr	BASEPRI, r3
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	f3bf 8f4f 	dsb	sy
 80040fc:	60fb      	str	r3, [r7, #12]
}
 80040fe:	bf00      	nop
 8004100:	e7fe      	b.n	8004100 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <vTaskPlaceOnEventList+0x44>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3318      	adds	r3, #24
 8004108:	4619      	mov	r1, r3
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fe fd97 	bl	8002c3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004110:	2101      	movs	r1, #1
 8004112:	6838      	ldr	r0, [r7, #0]
 8004114:	f000 fba0 	bl	8004858 <prvAddCurrentTaskToDelayedList>
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	2000002c 	.word	0x2000002c

08004124 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	617b      	str	r3, [r7, #20]
}
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800414c:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <vTaskPlaceOnEventListRestricted+0x54>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3318      	adds	r3, #24
 8004152:	4619      	mov	r1, r3
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f7fe fd4e 	bl	8002bf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004160:	f04f 33ff 	mov.w	r3, #4294967295
 8004164:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	68b8      	ldr	r0, [r7, #8]
 800416a:	f000 fb75 	bl	8004858 <prvAddCurrentTaskToDelayedList>
	}
 800416e:	bf00      	nop
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	2000002c 	.word	0x2000002c

0800417c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	60fb      	str	r3, [r7, #12]
}
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	3318      	adds	r3, #24
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe fd7f 	bl	8002cb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041b2:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <xTaskRemoveFromEventList+0xac>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d11c      	bne.n	80041f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	3304      	adds	r3, #4
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fe fd76 	bl	8002cb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c8:	2201      	movs	r2, #1
 80041ca:	409a      	lsls	r2, r3
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <xTaskRemoveFromEventList+0xb0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	4a16      	ldr	r2, [pc, #88]	; (800422c <xTaskRemoveFromEventList+0xb0>)
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4a13      	ldr	r2, [pc, #76]	; (8004230 <xTaskRemoveFromEventList+0xb4>)
 80041e4:	441a      	add	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	3304      	adds	r3, #4
 80041ea:	4619      	mov	r1, r3
 80041ec:	4610      	mov	r0, r2
 80041ee:	f7fe fd02 	bl	8002bf6 <vListInsertEnd>
 80041f2:	e005      	b.n	8004200 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	3318      	adds	r3, #24
 80041f8:	4619      	mov	r1, r3
 80041fa:	480e      	ldr	r0, [pc, #56]	; (8004234 <xTaskRemoveFromEventList+0xb8>)
 80041fc:	f7fe fcfb 	bl	8002bf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004204:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <xTaskRemoveFromEventList+0xbc>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420a:	429a      	cmp	r2, r3
 800420c:	d905      	bls.n	800421a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800420e:	2301      	movs	r3, #1
 8004210:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <xTaskRemoveFromEventList+0xc0>)
 8004214:	2201      	movs	r2, #1
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	e001      	b.n	800421e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800421e:	697b      	ldr	r3, [r7, #20]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	2000012c 	.word	0x2000012c
 800422c:	2000010c 	.word	0x2000010c
 8004230:	20000030 	.word	0x20000030
 8004234:	200000c4 	.word	0x200000c4
 8004238:	2000002c 	.word	0x2000002c
 800423c:	20000118 	.word	0x20000118

08004240 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <vTaskInternalSetTimeOutState+0x24>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004250:	4b05      	ldr	r3, [pc, #20]	; (8004268 <vTaskInternalSetTimeOutState+0x28>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	605a      	str	r2, [r3, #4]
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	2000011c 	.word	0x2000011c
 8004268:	20000108 	.word	0x20000108

0800426c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10a      	bne.n	8004292 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	613b      	str	r3, [r7, #16]
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	60fb      	str	r3, [r7, #12]
}
 80042aa:	bf00      	nop
 80042ac:	e7fe      	b.n	80042ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80042ae:	f000 ff79 	bl	80051a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <xTaskCheckForTimeOut+0xbc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d102      	bne.n	80042d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	e023      	b.n	800431a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4b15      	ldr	r3, [pc, #84]	; (800432c <xTaskCheckForTimeOut+0xc0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d007      	beq.n	80042ee <xTaskCheckForTimeOut+0x82>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d302      	bcc.n	80042ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042e8:	2301      	movs	r3, #1
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	e015      	b.n	800431a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d20b      	bcs.n	8004310 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	1ad2      	subs	r2, r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff ff9b 	bl	8004240 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	e004      	b.n	800431a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004316:	2301      	movs	r3, #1
 8004318:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800431a:	f000 ff73 	bl	8005204 <vPortExitCritical>

	return xReturn;
 800431e:	69fb      	ldr	r3, [r7, #28]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3720      	adds	r7, #32
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	20000108 	.word	0x20000108
 800432c:	2000011c 	.word	0x2000011c

08004330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004334:	4b03      	ldr	r3, [pc, #12]	; (8004344 <vTaskMissedYield+0x14>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]
}
 800433a:	bf00      	nop
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	20000118 	.word	0x20000118

08004348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004350:	f000 f852 	bl	80043f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <prvIdleTask+0x28>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d9f9      	bls.n	8004350 <prvIdleTask+0x8>
			{
				taskYIELD();
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <prvIdleTask+0x2c>)
 800435e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800436c:	e7f0      	b.n	8004350 <prvIdleTask+0x8>
 800436e:	bf00      	nop
 8004370:	20000030 	.word	0x20000030
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800437e:	2300      	movs	r3, #0
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	e00c      	b.n	800439e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <prvInitialiseTaskLists+0x60>)
 8004390:	4413      	add	r3, r2
 8004392:	4618      	mov	r0, r3
 8004394:	f7fe fc02 	bl	8002b9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3301      	adds	r3, #1
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d9ef      	bls.n	8004384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043a4:	480d      	ldr	r0, [pc, #52]	; (80043dc <prvInitialiseTaskLists+0x64>)
 80043a6:	f7fe fbf9 	bl	8002b9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043aa:	480d      	ldr	r0, [pc, #52]	; (80043e0 <prvInitialiseTaskLists+0x68>)
 80043ac:	f7fe fbf6 	bl	8002b9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043b0:	480c      	ldr	r0, [pc, #48]	; (80043e4 <prvInitialiseTaskLists+0x6c>)
 80043b2:	f7fe fbf3 	bl	8002b9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043b6:	480c      	ldr	r0, [pc, #48]	; (80043e8 <prvInitialiseTaskLists+0x70>)
 80043b8:	f7fe fbf0 	bl	8002b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043bc:	480b      	ldr	r0, [pc, #44]	; (80043ec <prvInitialiseTaskLists+0x74>)
 80043be:	f7fe fbed 	bl	8002b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043c2:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <prvInitialiseTaskLists+0x78>)
 80043c4:	4a05      	ldr	r2, [pc, #20]	; (80043dc <prvInitialiseTaskLists+0x64>)
 80043c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <prvInitialiseTaskLists+0x7c>)
 80043ca:	4a05      	ldr	r2, [pc, #20]	; (80043e0 <prvInitialiseTaskLists+0x68>)
 80043cc:	601a      	str	r2, [r3, #0]
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000030 	.word	0x20000030
 80043dc:	20000094 	.word	0x20000094
 80043e0:	200000a8 	.word	0x200000a8
 80043e4:	200000c4 	.word	0x200000c4
 80043e8:	200000d8 	.word	0x200000d8
 80043ec:	200000f0 	.word	0x200000f0
 80043f0:	200000bc 	.word	0x200000bc
 80043f4:	200000c0 	.word	0x200000c0

080043f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043fe:	e019      	b.n	8004434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004400:	f000 fed0 	bl	80051a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004404:	4b10      	ldr	r3, [pc, #64]	; (8004448 <prvCheckTasksWaitingTermination+0x50>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe fc4d 	bl	8002cb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004416:	4b0d      	ldr	r3, [pc, #52]	; (800444c <prvCheckTasksWaitingTermination+0x54>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3b01      	subs	r3, #1
 800441c:	4a0b      	ldr	r2, [pc, #44]	; (800444c <prvCheckTasksWaitingTermination+0x54>)
 800441e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <prvCheckTasksWaitingTermination+0x58>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3b01      	subs	r3, #1
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <prvCheckTasksWaitingTermination+0x58>)
 8004428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800442a:	f000 feeb 	bl	8005204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f810 	bl	8004454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004434:	4b06      	ldr	r3, [pc, #24]	; (8004450 <prvCheckTasksWaitingTermination+0x58>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e1      	bne.n	8004400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	200000d8 	.word	0x200000d8
 800444c:	20000104 	.word	0x20000104
 8004450:	200000ec 	.word	0x200000ec

08004454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	4618      	mov	r0, r3
 8004462:	f001 f885 	bl	8005570 <vPortFree>
			vPortFree( pxTCB );
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f001 f882 	bl	8005570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800446c:	bf00      	nop
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800447a:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <prvResetNextTaskUnblockTime+0x38>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004484:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <prvResetNextTaskUnblockTime+0x3c>)
 8004486:	f04f 32ff 	mov.w	r2, #4294967295
 800448a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800448c:	e008      	b.n	80044a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448e:	4b07      	ldr	r3, [pc, #28]	; (80044ac <prvResetNextTaskUnblockTime+0x38>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <prvResetNextTaskUnblockTime+0x3c>)
 800449e:	6013      	str	r3, [r2, #0]
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	200000bc 	.word	0x200000bc
 80044b0:	20000124 	.word	0x20000124

080044b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <xTaskGetSchedulerState+0x34>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044c2:	2301      	movs	r3, #1
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	e008      	b.n	80044da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044c8:	4b08      	ldr	r3, [pc, #32]	; (80044ec <xTaskGetSchedulerState+0x38>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d102      	bne.n	80044d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044d0:	2302      	movs	r3, #2
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	e001      	b.n	80044da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044d6:	2300      	movs	r3, #0
 80044d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044da:	687b      	ldr	r3, [r7, #4]
	}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	20000110 	.word	0x20000110
 80044ec:	2000012c 	.word	0x2000012c

080044f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d069      	beq.n	80045da <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450a:	4b36      	ldr	r3, [pc, #216]	; (80045e4 <xTaskPriorityInherit+0xf4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	429a      	cmp	r2, r3
 8004512:	d259      	bcs.n	80045c8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	db06      	blt.n	800452a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800451c:	4b31      	ldr	r3, [pc, #196]	; (80045e4 <xTaskPriorityInherit+0xf4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	f1c3 0205 	rsb	r2, r3, #5
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6959      	ldr	r1, [r3, #20]
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4a2b      	ldr	r2, [pc, #172]	; (80045e8 <xTaskPriorityInherit+0xf8>)
 800453c:	4413      	add	r3, r2
 800453e:	4299      	cmp	r1, r3
 8004540:	d13a      	bne.n	80045b8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	3304      	adds	r3, #4
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe fbb2 	bl	8002cb0 <uxListRemove>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d115      	bne.n	800457e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004556:	4924      	ldr	r1, [pc, #144]	; (80045e8 <xTaskPriorityInherit+0xf8>)
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <xTaskPriorityInherit+0x8e>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	2201      	movs	r2, #1
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43da      	mvns	r2, r3
 8004574:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <xTaskPriorityInherit+0xfc>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4013      	ands	r3, r2
 800457a:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <xTaskPriorityInherit+0xfc>)
 800457c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800457e:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <xTaskPriorityInherit+0xf4>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	2201      	movs	r2, #1
 800458e:	409a      	lsls	r2, r3
 8004590:	4b16      	ldr	r3, [pc, #88]	; (80045ec <xTaskPriorityInherit+0xfc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	4a15      	ldr	r2, [pc, #84]	; (80045ec <xTaskPriorityInherit+0xfc>)
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4a10      	ldr	r2, [pc, #64]	; (80045e8 <xTaskPriorityInherit+0xf8>)
 80045a8:	441a      	add	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3304      	adds	r3, #4
 80045ae:	4619      	mov	r1, r3
 80045b0:	4610      	mov	r0, r2
 80045b2:	f7fe fb20 	bl	8002bf6 <vListInsertEnd>
 80045b6:	e004      	b.n	80045c2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045b8:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <xTaskPriorityInherit+0xf4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80045c2:	2301      	movs	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
 80045c6:	e008      	b.n	80045da <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <xTaskPriorityInherit+0xf4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d201      	bcs.n	80045da <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80045d6:	2301      	movs	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045da:	68fb      	ldr	r3, [r7, #12]
	}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	2000002c 	.word	0x2000002c
 80045e8:	20000030 	.word	0x20000030
 80045ec:	2000010c 	.word	0x2000010c

080045f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d06e      	beq.n	80046e4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004606:	4b3a      	ldr	r3, [pc, #232]	; (80046f0 <xTaskPriorityDisinherit+0x100>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	429a      	cmp	r2, r3
 800460e:	d00a      	beq.n	8004626 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	60fb      	str	r3, [r7, #12]
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10a      	bne.n	8004644 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	60bb      	str	r3, [r7, #8]
}
 8004640:	bf00      	nop
 8004642:	e7fe      	b.n	8004642 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004648:	1e5a      	subs	r2, r3, #1
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004656:	429a      	cmp	r2, r3
 8004658:	d044      	beq.n	80046e4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d140      	bne.n	80046e4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	3304      	adds	r3, #4
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe fb22 	bl	8002cb0 <uxListRemove>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d115      	bne.n	800469e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004676:	491f      	ldr	r1, [pc, #124]	; (80046f4 <xTaskPriorityDisinherit+0x104>)
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <xTaskPriorityDisinherit+0xae>
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	2201      	movs	r2, #1
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43da      	mvns	r2, r3
 8004694:	4b18      	ldr	r3, [pc, #96]	; (80046f8 <xTaskPriorityDisinherit+0x108>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4013      	ands	r3, r2
 800469a:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <xTaskPriorityDisinherit+0x108>)
 800469c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	f1c3 0205 	rsb	r2, r3, #5
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	2201      	movs	r2, #1
 80046b8:	409a      	lsls	r2, r3
 80046ba:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <xTaskPriorityDisinherit+0x108>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4313      	orrs	r3, r2
 80046c0:	4a0d      	ldr	r2, [pc, #52]	; (80046f8 <xTaskPriorityDisinherit+0x108>)
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4a08      	ldr	r2, [pc, #32]	; (80046f4 <xTaskPriorityDisinherit+0x104>)
 80046d2:	441a      	add	r2, r3
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f7fe fa8b 	bl	8002bf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046e0:	2301      	movs	r3, #1
 80046e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046e4:	697b      	ldr	r3, [r7, #20]
	}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	2000002c 	.word	0x2000002c
 80046f4:	20000030 	.word	0x20000030
 80046f8:	2000010c 	.word	0x2000010c

080046fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800470a:	2301      	movs	r3, #1
 800470c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8083 	beq.w	800481c <vTaskPriorityDisinheritAfterTimeout+0x120>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	60fb      	str	r3, [r7, #12]
}
 8004730:	bf00      	nop
 8004732:	e7fe      	b.n	8004732 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d902      	bls.n	8004744 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	e002      	b.n	800474a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004748:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	69fa      	ldr	r2, [r7, #28]
 8004750:	429a      	cmp	r2, r3
 8004752:	d063      	beq.n	800481c <vTaskPriorityDisinheritAfterTimeout+0x120>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	429a      	cmp	r2, r3
 800475c:	d15e      	bne.n	800481c <vTaskPriorityDisinheritAfterTimeout+0x120>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800475e:	4b31      	ldr	r3, [pc, #196]	; (8004824 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	429a      	cmp	r2, r3
 8004766:	d10a      	bne.n	800477e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	60bb      	str	r3, [r7, #8]
}
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b00      	cmp	r3, #0
 8004790:	db04      	blt.n	800479c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f1c3 0205 	rsb	r2, r3, #5
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	6959      	ldr	r1, [r3, #20]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4a1f      	ldr	r2, [pc, #124]	; (8004828 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80047ac:	4413      	add	r3, r2
 80047ae:	4299      	cmp	r1, r3
 80047b0:	d134      	bne.n	800481c <vTaskPriorityDisinheritAfterTimeout+0x120>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe fa7a 	bl	8002cb0 <uxListRemove>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d115      	bne.n	80047ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c6:	4918      	ldr	r1, [pc, #96]	; (8004828 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	2201      	movs	r2, #1
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43da      	mvns	r2, r3
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4013      	ands	r3, r2
 80047ea:	4a10      	ldr	r2, [pc, #64]	; (800482c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80047ec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f2:	2201      	movs	r2, #1
 80047f4:	409a      	lsls	r2, r3
 80047f6:	4b0d      	ldr	r3, [pc, #52]	; (800482c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	4a0b      	ldr	r2, [pc, #44]	; (800482c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4a06      	ldr	r2, [pc, #24]	; (8004828 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800480e:	441a      	add	r2, r3
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f7fe f9ed 	bl	8002bf6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800481c:	bf00      	nop
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	2000002c 	.word	0x2000002c
 8004828:	20000030 	.word	0x20000030
 800482c:	2000010c 	.word	0x2000010c

08004830 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004834:	4b07      	ldr	r3, [pc, #28]	; (8004854 <pvTaskIncrementMutexHeldCount+0x24>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800483c:	4b05      	ldr	r3, [pc, #20]	; (8004854 <pvTaskIncrementMutexHeldCount+0x24>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004842:	3201      	adds	r2, #1
 8004844:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8004846:	4b03      	ldr	r3, [pc, #12]	; (8004854 <pvTaskIncrementMutexHeldCount+0x24>)
 8004848:	681b      	ldr	r3, [r3, #0]
	}
 800484a:	4618      	mov	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	2000002c 	.word	0x2000002c

08004858 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004862:	4b29      	ldr	r3, [pc, #164]	; (8004908 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004868:	4b28      	ldr	r3, [pc, #160]	; (800490c <prvAddCurrentTaskToDelayedList+0xb4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3304      	adds	r3, #4
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fa1e 	bl	8002cb0 <uxListRemove>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800487a:	4b24      	ldr	r3, [pc, #144]	; (800490c <prvAddCurrentTaskToDelayedList+0xb4>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	2201      	movs	r2, #1
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43da      	mvns	r2, r3
 8004888:	4b21      	ldr	r3, [pc, #132]	; (8004910 <prvAddCurrentTaskToDelayedList+0xb8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4013      	ands	r3, r2
 800488e:	4a20      	ldr	r2, [pc, #128]	; (8004910 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004890:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d10a      	bne.n	80048b0 <prvAddCurrentTaskToDelayedList+0x58>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a0:	4b1a      	ldr	r3, [pc, #104]	; (800490c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	481a      	ldr	r0, [pc, #104]	; (8004914 <prvAddCurrentTaskToDelayedList+0xbc>)
 80048aa:	f7fe f9a4 	bl	8002bf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80048ae:	e026      	b.n	80048fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4413      	add	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80048b8:	4b14      	ldr	r3, [pc, #80]	; (800490c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d209      	bcs.n	80048dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048c8:	4b13      	ldr	r3, [pc, #76]	; (8004918 <prvAddCurrentTaskToDelayedList+0xc0>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f7fe f9b2 	bl	8002c3e <vListInsert>
}
 80048da:	e010      	b.n	80048fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048dc:	4b0f      	ldr	r3, [pc, #60]	; (800491c <prvAddCurrentTaskToDelayedList+0xc4>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b0a      	ldr	r3, [pc, #40]	; (800490c <prvAddCurrentTaskToDelayedList+0xb4>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4619      	mov	r1, r3
 80048e8:	4610      	mov	r0, r2
 80048ea:	f7fe f9a8 	bl	8002c3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048ee:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d202      	bcs.n	80048fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80048f8:	4a09      	ldr	r2, [pc, #36]	; (8004920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6013      	str	r3, [r2, #0]
}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000108 	.word	0x20000108
 800490c:	2000002c 	.word	0x2000002c
 8004910:	2000010c 	.word	0x2000010c
 8004914:	200000f0 	.word	0x200000f0
 8004918:	200000c0 	.word	0x200000c0
 800491c:	200000bc 	.word	0x200000bc
 8004920:	20000124 	.word	0x20000124

08004924 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800492a:	2300      	movs	r3, #0
 800492c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800492e:	f000 fad5 	bl	8004edc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004932:	4b11      	ldr	r3, [pc, #68]	; (8004978 <xTimerCreateTimerTask+0x54>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00b      	beq.n	8004952 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800493a:	4b10      	ldr	r3, [pc, #64]	; (800497c <xTimerCreateTimerTask+0x58>)
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	2302      	movs	r3, #2
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	2300      	movs	r3, #0
 8004944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004948:	490d      	ldr	r1, [pc, #52]	; (8004980 <xTimerCreateTimerTask+0x5c>)
 800494a:	480e      	ldr	r0, [pc, #56]	; (8004984 <xTimerCreateTimerTask+0x60>)
 800494c:	f7ff f838 	bl	80039c0 <xTaskCreate>
 8004950:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	603b      	str	r3, [r7, #0]
}
 800496a:	bf00      	nop
 800496c:	e7fe      	b.n	800496c <xTimerCreateTimerTask+0x48>
	return xReturn;
 800496e:	687b      	ldr	r3, [r7, #4]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000160 	.word	0x20000160
 800497c:	20000164 	.word	0x20000164
 8004980:	08005850 	.word	0x08005850
 8004984:	08004abd 	.word	0x08004abd

08004988 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08a      	sub	sp, #40	; 0x28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004996:	2300      	movs	r3, #0
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	623b      	str	r3, [r7, #32]
}
 80049b2:	bf00      	nop
 80049b4:	e7fe      	b.n	80049b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80049b6:	4b1a      	ldr	r3, [pc, #104]	; (8004a20 <xTimerGenericCommand+0x98>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d02a      	beq.n	8004a14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2b05      	cmp	r3, #5
 80049ce:	dc18      	bgt.n	8004a02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80049d0:	f7ff fd70 	bl	80044b4 <xTaskGetSchedulerState>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d109      	bne.n	80049ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80049da:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <xTimerGenericCommand+0x98>)
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	f107 0114 	add.w	r1, r7, #20
 80049e2:	2300      	movs	r3, #0
 80049e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e6:	f7fe fa55 	bl	8002e94 <xQueueGenericSend>
 80049ea:	6278      	str	r0, [r7, #36]	; 0x24
 80049ec:	e012      	b.n	8004a14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <xTimerGenericCommand+0x98>)
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	f107 0114 	add.w	r1, r7, #20
 80049f6:	2300      	movs	r3, #0
 80049f8:	2200      	movs	r2, #0
 80049fa:	f7fe fa4b 	bl	8002e94 <xQueueGenericSend>
 80049fe:	6278      	str	r0, [r7, #36]	; 0x24
 8004a00:	e008      	b.n	8004a14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a02:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <xTimerGenericCommand+0x98>)
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	f107 0114 	add.w	r1, r7, #20
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	f7fe fb3f 	bl	8003090 <xQueueGenericSendFromISR>
 8004a12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3728      	adds	r7, #40	; 0x28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000160 	.word	0x20000160

08004a24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a2e:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <prvProcessExpiredTimer+0x94>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fe f937 	bl	8002cb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d022      	beq.n	8004a96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	699a      	ldr	r2, [r3, #24]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	18d1      	adds	r1, r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	6978      	ldr	r0, [r7, #20]
 8004a5e:	f000 f8d1 	bl	8004c04 <prvInsertTimerInActiveList>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01f      	beq.n	8004aa8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a68:	2300      	movs	r3, #0
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	2100      	movs	r1, #0
 8004a72:	6978      	ldr	r0, [r7, #20]
 8004a74:	f7ff ff88 	bl	8004988 <xTimerGenericCommand>
 8004a78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d113      	bne.n	8004aa8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	60fb      	str	r3, [r7, #12]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a9c:	f023 0301 	bic.w	r3, r3, #1
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	6978      	ldr	r0, [r7, #20]
 8004aae:	4798      	blx	r3
}
 8004ab0:	bf00      	nop
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000158 	.word	0x20000158

08004abc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ac4:	f107 0308 	add.w	r3, r7, #8
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f857 	bl	8004b7c <prvGetNextExpireTime>
 8004ace:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f803 	bl	8004ae0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ada:	f000 f8d5 	bl	8004c88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ade:	e7f1      	b.n	8004ac4 <prvTimerTask+0x8>

08004ae0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004aea:	f7ff f929 	bl	8003d40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004aee:	f107 0308 	add.w	r3, r7, #8
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 f866 	bl	8004bc4 <prvSampleTimeNow>
 8004af8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d130      	bne.n	8004b62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <prvProcessTimerOrBlockTask+0x3c>
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d806      	bhi.n	8004b1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b0e:	f7ff f925 	bl	8003d5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff ff85 	bl	8004a24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004b1a:	e024      	b.n	8004b66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d008      	beq.n	8004b34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004b22:	4b13      	ldr	r3, [pc, #76]	; (8004b70 <prvProcessTimerOrBlockTask+0x90>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <prvProcessTimerOrBlockTask+0x50>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <prvProcessTimerOrBlockTask+0x52>
 8004b30:	2300      	movs	r3, #0
 8004b32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004b34:	4b0f      	ldr	r3, [pc, #60]	; (8004b74 <prvProcessTimerOrBlockTask+0x94>)
 8004b36:	6818      	ldr	r0, [r3, #0]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	4619      	mov	r1, r3
 8004b42:	f7fe ff09 	bl	8003958 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b46:	f7ff f909 	bl	8003d5c <xTaskResumeAll>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b50:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <prvProcessTimerOrBlockTask+0x98>)
 8004b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	f3bf 8f6f 	isb	sy
}
 8004b60:	e001      	b.n	8004b66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b62:	f7ff f8fb 	bl	8003d5c <xTaskResumeAll>
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	2000015c 	.word	0x2000015c
 8004b74:	20000160 	.word	0x20000160
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <prvGetNextExpireTime+0x44>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <prvGetNextExpireTime+0x16>
 8004b8e:	2201      	movs	r2, #1
 8004b90:	e000      	b.n	8004b94 <prvGetNextExpireTime+0x18>
 8004b92:	2200      	movs	r2, #0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ba0:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <prvGetNextExpireTime+0x44>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	e001      	b.n	8004bb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20000158 	.word	0x20000158

08004bc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004bcc:	f7ff f962 	bl	8003e94 <xTaskGetTickCount>
 8004bd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <prvSampleTimeNow+0x3c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d205      	bcs.n	8004be8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004bdc:	f000 f91a 	bl	8004e14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e002      	b.n	8004bee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004bee:	4a04      	ldr	r2, [pc, #16]	; (8004c00 <prvSampleTimeNow+0x3c>)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000168 	.word	0x20000168

08004c04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d812      	bhi.n	8004c50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	1ad2      	subs	r2, r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d302      	bcc.n	8004c3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	e01b      	b.n	8004c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <prvInsertTimerInActiveList+0x7c>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f7fd fff8 	bl	8002c3e <vListInsert>
 8004c4e:	e012      	b.n	8004c76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d206      	bcs.n	8004c66 <prvInsertTimerInActiveList+0x62>
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d302      	bcc.n	8004c66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	e007      	b.n	8004c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c66:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <prvInsertTimerInActiveList+0x80>)
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4610      	mov	r0, r2
 8004c72:	f7fd ffe4 	bl	8002c3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c76:	697b      	ldr	r3, [r7, #20]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	2000015c 	.word	0x2000015c
 8004c84:	20000158 	.word	0x20000158

08004c88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08c      	sub	sp, #48	; 0x30
 8004c8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c8e:	e0ae      	b.n	8004dee <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f2c0 80aa 	blt.w	8004dec <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d004      	beq.n	8004cae <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe f801 	bl	8002cb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cae:	1d3b      	adds	r3, r7, #4
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff ff87 	bl	8004bc4 <prvSampleTimeNow>
 8004cb6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b09      	cmp	r3, #9
 8004cbc:	f200 8097 	bhi.w	8004dee <prvProcessReceivedCommands+0x166>
 8004cc0:	a201      	add	r2, pc, #4	; (adr r2, 8004cc8 <prvProcessReceivedCommands+0x40>)
 8004cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc6:	bf00      	nop
 8004cc8:	08004cf1 	.word	0x08004cf1
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004cf1 	.word	0x08004cf1
 8004cd4:	08004d65 	.word	0x08004d65
 8004cd8:	08004d79 	.word	0x08004d79
 8004cdc:	08004dc3 	.word	0x08004dc3
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004cf1 	.word	0x08004cf1
 8004ce8:	08004d65 	.word	0x08004d65
 8004cec:	08004d79 	.word	0x08004d79
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	18d1      	adds	r1, r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a3a      	ldr	r2, [r7, #32]
 8004d0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d10:	f7ff ff78 	bl	8004c04 <prvInsertTimerInActiveList>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d069      	beq.n	8004dee <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d05e      	beq.n	8004dee <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	441a      	add	r2, r3
 8004d38:	2300      	movs	r3, #0
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2100      	movs	r1, #0
 8004d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d42:	f7ff fe21 	bl	8004988 <xTimerGenericCommand>
 8004d46:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d14f      	bne.n	8004dee <prvProcessReceivedCommands+0x166>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	61bb      	str	r3, [r7, #24]
}
 8004d60:	bf00      	nop
 8004d62:	e7fe      	b.n	8004d62 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004d76:	e03a      	b.n	8004dee <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <prvProcessReceivedCommands+0x126>
	__asm volatile
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	617b      	str	r3, [r7, #20]
}
 8004daa:	bf00      	nop
 8004dac:	e7fe      	b.n	8004dac <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	18d1      	adds	r1, r2, r3
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	6a3a      	ldr	r2, [r7, #32]
 8004dba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dbc:	f7ff ff22 	bl	8004c04 <prvInsertTimerInActiveList>
					break;
 8004dc0:	e015      	b.n	8004dee <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d103      	bne.n	8004dd8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8004dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dd2:	f000 fbcd 	bl	8005570 <vPortFree>
 8004dd6:	e00a      	b.n	8004dee <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004dea:	e000      	b.n	8004dee <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004dec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dee:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <prvProcessReceivedCommands+0x188>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f107 0108 	add.w	r1, r7, #8
 8004df6:	2200      	movs	r2, #0
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7fe fa6f 	bl	80032dc <xQueueReceive>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f47f af45 	bne.w	8004c90 <prvProcessReceivedCommands+0x8>
	}
}
 8004e06:	bf00      	nop
 8004e08:	bf00      	nop
 8004e0a:	3728      	adds	r7, #40	; 0x28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20000160 	.word	0x20000160

08004e14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e1a:	e048      	b.n	8004eae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e1c:	4b2d      	ldr	r3, [pc, #180]	; (8004ed4 <prvSwitchTimerLists+0xc0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e26:	4b2b      	ldr	r3, [pc, #172]	; (8004ed4 <prvSwitchTimerLists+0xc0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fd ff3b 	bl	8002cb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d02e      	beq.n	8004eae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d90e      	bls.n	8004e80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e6e:	4b19      	ldr	r3, [pc, #100]	; (8004ed4 <prvSwitchTimerLists+0xc0>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3304      	adds	r3, #4
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f7fd fee0 	bl	8002c3e <vListInsert>
 8004e7e:	e016      	b.n	8004eae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e80:	2300      	movs	r3, #0
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	2100      	movs	r1, #0
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff fd7c 	bl	8004988 <xTimerGenericCommand>
 8004e90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	603b      	str	r3, [r7, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	e7fe      	b.n	8004eac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004eae:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <prvSwitchTimerLists+0xc0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1b1      	bne.n	8004e1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <prvSwitchTimerLists+0xc0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ebe:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <prvSwitchTimerLists+0xc4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a04      	ldr	r2, [pc, #16]	; (8004ed4 <prvSwitchTimerLists+0xc0>)
 8004ec4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ec6:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <prvSwitchTimerLists+0xc4>)
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	6013      	str	r3, [r2, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000158 	.word	0x20000158
 8004ed8:	2000015c 	.word	0x2000015c

08004edc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ee0:	f000 f960 	bl	80051a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ee4:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <prvCheckForValidListAndQueue+0x54>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d11d      	bne.n	8004f28 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004eec:	4811      	ldr	r0, [pc, #68]	; (8004f34 <prvCheckForValidListAndQueue+0x58>)
 8004eee:	f7fd fe55 	bl	8002b9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ef2:	4811      	ldr	r0, [pc, #68]	; (8004f38 <prvCheckForValidListAndQueue+0x5c>)
 8004ef4:	f7fd fe52 	bl	8002b9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ef8:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <prvCheckForValidListAndQueue+0x60>)
 8004efa:	4a0e      	ldr	r2, [pc, #56]	; (8004f34 <prvCheckForValidListAndQueue+0x58>)
 8004efc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004efe:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <prvCheckForValidListAndQueue+0x64>)
 8004f00:	4a0d      	ldr	r2, [pc, #52]	; (8004f38 <prvCheckForValidListAndQueue+0x5c>)
 8004f02:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004f04:	2200      	movs	r2, #0
 8004f06:	210c      	movs	r1, #12
 8004f08:	200a      	movs	r0, #10
 8004f0a:	f7fd ff63 	bl	8002dd4 <xQueueGenericCreate>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4a07      	ldr	r2, [pc, #28]	; (8004f30 <prvCheckForValidListAndQueue+0x54>)
 8004f12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <prvCheckForValidListAndQueue+0x54>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <prvCheckForValidListAndQueue+0x54>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4908      	ldr	r1, [pc, #32]	; (8004f44 <prvCheckForValidListAndQueue+0x68>)
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe fcee 	bl	8003904 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f28:	f000 f96c 	bl	8005204 <vPortExitCritical>
}
 8004f2c:	bf00      	nop
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20000160 	.word	0x20000160
 8004f34:	20000130 	.word	0x20000130
 8004f38:	20000144 	.word	0x20000144
 8004f3c:	20000158 	.word	0x20000158
 8004f40:	2000015c 	.word	0x2000015c
 8004f44:	08005858 	.word	0x08005858

08004f48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3b04      	subs	r3, #4
 8004f58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3b04      	subs	r3, #4
 8004f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f023 0201 	bic.w	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3b04      	subs	r3, #4
 8004f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f78:	4a0c      	ldr	r2, [pc, #48]	; (8004fac <pxPortInitialiseStack+0x64>)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3b14      	subs	r3, #20
 8004f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3b04      	subs	r3, #4
 8004f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f06f 0202 	mvn.w	r2, #2
 8004f96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3b20      	subs	r3, #32
 8004f9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	08004fb1 	.word	0x08004fb1

08004fb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fba:	4b12      	ldr	r3, [pc, #72]	; (8005004 <prvTaskExitError+0x54>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	d00a      	beq.n	8004fda <prvTaskExitError+0x2a>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	60fb      	str	r3, [r7, #12]
}
 8004fd6:	bf00      	nop
 8004fd8:	e7fe      	b.n	8004fd8 <prvTaskExitError+0x28>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	60bb      	str	r3, [r7, #8]
}
 8004fec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fee:	bf00      	nop
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0fc      	beq.n	8004ff0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	2000000c 	.word	0x2000000c
	...

08005010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <pxCurrentTCBConst2>)
 8005012:	6819      	ldr	r1, [r3, #0]
 8005014:	6808      	ldr	r0, [r1, #0]
 8005016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	f380 8809 	msr	PSP, r0
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f380 8811 	msr	BASEPRI, r0
 800502a:	4770      	bx	lr
 800502c:	f3af 8000 	nop.w

08005030 <pxCurrentTCBConst2>:
 8005030:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop

08005038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005038:	4808      	ldr	r0, [pc, #32]	; (800505c <prvPortStartFirstTask+0x24>)
 800503a:	6800      	ldr	r0, [r0, #0]
 800503c:	6800      	ldr	r0, [r0, #0]
 800503e:	f380 8808 	msr	MSP, r0
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f380 8814 	msr	CONTROL, r0
 800504a:	b662      	cpsie	i
 800504c:	b661      	cpsie	f
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	df00      	svc	0
 8005058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800505a:	bf00      	nop
 800505c:	e000ed08 	.word	0xe000ed08

08005060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005066:	4b46      	ldr	r3, [pc, #280]	; (8005180 <xPortStartScheduler+0x120>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a46      	ldr	r2, [pc, #280]	; (8005184 <xPortStartScheduler+0x124>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d10a      	bne.n	8005086 <xPortStartScheduler+0x26>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	613b      	str	r3, [r7, #16]
}
 8005082:	bf00      	nop
 8005084:	e7fe      	b.n	8005084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005086:	4b3e      	ldr	r3, [pc, #248]	; (8005180 <xPortStartScheduler+0x120>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a3f      	ldr	r2, [pc, #252]	; (8005188 <xPortStartScheduler+0x128>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10a      	bne.n	80050a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	60fb      	str	r3, [r7, #12]
}
 80050a2:	bf00      	nop
 80050a4:	e7fe      	b.n	80050a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050a6:	4b39      	ldr	r3, [pc, #228]	; (800518c <xPortStartScheduler+0x12c>)
 80050a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	22ff      	movs	r2, #255	; 0xff
 80050b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	4b31      	ldr	r3, [pc, #196]	; (8005190 <xPortStartScheduler+0x130>)
 80050cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050ce:	4b31      	ldr	r3, [pc, #196]	; (8005194 <xPortStartScheduler+0x134>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050d4:	e009      	b.n	80050ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80050d6:	4b2f      	ldr	r3, [pc, #188]	; (8005194 <xPortStartScheduler+0x134>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3b01      	subs	r3, #1
 80050dc:	4a2d      	ldr	r2, [pc, #180]	; (8005194 <xPortStartScheduler+0x134>)
 80050de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f2:	2b80      	cmp	r3, #128	; 0x80
 80050f4:	d0ef      	beq.n	80050d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050f6:	4b27      	ldr	r3, [pc, #156]	; (8005194 <xPortStartScheduler+0x134>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f1c3 0307 	rsb	r3, r3, #7
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d00a      	beq.n	8005118 <xPortStartScheduler+0xb8>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60bb      	str	r3, [r7, #8]
}
 8005114:	bf00      	nop
 8005116:	e7fe      	b.n	8005116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005118:	4b1e      	ldr	r3, [pc, #120]	; (8005194 <xPortStartScheduler+0x134>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	4a1d      	ldr	r2, [pc, #116]	; (8005194 <xPortStartScheduler+0x134>)
 8005120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005122:	4b1c      	ldr	r3, [pc, #112]	; (8005194 <xPortStartScheduler+0x134>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800512a:	4a1a      	ldr	r2, [pc, #104]	; (8005194 <xPortStartScheduler+0x134>)
 800512c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	b2da      	uxtb	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005136:	4b18      	ldr	r3, [pc, #96]	; (8005198 <xPortStartScheduler+0x138>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a17      	ldr	r2, [pc, #92]	; (8005198 <xPortStartScheduler+0x138>)
 800513c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005142:	4b15      	ldr	r3, [pc, #84]	; (8005198 <xPortStartScheduler+0x138>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a14      	ldr	r2, [pc, #80]	; (8005198 <xPortStartScheduler+0x138>)
 8005148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800514c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800514e:	f000 f8dd 	bl	800530c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005152:	4b12      	ldr	r3, [pc, #72]	; (800519c <xPortStartScheduler+0x13c>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005158:	f000 f8fc 	bl	8005354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800515c:	4b10      	ldr	r3, [pc, #64]	; (80051a0 <xPortStartScheduler+0x140>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a0f      	ldr	r2, [pc, #60]	; (80051a0 <xPortStartScheduler+0x140>)
 8005162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005168:	f7ff ff66 	bl	8005038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800516c:	f7fe ff5a 	bl	8004024 <vTaskSwitchContext>
	prvTaskExitError();
 8005170:	f7ff ff1e 	bl	8004fb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	e000ed00 	.word	0xe000ed00
 8005184:	410fc271 	.word	0x410fc271
 8005188:	410fc270 	.word	0x410fc270
 800518c:	e000e400 	.word	0xe000e400
 8005190:	2000016c 	.word	0x2000016c
 8005194:	20000170 	.word	0x20000170
 8005198:	e000ed20 	.word	0xe000ed20
 800519c:	2000000c 	.word	0x2000000c
 80051a0:	e000ef34 	.word	0xe000ef34

080051a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	607b      	str	r3, [r7, #4]
}
 80051bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051be:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <vPortEnterCritical+0x58>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3301      	adds	r3, #1
 80051c4:	4a0d      	ldr	r2, [pc, #52]	; (80051fc <vPortEnterCritical+0x58>)
 80051c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051c8:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <vPortEnterCritical+0x58>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d10f      	bne.n	80051f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <vPortEnterCritical+0x5c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	603b      	str	r3, [r7, #0]
}
 80051ec:	bf00      	nop
 80051ee:	e7fe      	b.n	80051ee <vPortEnterCritical+0x4a>
	}
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	2000000c 	.word	0x2000000c
 8005200:	e000ed04 	.word	0xe000ed04

08005204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800520a:	4b12      	ldr	r3, [pc, #72]	; (8005254 <vPortExitCritical+0x50>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <vPortExitCritical+0x24>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	607b      	str	r3, [r7, #4]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <vPortExitCritical+0x50>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3b01      	subs	r3, #1
 800522e:	4a09      	ldr	r2, [pc, #36]	; (8005254 <vPortExitCritical+0x50>)
 8005230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <vPortExitCritical+0x50>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d105      	bne.n	8005246 <vPortExitCritical+0x42>
 800523a:	2300      	movs	r3, #0
 800523c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f383 8811 	msr	BASEPRI, r3
}
 8005244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	2000000c 	.word	0x2000000c
	...

08005260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005260:	f3ef 8009 	mrs	r0, PSP
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <pxCurrentTCBConst>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	f01e 0f10 	tst.w	lr, #16
 8005270:	bf08      	it	eq
 8005272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527a:	6010      	str	r0, [r2, #0]
 800527c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005280:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005284:	f380 8811 	msr	BASEPRI, r0
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f7fe fec8 	bl	8004024 <vTaskSwitchContext>
 8005294:	f04f 0000 	mov.w	r0, #0
 8005298:	f380 8811 	msr	BASEPRI, r0
 800529c:	bc09      	pop	{r0, r3}
 800529e:	6819      	ldr	r1, [r3, #0]
 80052a0:	6808      	ldr	r0, [r1, #0]
 80052a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a6:	f01e 0f10 	tst.w	lr, #16
 80052aa:	bf08      	it	eq
 80052ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052b0:	f380 8809 	msr	PSP, r0
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	f3af 8000 	nop.w

080052c0 <pxCurrentTCBConst>:
 80052c0:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop

080052c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	607b      	str	r3, [r7, #4]
}
 80052e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052e2:	f7fe fde7 	bl	8003eb4 <xTaskIncrementTick>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052ec:	4b06      	ldr	r3, [pc, #24]	; (8005308 <SysTick_Handler+0x40>)
 80052ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	2300      	movs	r3, #0
 80052f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	f383 8811 	msr	BASEPRI, r3
}
 80052fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <vPortSetupTimerInterrupt+0x34>)
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <vPortSetupTimerInterrupt+0x38>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <vPortSetupTimerInterrupt+0x3c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a0a      	ldr	r2, [pc, #40]	; (800534c <vPortSetupTimerInterrupt+0x40>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	099b      	lsrs	r3, r3, #6
 8005328:	4a09      	ldr	r2, [pc, #36]	; (8005350 <vPortSetupTimerInterrupt+0x44>)
 800532a:	3b01      	subs	r3, #1
 800532c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800532e:	4b04      	ldr	r3, [pc, #16]	; (8005340 <vPortSetupTimerInterrupt+0x34>)
 8005330:	2207      	movs	r2, #7
 8005332:	601a      	str	r2, [r3, #0]
}
 8005334:	bf00      	nop
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	e000e010 	.word	0xe000e010
 8005344:	e000e018 	.word	0xe000e018
 8005348:	20000000 	.word	0x20000000
 800534c:	10624dd3 	.word	0x10624dd3
 8005350:	e000e014 	.word	0xe000e014

08005354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005364 <vPortEnableVFP+0x10>
 8005358:	6801      	ldr	r1, [r0, #0]
 800535a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800535e:	6001      	str	r1, [r0, #0]
 8005360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005362:	bf00      	nop
 8005364:	e000ed88 	.word	0xe000ed88

08005368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800536e:	f3ef 8305 	mrs	r3, IPSR
 8005372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b0f      	cmp	r3, #15
 8005378:	d914      	bls.n	80053a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800537a:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <vPortValidateInterruptPriority+0x70>)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4413      	add	r3, r2
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005384:	4b15      	ldr	r3, [pc, #84]	; (80053dc <vPortValidateInterruptPriority+0x74>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	7afa      	ldrb	r2, [r7, #11]
 800538a:	429a      	cmp	r2, r3
 800538c:	d20a      	bcs.n	80053a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	607b      	str	r3, [r7, #4]
}
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053a4:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <vPortValidateInterruptPriority+0x78>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80053ac:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <vPortValidateInterruptPriority+0x7c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d90a      	bls.n	80053ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	603b      	str	r3, [r7, #0]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <vPortValidateInterruptPriority+0x60>
	}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	e000e3f0 	.word	0xe000e3f0
 80053dc:	2000016c 	.word	0x2000016c
 80053e0:	e000ed0c 	.word	0xe000ed0c
 80053e4:	20000170 	.word	0x20000170

080053e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053f4:	f7fe fca4 	bl	8003d40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053f8:	4b58      	ldr	r3, [pc, #352]	; (800555c <pvPortMalloc+0x174>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005400:	f000 f910 	bl	8005624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005404:	4b56      	ldr	r3, [pc, #344]	; (8005560 <pvPortMalloc+0x178>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	f040 808e 	bne.w	800552e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01d      	beq.n	8005454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005418:	2208      	movs	r2, #8
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4413      	add	r3, r2
 800541e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	2b00      	cmp	r3, #0
 8005428:	d014      	beq.n	8005454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f023 0307 	bic.w	r3, r3, #7
 8005430:	3308      	adds	r3, #8
 8005432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <pvPortMalloc+0x6c>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	617b      	str	r3, [r7, #20]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d069      	beq.n	800552e <pvPortMalloc+0x146>
 800545a:	4b42      	ldr	r3, [pc, #264]	; (8005564 <pvPortMalloc+0x17c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d864      	bhi.n	800552e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005464:	4b40      	ldr	r3, [pc, #256]	; (8005568 <pvPortMalloc+0x180>)
 8005466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005468:	4b3f      	ldr	r3, [pc, #252]	; (8005568 <pvPortMalloc+0x180>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800546e:	e004      	b.n	800547a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	429a      	cmp	r2, r3
 8005482:	d903      	bls.n	800548c <pvPortMalloc+0xa4>
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f1      	bne.n	8005470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800548c:	4b33      	ldr	r3, [pc, #204]	; (800555c <pvPortMalloc+0x174>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005492:	429a      	cmp	r2, r3
 8005494:	d04b      	beq.n	800552e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2208      	movs	r2, #8
 800549c:	4413      	add	r3, r2
 800549e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	2308      	movs	r3, #8
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d91f      	bls.n	80054f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <pvPortMalloc+0xf8>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	613b      	str	r3, [r7, #16]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	1ad2      	subs	r2, r2, r3
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054f2:	69b8      	ldr	r0, [r7, #24]
 80054f4:	f000 f8f8 	bl	80056e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054f8:	4b1a      	ldr	r3, [pc, #104]	; (8005564 <pvPortMalloc+0x17c>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	4a18      	ldr	r2, [pc, #96]	; (8005564 <pvPortMalloc+0x17c>)
 8005504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005506:	4b17      	ldr	r3, [pc, #92]	; (8005564 <pvPortMalloc+0x17c>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b18      	ldr	r3, [pc, #96]	; (800556c <pvPortMalloc+0x184>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d203      	bcs.n	800551a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005512:	4b14      	ldr	r3, [pc, #80]	; (8005564 <pvPortMalloc+0x17c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a15      	ldr	r2, [pc, #84]	; (800556c <pvPortMalloc+0x184>)
 8005518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	4b10      	ldr	r3, [pc, #64]	; (8005560 <pvPortMalloc+0x178>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	431a      	orrs	r2, r3
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800552e:	f7fe fc15 	bl	8003d5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <pvPortMalloc+0x16a>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	60fb      	str	r3, [r7, #12]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <pvPortMalloc+0x168>
	return pvReturn;
 8005552:	69fb      	ldr	r3, [r7, #28]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3728      	adds	r7, #40	; 0x28
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20012d7c 	.word	0x20012d7c
 8005560:	20012d88 	.word	0x20012d88
 8005564:	20012d80 	.word	0x20012d80
 8005568:	20012d74 	.word	0x20012d74
 800556c:	20012d84 	.word	0x20012d84

08005570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d048      	beq.n	8005614 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005582:	2308      	movs	r3, #8
 8005584:	425b      	negs	r3, r3
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4413      	add	r3, r2
 800558a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	4b21      	ldr	r3, [pc, #132]	; (800561c <vPortFree+0xac>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4013      	ands	r3, r2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <vPortFree+0x44>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	60fb      	str	r3, [r7, #12]
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <vPortFree+0x62>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	60bb      	str	r3, [r7, #8]
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	4b11      	ldr	r3, [pc, #68]	; (800561c <vPortFree+0xac>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4013      	ands	r3, r2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d019      	beq.n	8005614 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d115      	bne.n	8005614 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	4b0b      	ldr	r3, [pc, #44]	; (800561c <vPortFree+0xac>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	43db      	mvns	r3, r3
 80055f2:	401a      	ands	r2, r3
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055f8:	f7fe fba2 	bl	8003d40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <vPortFree+0xb0>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4413      	add	r3, r2
 8005606:	4a06      	ldr	r2, [pc, #24]	; (8005620 <vPortFree+0xb0>)
 8005608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800560a:	6938      	ldr	r0, [r7, #16]
 800560c:	f000 f86c 	bl	80056e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005610:	f7fe fba4 	bl	8003d5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005614:	bf00      	nop
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20012d88 	.word	0x20012d88
 8005620:	20012d80 	.word	0x20012d80

08005624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800562a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800562e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005630:	4b27      	ldr	r3, [pc, #156]	; (80056d0 <prvHeapInit+0xac>)
 8005632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3307      	adds	r3, #7
 8005642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0307 	bic.w	r3, r3, #7
 800564a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	4a1f      	ldr	r2, [pc, #124]	; (80056d0 <prvHeapInit+0xac>)
 8005654:	4413      	add	r3, r2
 8005656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800565c:	4a1d      	ldr	r2, [pc, #116]	; (80056d4 <prvHeapInit+0xb0>)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005662:	4b1c      	ldr	r3, [pc, #112]	; (80056d4 <prvHeapInit+0xb0>)
 8005664:	2200      	movs	r2, #0
 8005666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	4413      	add	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005670:	2208      	movs	r2, #8
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0307 	bic.w	r3, r3, #7
 800567e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4a15      	ldr	r2, [pc, #84]	; (80056d8 <prvHeapInit+0xb4>)
 8005684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005686:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <prvHeapInit+0xb4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2200      	movs	r2, #0
 800568c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800568e:	4b12      	ldr	r3, [pc, #72]	; (80056d8 <prvHeapInit+0xb4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	1ad2      	subs	r2, r2, r3
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056a4:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <prvHeapInit+0xb4>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <prvHeapInit+0xb8>)
 80056b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	4a09      	ldr	r2, [pc, #36]	; (80056e0 <prvHeapInit+0xbc>)
 80056ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056bc:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <prvHeapInit+0xc0>)
 80056be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056c2:	601a      	str	r2, [r3, #0]
}
 80056c4:	bf00      	nop
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	20000174 	.word	0x20000174
 80056d4:	20012d74 	.word	0x20012d74
 80056d8:	20012d7c 	.word	0x20012d7c
 80056dc:	20012d84 	.word	0x20012d84
 80056e0:	20012d80 	.word	0x20012d80
 80056e4:	20012d88 	.word	0x20012d88

080056e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056f0:	4b28      	ldr	r3, [pc, #160]	; (8005794 <prvInsertBlockIntoFreeList+0xac>)
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e002      	b.n	80056fc <prvInsertBlockIntoFreeList+0x14>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	429a      	cmp	r2, r3
 8005704:	d8f7      	bhi.n	80056f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	4413      	add	r3, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	d108      	bne.n	800572a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	441a      	add	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	441a      	add	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d118      	bne.n	8005770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <prvInsertBlockIntoFreeList+0xb0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d00d      	beq.n	8005766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	441a      	add	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e008      	b.n	8005778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005766:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <prvInsertBlockIntoFreeList+0xb0>)
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	e003      	b.n	8005778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	429a      	cmp	r2, r3
 800577e:	d002      	beq.n	8005786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20012d74 	.word	0x20012d74
 8005798:	20012d7c 	.word	0x20012d7c

0800579c <__libc_init_array>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	4d0d      	ldr	r5, [pc, #52]	; (80057d4 <__libc_init_array+0x38>)
 80057a0:	4c0d      	ldr	r4, [pc, #52]	; (80057d8 <__libc_init_array+0x3c>)
 80057a2:	1b64      	subs	r4, r4, r5
 80057a4:	10a4      	asrs	r4, r4, #2
 80057a6:	2600      	movs	r6, #0
 80057a8:	42a6      	cmp	r6, r4
 80057aa:	d109      	bne.n	80057c0 <__libc_init_array+0x24>
 80057ac:	4d0b      	ldr	r5, [pc, #44]	; (80057dc <__libc_init_array+0x40>)
 80057ae:	4c0c      	ldr	r4, [pc, #48]	; (80057e0 <__libc_init_array+0x44>)
 80057b0:	f000 f82e 	bl	8005810 <_init>
 80057b4:	1b64      	subs	r4, r4, r5
 80057b6:	10a4      	asrs	r4, r4, #2
 80057b8:	2600      	movs	r6, #0
 80057ba:	42a6      	cmp	r6, r4
 80057bc:	d105      	bne.n	80057ca <__libc_init_array+0x2e>
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c4:	4798      	blx	r3
 80057c6:	3601      	adds	r6, #1
 80057c8:	e7ee      	b.n	80057a8 <__libc_init_array+0xc>
 80057ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ce:	4798      	blx	r3
 80057d0:	3601      	adds	r6, #1
 80057d2:	e7f2      	b.n	80057ba <__libc_init_array+0x1e>
 80057d4:	08005880 	.word	0x08005880
 80057d8:	08005880 	.word	0x08005880
 80057dc:	08005880 	.word	0x08005880
 80057e0:	08005884 	.word	0x08005884

080057e4 <memcpy>:
 80057e4:	440a      	add	r2, r1
 80057e6:	4291      	cmp	r1, r2
 80057e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057ec:	d100      	bne.n	80057f0 <memcpy+0xc>
 80057ee:	4770      	bx	lr
 80057f0:	b510      	push	{r4, lr}
 80057f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057fa:	4291      	cmp	r1, r2
 80057fc:	d1f9      	bne.n	80057f2 <memcpy+0xe>
 80057fe:	bd10      	pop	{r4, pc}

08005800 <memset>:
 8005800:	4402      	add	r2, r0
 8005802:	4603      	mov	r3, r0
 8005804:	4293      	cmp	r3, r2
 8005806:	d100      	bne.n	800580a <memset+0xa>
 8005808:	4770      	bx	lr
 800580a:	f803 1b01 	strb.w	r1, [r3], #1
 800580e:	e7f9      	b.n	8005804 <memset+0x4>

08005810 <_init>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr

0800581c <_fini>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr
