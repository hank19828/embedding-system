
lab4_new.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004220  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080043b0  080043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004488  08004488  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004490  08004490  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004490  08004490  00014490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004494  08004494  00014494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000015e8  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001660  20001660  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013137  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002717  00000000  00000000  000331df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e98  00000000  00000000  000358f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000db0  00000000  00000000  00036790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e38  00000000  00000000  00037540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011111  00000000  00000000  00059378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1c83  00000000  00000000  0006a489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013c10c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000407c  00000000  00000000  0013c160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004398 	.word	0x08004398

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004398 	.word	0x08004398

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <red_LED_task>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void red_LED_task(void *pvParameters)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000580:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <red_LED_task+0x1c>)
 8000586:	f000 fedc 	bl	8001342 <HAL_GPIO_TogglePin>
		vTaskDelay(500);
 800058a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800058e:	f002 fc07 	bl	8002da0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000592:	e7f5      	b.n	8000580 <red_LED_task+0x8>
 8000594:	40020c00 	.word	0x40020c00

08000598 <green_LED_task>:
	}
}

void green_LED_task(void *pvParameters)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <green_LED_task+0x1c>)
 80005a6:	f000 fecc 	bl	8001342 <HAL_GPIO_TogglePin>
		vTaskDelay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ae:	f002 fbf7 	bl	8002da0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005b2:	e7f5      	b.n	80005a0 <green_LED_task+0x8>
 80005b4:	40020c00 	.word	0x40020c00

080005b8 <task1>:
	}
}

void task1(void *pvParameters)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005c0:	2000      	movs	r0, #0
 80005c2:	f002 fb5d 	bl	8002c80 <vTaskDelete>
 80005c6:	e7fb      	b.n	80005c0 <task1+0x8>

080005c8 <task2>:
    }
}

void task2(void *pvParameters)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f002 fb55 	bl	8002c80 <vTaskDelete>
 80005d6:	e7fb      	b.n	80005d0 <task2+0x8>

080005d8 <task3>:
    }
}

void task3(void *pvParameters)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    while (1) {
        vTaskDelete(NULL);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f002 fb4d 	bl	8002c80 <vTaskDelete>
 80005e6:	e7fb      	b.n	80005e0 <task3+0x8>

080005e8 <print_task>:
    }
}

void print_task(void *pvParameters)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    while (1) {
		vPrintFreeList();
 80005f0:	f003 fa62 	bl	8003ab8 <vPrintFreeList>
		vTaskDelay(3000);
 80005f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005f8:	f002 fbd2 	bl	8002da0 <vTaskDelay>
		vPrintFreeList();
 80005fc:	e7f8      	b.n	80005f0 <print_task+0x8>
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fbc3 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f85b 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 f8ed 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000612:	f000 f8c1 	bl	8000798 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(red_LED_task, "RED_LED", 100, NULL, 0, NULL);
 8000616:	2300      	movs	r3, #0
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2300      	movs	r3, #0
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2300      	movs	r3, #0
 8000620:	2264      	movs	r2, #100	; 0x64
 8000622:	491c      	ldr	r1, [pc, #112]	; (8000694 <main+0x94>)
 8000624:	481c      	ldr	r0, [pc, #112]	; (8000698 <main+0x98>)
 8000626:	f002 f9c5 	bl	80029b4 <xTaskCreate>
  xTaskCreate(task1, "TASK1", 50, NULL, 0, NULL);
 800062a:	2300      	movs	r3, #0
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2300      	movs	r3, #0
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2232      	movs	r2, #50	; 0x32
 8000636:	4919      	ldr	r1, [pc, #100]	; (800069c <main+0x9c>)
 8000638:	4819      	ldr	r0, [pc, #100]	; (80006a0 <main+0xa0>)
 800063a:	f002 f9bb 	bl	80029b4 <xTaskCreate>
  xTaskCreate(task2, "TASK2", 30, NULL, 0, NULL);
 800063e:	2300      	movs	r3, #0
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2300      	movs	r3, #0
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	221e      	movs	r2, #30
 800064a:	4916      	ldr	r1, [pc, #88]	; (80006a4 <main+0xa4>)
 800064c:	4816      	ldr	r0, [pc, #88]	; (80006a8 <main+0xa8>)
 800064e:	f002 f9b1 	bl	80029b4 <xTaskCreate>
  xTaskCreate(green_LED_task, "GREEN_LED", 130, NULL, 0, NULL);
 8000652:	2300      	movs	r3, #0
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2300      	movs	r3, #0
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	2282      	movs	r2, #130	; 0x82
 800065e:	4913      	ldr	r1, [pc, #76]	; (80006ac <main+0xac>)
 8000660:	4813      	ldr	r0, [pc, #76]	; (80006b0 <main+0xb0>)
 8000662:	f002 f9a7 	bl	80029b4 <xTaskCreate>
  xTaskCreate(task3, "TASK3", 40, NULL, 0, NULL);
 8000666:	2300      	movs	r3, #0
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2300      	movs	r3, #0
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	2228      	movs	r2, #40	; 0x28
 8000672:	4910      	ldr	r1, [pc, #64]	; (80006b4 <main+0xb4>)
 8000674:	4810      	ldr	r0, [pc, #64]	; (80006b8 <main+0xb8>)
 8000676:	f002 f99d 	bl	80029b4 <xTaskCreate>
  xTaskCreate(print_task, "PRINT", 130, NULL, 0, NULL);
 800067a:	2300      	movs	r3, #0
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2300      	movs	r3, #0
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	2282      	movs	r2, #130	; 0x82
 8000686:	490d      	ldr	r1, [pc, #52]	; (80006bc <main+0xbc>)
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <main+0xc0>)
 800068a:	f002 f993 	bl	80029b4 <xTaskCreate>
  vTaskStartScheduler();
 800068e:	f002 fbbb 	bl	8002e08 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x92>
 8000694:	080043b0 	.word	0x080043b0
 8000698:	08000579 	.word	0x08000579
 800069c:	080043b8 	.word	0x080043b8
 80006a0:	080005b9 	.word	0x080005b9
 80006a4:	080043c0 	.word	0x080043c0
 80006a8:	080005c9 	.word	0x080005c9
 80006ac:	080043c8 	.word	0x080043c8
 80006b0:	08000599 	.word	0x08000599
 80006b4:	080043d4 	.word	0x080043d4
 80006b8:	080005d9 	.word	0x080005d9
 80006bc:	080043dc 	.word	0x080043dc
 80006c0:	080005e9 	.word	0x080005e9

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fa30 	bl	8003b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000738:	2332      	movs	r3, #50	; 0x32
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073c:	2304      	movs	r3, #4
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fe15 	bl	8001378 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 f9ba 	bl	8000acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f876 	bl	8001868 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f9a3 	bl	8000acc <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART2_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f001 fd26 	bl	8002220 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f000 f977 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200015c0 	.word	0x200015c0
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08c      	sub	sp, #48	; 0x30
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
 8000806:	4ba2      	ldr	r3, [pc, #648]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4aa1      	ldr	r2, [pc, #644]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 800080c:	f043 0310 	orr.w	r3, r3, #16
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b9f      	ldr	r3, [pc, #636]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0310 	and.w	r3, r3, #16
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	4b9b      	ldr	r3, [pc, #620]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a9a      	ldr	r2, [pc, #616]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b98      	ldr	r3, [pc, #608]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b94      	ldr	r3, [pc, #592]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a93      	ldr	r2, [pc, #588]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b91      	ldr	r3, [pc, #580]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b8d      	ldr	r3, [pc, #564]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a8c      	ldr	r2, [pc, #560]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b8a      	ldr	r3, [pc, #552]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b86      	ldr	r3, [pc, #536]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a85      	ldr	r2, [pc, #532]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b83      	ldr	r3, [pc, #524]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b7f      	ldr	r3, [pc, #508]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a7e      	ldr	r2, [pc, #504]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 8000898:	f043 0308 	orr.w	r3, r3, #8
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b7c      	ldr	r3, [pc, #496]	; (8000a90 <MX_GPIO_Init+0x2a4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0308 	and.w	r3, r3, #8
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2108      	movs	r1, #8
 80008ae:	4879      	ldr	r0, [pc, #484]	; (8000a94 <MX_GPIO_Init+0x2a8>)
 80008b0:	f000 fd2e 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2101      	movs	r1, #1
 80008b8:	4877      	ldr	r0, [pc, #476]	; (8000a98 <MX_GPIO_Init+0x2ac>)
 80008ba:	f000 fd29 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008be:	2200      	movs	r2, #0
 80008c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008c4:	4875      	ldr	r0, [pc, #468]	; (8000a9c <MX_GPIO_Init+0x2b0>)
 80008c6:	f000 fd23 	bl	8001310 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ca:	2308      	movs	r3, #8
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	486c      	ldr	r0, [pc, #432]	; (8000a94 <MX_GPIO_Init+0x2a8>)
 80008e2:	f000 fb79 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4866      	ldr	r0, [pc, #408]	; (8000a98 <MX_GPIO_Init+0x2ac>)
 80008fe:	f000 fb6b 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000902:	2308      	movs	r3, #8
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000912:	2305      	movs	r3, #5
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	485e      	ldr	r0, [pc, #376]	; (8000a98 <MX_GPIO_Init+0x2ac>)
 800091e:	f000 fb5b 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000922:	2301      	movs	r3, #1
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000926:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	485a      	ldr	r0, [pc, #360]	; (8000aa0 <MX_GPIO_Init+0x2b4>)
 8000938:	f000 fb4e 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800093c:	2310      	movs	r3, #16
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800094c:	2306      	movs	r3, #6
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4852      	ldr	r0, [pc, #328]	; (8000aa0 <MX_GPIO_Init+0x2b4>)
 8000958:	f000 fb3e 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800095c:	23e0      	movs	r3, #224	; 0xe0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800096c:	2305      	movs	r3, #5
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	484a      	ldr	r0, [pc, #296]	; (8000aa0 <MX_GPIO_Init+0x2b4>)
 8000978:	f000 fb2e 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800097c:	2304      	movs	r3, #4
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4845      	ldr	r0, [pc, #276]	; (8000aa4 <MX_GPIO_Init+0x2b8>)
 8000990:	f000 fb22 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a6:	2305      	movs	r3, #5
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	483c      	ldr	r0, [pc, #240]	; (8000aa4 <MX_GPIO_Init+0x2b8>)
 80009b2:	f000 fb11 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009ba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4833      	ldr	r0, [pc, #204]	; (8000a9c <MX_GPIO_Init+0x2b0>)
 80009d0:	f000 fb02 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009d4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009e6:	2306      	movs	r3, #6
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4829      	ldr	r0, [pc, #164]	; (8000a98 <MX_GPIO_Init+0x2ac>)
 80009f2:	f000 faf1 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4825      	ldr	r0, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0x2b4>)
 8000a0c:	f000 fae4 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a22:	230a      	movs	r3, #10
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	481c      	ldr	r0, [pc, #112]	; (8000aa0 <MX_GPIO_Init+0x2b4>)
 8000a2e:	f000 fad3 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a32:	2320      	movs	r3, #32
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4815      	ldr	r0, [pc, #84]	; (8000a9c <MX_GPIO_Init+0x2b0>)
 8000a46:	f000 fac7 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a4a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a50:	2312      	movs	r3, #18
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <MX_GPIO_Init+0x2b8>)
 8000a68:	f000 fab6 	bl	8000fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a70:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_GPIO_Init+0x2a8>)
 8000a82:	f000 faa9 	bl	8000fd8 <HAL_GPIO_Init>

}
 8000a86:	bf00      	nop
 8000a88:	3730      	adds	r7, #48	; 0x30
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	40020000 	.word	0x40020000
 8000aa4:	40020400 	.word	0x40020400

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aba:	f000 f98b 	bl	8000dd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40001400 	.word	0x40001400

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <Error_Handler+0x8>
	...

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_UART_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12b      	bne.n	8000ba2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_UART_MspInit+0x88>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b82:	230c      	movs	r3, #12
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b92:	2307      	movs	r3, #7
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <HAL_UART_MspInit+0x8c>)
 8000b9e:	f000 fa1b 	bl	8000fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40004400 	.word	0x40004400
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000

08000bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	2037      	movs	r0, #55	; 0x37
 8000bce:	f000 f9d9 	bl	8000f84 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bd2:	2037      	movs	r0, #55	; 0x37
 8000bd4:	f000 f9f2 	bl	8000fbc <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <HAL_InitTick+0xa4>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	4a1e      	ldr	r2, [pc, #120]	; (8000c5c <HAL_InitTick+0xa4>)
 8000be2:	f043 0320 	orr.w	r3, r3, #32
 8000be6:	6413      	str	r3, [r2, #64]	; 0x40
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <HAL_InitTick+0xa4>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f003 0320 	and.w	r3, r3, #32
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bf4:	f107 0210 	add.w	r2, r7, #16
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 f82e 	bl	8001c60 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c04:	f001 f804 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c10:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <HAL_InitTick+0xa8>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	0c9b      	lsrs	r3, r3, #18
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_InitTick+0xac>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <HAL_InitTick+0xb0>)
 8000c20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_InitTick+0xac>)
 8000c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c28:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_InitTick+0xac>)
 8000c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c2e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_InitTick+0xac>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <HAL_InitTick+0xac>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000c3c:	4809      	ldr	r0, [pc, #36]	; (8000c64 <HAL_InitTick+0xac>)
 8000c3e:	f001 f841 	bl	8001cc4 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d104      	bne.n	8000c52 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000c48:	4806      	ldr	r0, [pc, #24]	; (8000c64 <HAL_InitTick+0xac>)
 8000c4a:	f001 f895 	bl	8001d78 <HAL_TIM_Base_Start_IT>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3730      	adds	r7, #48	; 0x30
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	431bde83 	.word	0x431bde83
 8000c64:	20001604 	.word	0x20001604
 8000c68:	40001400 	.word	0x40001400

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <TIM7_IRQHandler+0x10>)
 8000c9e:	f001 f8db 	bl	8001e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20001604 	.word	0x20001604

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f002 fef4 	bl	8003ac8 <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20020000 	.word	0x20020000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	20000094 	.word	0x20000094
 8000d14:	20001660 	.word	0x20001660

08000d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d42:	490e      	ldr	r1, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d58:	4c0b      	ldr	r4, [pc, #44]	; (8000d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d66:	f7ff ffd7 	bl	8000d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f002 feb3 	bl	8003ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6e:	f7ff fc47 	bl	8000600 <main>
  bx  lr    
 8000d72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d80:	08004498 	.word	0x08004498
  ldr r2, =_sbss
 8000d84:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d88:	20001660 	.word	0x20001660

08000d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_Init+0x40>)
 8000d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_Init+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_Init+0x40>)
 8000da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x40>)
 8000db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f8d8 	bl	8000f6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fefa 	bl	8000bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fe88 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023c00 	.word	0x40023c00

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	2000164c 	.word	0x2000164c

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	2000164c 	.word	0x2000164c

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db0b      	blt.n	8000ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 021f 	and.w	r2, r3, #31
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <__NVIC_EnableIRQ+0x38>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2001      	movs	r0, #1
 8000e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff4c 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f96:	f7ff ff61 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000f9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	6978      	ldr	r0, [r7, #20]
 8000fa2:	f7ff ffb1 	bl	8000f08 <NVIC_EncodePriority>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff80 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff54 	bl	8000e78 <__NVIC_EnableIRQ>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	e16b      	b.n	80012cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	429a      	cmp	r2, r3
 800100e:	f040 815a 	bne.w	80012c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b01      	cmp	r3, #1
 800101c:	d005      	beq.n	800102a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001026:	2b02      	cmp	r3, #2
 8001028:	d130      	bne.n	800108c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b03      	cmp	r3, #3
 8001096:	d017      	beq.n	80010c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d123      	bne.n	800111c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	69b9      	ldr	r1, [r7, #24]
 8001118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0203 	and.w	r2, r3, #3
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80b4 	beq.w	80012c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b60      	ldr	r3, [pc, #384]	; (80012e4 <HAL_GPIO_Init+0x30c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a5f      	ldr	r2, [pc, #380]	; (80012e4 <HAL_GPIO_Init+0x30c>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b5d      	ldr	r3, [pc, #372]	; (80012e4 <HAL_GPIO_Init+0x30c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117a:	4a5b      	ldr	r2, [pc, #364]	; (80012e8 <HAL_GPIO_Init+0x310>)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a52      	ldr	r2, [pc, #328]	; (80012ec <HAL_GPIO_Init+0x314>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d02b      	beq.n	80011fe <HAL_GPIO_Init+0x226>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a51      	ldr	r2, [pc, #324]	; (80012f0 <HAL_GPIO_Init+0x318>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d025      	beq.n	80011fa <HAL_GPIO_Init+0x222>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a50      	ldr	r2, [pc, #320]	; (80012f4 <HAL_GPIO_Init+0x31c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d01f      	beq.n	80011f6 <HAL_GPIO_Init+0x21e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4f      	ldr	r2, [pc, #316]	; (80012f8 <HAL_GPIO_Init+0x320>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d019      	beq.n	80011f2 <HAL_GPIO_Init+0x21a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4e      	ldr	r2, [pc, #312]	; (80012fc <HAL_GPIO_Init+0x324>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x216>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4d      	ldr	r2, [pc, #308]	; (8001300 <HAL_GPIO_Init+0x328>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x212>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4c      	ldr	r2, [pc, #304]	; (8001304 <HAL_GPIO_Init+0x32c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x20e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4b      	ldr	r2, [pc, #300]	; (8001308 <HAL_GPIO_Init+0x330>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x20a>
 80011de:	2307      	movs	r3, #7
 80011e0:	e00e      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011e2:	2308      	movs	r3, #8
 80011e4:	e00c      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011e6:	2306      	movs	r3, #6
 80011e8:	e00a      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011ea:	2305      	movs	r3, #5
 80011ec:	e008      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011ee:	2304      	movs	r3, #4
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e004      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011fe:	2300      	movs	r3, #0
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	f002 0203 	and.w	r2, r2, #3
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	4093      	lsls	r3, r2
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001210:	4935      	ldr	r1, [pc, #212]	; (80012e8 <HAL_GPIO_Init+0x310>)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800121e:	4b3b      	ldr	r3, [pc, #236]	; (800130c <HAL_GPIO_Init+0x334>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001242:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_GPIO_Init+0x334>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001248:	4b30      	ldr	r3, [pc, #192]	; (800130c <HAL_GPIO_Init+0x334>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126c:	4a27      	ldr	r2, [pc, #156]	; (800130c <HAL_GPIO_Init+0x334>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <HAL_GPIO_Init+0x334>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001296:	4a1d      	ldr	r2, [pc, #116]	; (800130c <HAL_GPIO_Init+0x334>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_GPIO_Init+0x334>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <HAL_GPIO_Init+0x334>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b0f      	cmp	r3, #15
 80012d0:	f67f ae90 	bls.w	8000ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	40021400 	.word	0x40021400
 8001304:	40021800 	.word	0x40021800
 8001308:	40021c00 	.word	0x40021c00
 800130c:	40013c00 	.word	0x40013c00

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001342:	b480      	push	{r7}
 8001344:	b085      	sub	sp, #20
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001354:	887a      	ldrh	r2, [r7, #2]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4013      	ands	r3, r2
 800135a:	041a      	lsls	r2, r3, #16
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43d9      	mvns	r1, r3
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	400b      	ands	r3, r1
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e264      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d075      	beq.n	8001482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001396:	4ba3      	ldr	r3, [pc, #652]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d00c      	beq.n	80013bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013a2:	4ba0      	ldr	r3, [pc, #640]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d112      	bne.n	80013d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ae:	4b9d      	ldr	r3, [pc, #628]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ba:	d10b      	bne.n	80013d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	4b99      	ldr	r3, [pc, #612]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d05b      	beq.n	8001480 <HAL_RCC_OscConfig+0x108>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d157      	bne.n	8001480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e23f      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013dc:	d106      	bne.n	80013ec <HAL_RCC_OscConfig+0x74>
 80013de:	4b91      	ldr	r3, [pc, #580]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a90      	ldr	r2, [pc, #576]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e01d      	b.n	8001428 <HAL_RCC_OscConfig+0xb0>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x98>
 80013f6:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a8a      	ldr	r2, [pc, #552]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a87      	ldr	r2, [pc, #540]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0xb0>
 8001410:	4b84      	ldr	r3, [pc, #528]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a83      	ldr	r2, [pc, #524]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b81      	ldr	r3, [pc, #516]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a80      	ldr	r2, [pc, #512]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d013      	beq.n	8001458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fce4 	bl	8000dfc <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001438:	f7ff fce0 	bl	8000dfc <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b64      	cmp	r3, #100	; 0x64
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e204      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	4b76      	ldr	r3, [pc, #472]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0xc0>
 8001456:	e014      	b.n	8001482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fcd0 	bl	8000dfc <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001460:	f7ff fccc 	bl	8000dfc <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b64      	cmp	r3, #100	; 0x64
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e1f0      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	4b6c      	ldr	r3, [pc, #432]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0xe8>
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d063      	beq.n	8001556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800148e:	4b65      	ldr	r3, [pc, #404]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00b      	beq.n	80014b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800149a:	4b62      	ldr	r3, [pc, #392]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d11c      	bne.n	80014e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a6:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d116      	bne.n	80014e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b2:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <HAL_RCC_OscConfig+0x152>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d001      	beq.n	80014ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e1c4      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ca:	4b56      	ldr	r3, [pc, #344]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4952      	ldr	r1, [pc, #328]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	e03a      	b.n	8001556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d020      	beq.n	800152a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e8:	4b4f      	ldr	r3, [pc, #316]	; (8001628 <HAL_RCC_OscConfig+0x2b0>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ee:	f7ff fc85 	bl	8000dfc <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff fc81 	bl	8000dfc <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e1a5      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001508:	4b46      	ldr	r3, [pc, #280]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b43      	ldr	r3, [pc, #268]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4940      	ldr	r1, [pc, #256]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
 8001528:	e015      	b.n	8001556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152a:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <HAL_RCC_OscConfig+0x2b0>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fc64 	bl	8000dfc <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001538:	f7ff fc60 	bl	8000dfc <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e184      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d030      	beq.n	80015c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d016      	beq.n	8001598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_RCC_OscConfig+0x2b4>)
 800156c:	2201      	movs	r2, #1
 800156e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001570:	f7ff fc44 	bl	8000dfc <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001578:	f7ff fc40 	bl	8000dfc <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e164      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158a:	4b26      	ldr	r3, [pc, #152]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x200>
 8001596:	e015      	b.n	80015c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <HAL_RCC_OscConfig+0x2b4>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff fc2d 	bl	8000dfc <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a6:	f7ff fc29 	bl	8000dfc <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e14d      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80015ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a0 	beq.w	8001712 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d10f      	bne.n	8001602 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_RCC_OscConfig+0x2ac>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fe:	2301      	movs	r3, #1
 8001600:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_RCC_OscConfig+0x2b8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d121      	bne.n	8001652 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_RCC_OscConfig+0x2b8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_RCC_OscConfig+0x2b8>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161a:	f7ff fbef 	bl	8000dfc <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	e011      	b.n	8001646 <HAL_RCC_OscConfig+0x2ce>
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	42470000 	.word	0x42470000
 800162c:	42470e80 	.word	0x42470e80
 8001630:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001634:	f7ff fbe2 	bl	8000dfc <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e106      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b85      	ldr	r3, [pc, #532]	; (800185c <HAL_RCC_OscConfig+0x4e4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d106      	bne.n	8001668 <HAL_RCC_OscConfig+0x2f0>
 800165a:	4b81      	ldr	r3, [pc, #516]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a80      	ldr	r2, [pc, #512]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
 8001666:	e01c      	b.n	80016a2 <HAL_RCC_OscConfig+0x32a>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d10c      	bne.n	800168a <HAL_RCC_OscConfig+0x312>
 8001670:	4b7b      	ldr	r3, [pc, #492]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	4a7a      	ldr	r2, [pc, #488]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6713      	str	r3, [r2, #112]	; 0x70
 800167c:	4b78      	ldr	r3, [pc, #480]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 800167e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001680:	4a77      	ldr	r2, [pc, #476]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6713      	str	r3, [r2, #112]	; 0x70
 8001688:	e00b      	b.n	80016a2 <HAL_RCC_OscConfig+0x32a>
 800168a:	4b75      	ldr	r3, [pc, #468]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	4a74      	ldr	r2, [pc, #464]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6713      	str	r3, [r2, #112]	; 0x70
 8001696:	4b72      	ldr	r3, [pc, #456]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	4a71      	ldr	r2, [pc, #452]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d015      	beq.n	80016d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff fba7 	bl	8000dfc <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fba3 	bl	8000dfc <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e0c5      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	4b65      	ldr	r3, [pc, #404]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ee      	beq.n	80016b2 <HAL_RCC_OscConfig+0x33a>
 80016d4:	e014      	b.n	8001700 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fb91 	bl	8000dfc <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fb8d 	bl	8000dfc <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e0af      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f4:	4b5a      	ldr	r3, [pc, #360]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1ee      	bne.n	80016de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d105      	bne.n	8001712 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001706:	4b56      	ldr	r3, [pc, #344]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a55      	ldr	r2, [pc, #340]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 800170c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 809b 	beq.w	8001852 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800171c:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b08      	cmp	r3, #8
 8001726:	d05c      	beq.n	80017e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d141      	bne.n	80017b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001730:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <HAL_RCC_OscConfig+0x4ec>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7ff fb61 	bl	8000dfc <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff fb5d 	bl	8000dfc <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e081      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001750:	4b43      	ldr	r3, [pc, #268]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f0      	bne.n	800173e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69da      	ldr	r2, [r3, #28]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	019b      	lsls	r3, r3, #6
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	085b      	lsrs	r3, r3, #1
 8001774:	3b01      	subs	r3, #1
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	061b      	lsls	r3, r3, #24
 8001780:	4937      	ldr	r1, [pc, #220]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 8001782:	4313      	orrs	r3, r2
 8001784:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001786:	4b37      	ldr	r3, [pc, #220]	; (8001864 <HAL_RCC_OscConfig+0x4ec>)
 8001788:	2201      	movs	r2, #1
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff fb36 	bl	8000dfc <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001794:	f7ff fb32 	bl	8000dfc <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e056      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a6:	4b2e      	ldr	r3, [pc, #184]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x41c>
 80017b2:	e04e      	b.n	8001852 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b4:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_RCC_OscConfig+0x4ec>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff fb1f 	bl	8000dfc <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c2:	f7ff fb1b 	bl	8000dfc <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e03f      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x44a>
 80017e0:	e037      	b.n	8001852 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e032      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_RCC_OscConfig+0x4e8>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d028      	beq.n	800184e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d121      	bne.n	800184e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d11a      	bne.n	800184e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800181e:	4013      	ands	r3, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001824:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001826:	4293      	cmp	r3, r2
 8001828:	d111      	bne.n	800184e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	085b      	lsrs	r3, r3, #1
 8001836:	3b01      	subs	r3, #1
 8001838:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d107      	bne.n	800184e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40007000 	.word	0x40007000
 8001860:	40023800 	.word	0x40023800
 8001864:	42470060 	.word	0x42470060

08001868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0cc      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800187c:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d90c      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b65      	ldr	r3, [pc, #404]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b63      	ldr	r3, [pc, #396]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0b8      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d020      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018bc:	4b59      	ldr	r3, [pc, #356]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a58      	ldr	r2, [pc, #352]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4a52      	ldr	r2, [pc, #328]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e0:	4b50      	ldr	r3, [pc, #320]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	494d      	ldr	r1, [pc, #308]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d044      	beq.n	8001988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d119      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e07f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d003      	beq.n	8001926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001922:	2b03      	cmp	r3, #3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001926:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e06f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e067      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f023 0203 	bic.w	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4934      	ldr	r1, [pc, #208]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	4313      	orrs	r3, r2
 8001956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001958:	f7ff fa50 	bl	8000dfc <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	e00a      	b.n	8001976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001960:	f7ff fa4c 	bl	8000dfc <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e04f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 020c 	and.w	r2, r3, #12
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	429a      	cmp	r2, r3
 8001986:	d1eb      	bne.n	8001960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d20c      	bcs.n	80019b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e032      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4916      	ldr	r1, [pc, #88]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	490e      	ldr	r1, [pc, #56]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ee:	f000 f821 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	490a      	ldr	r1, [pc, #40]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	5ccb      	ldrb	r3, [r1, r3]
 8001a02:	fa22 f303 	lsr.w	r3, r2, r3
 8001a06:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f8d2 	bl	8000bb8 <HAL_InitTick>

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023c00 	.word	0x40023c00
 8001a24:	40023800 	.word	0x40023800
 8001a28:	0800443c 	.word	0x0800443c
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	2300      	movs	r3, #0
 8001a46:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a4c:	4b67      	ldr	r3, [pc, #412]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d00d      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x40>
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	f200 80bd 	bhi.w	8001bd8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x34>
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d003      	beq.n	8001a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a66:	e0b7      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a68:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a6a:	60bb      	str	r3, [r7, #8]
       break;
 8001a6c:	e0b7      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a6e:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a70:	60bb      	str	r3, [r7, #8]
      break;
 8001a72:	e0b4      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a74:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a7c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a7e:	4b5b      	ldr	r3, [pc, #364]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d04d      	beq.n	8001b26 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a8a:	4b58      	ldr	r3, [pc, #352]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	099b      	lsrs	r3, r3, #6
 8001a90:	461a      	mov	r2, r3
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a9a:	f04f 0100 	mov.w	r1, #0
 8001a9e:	ea02 0800 	and.w	r8, r2, r0
 8001aa2:	ea03 0901 	and.w	r9, r3, r1
 8001aa6:	4640      	mov	r0, r8
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	014b      	lsls	r3, r1, #5
 8001ab4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ab8:	0142      	lsls	r2, r0, #5
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	ebb0 0008 	subs.w	r0, r0, r8
 8001ac2:	eb61 0109 	sbc.w	r1, r1, r9
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	018b      	lsls	r3, r1, #6
 8001ad0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ad4:	0182      	lsls	r2, r0, #6
 8001ad6:	1a12      	subs	r2, r2, r0
 8001ad8:	eb63 0301 	sbc.w	r3, r3, r1
 8001adc:	f04f 0000 	mov.w	r0, #0
 8001ae0:	f04f 0100 	mov.w	r1, #0
 8001ae4:	00d9      	lsls	r1, r3, #3
 8001ae6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aea:	00d0      	lsls	r0, r2, #3
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	eb12 0208 	adds.w	r2, r2, r8
 8001af4:	eb43 0309 	adc.w	r3, r3, r9
 8001af8:	f04f 0000 	mov.w	r0, #0
 8001afc:	f04f 0100 	mov.w	r1, #0
 8001b00:	0259      	lsls	r1, r3, #9
 8001b02:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b06:	0250      	lsls	r0, r2, #9
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	461a      	mov	r2, r3
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	f7fe fbb2 	bl	8000280 <__aeabi_uldivmod>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4613      	mov	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	e04a      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	099b      	lsrs	r3, r3, #6
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b36:	f04f 0100 	mov.w	r1, #0
 8001b3a:	ea02 0400 	and.w	r4, r2, r0
 8001b3e:	ea03 0501 	and.w	r5, r3, r1
 8001b42:	4620      	mov	r0, r4
 8001b44:	4629      	mov	r1, r5
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	014b      	lsls	r3, r1, #5
 8001b50:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b54:	0142      	lsls	r2, r0, #5
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	1b00      	subs	r0, r0, r4
 8001b5c:	eb61 0105 	sbc.w	r1, r1, r5
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	018b      	lsls	r3, r1, #6
 8001b6a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b6e:	0182      	lsls	r2, r0, #6
 8001b70:	1a12      	subs	r2, r2, r0
 8001b72:	eb63 0301 	sbc.w	r3, r3, r1
 8001b76:	f04f 0000 	mov.w	r0, #0
 8001b7a:	f04f 0100 	mov.w	r1, #0
 8001b7e:	00d9      	lsls	r1, r3, #3
 8001b80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b84:	00d0      	lsls	r0, r2, #3
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	1912      	adds	r2, r2, r4
 8001b8c:	eb45 0303 	adc.w	r3, r5, r3
 8001b90:	f04f 0000 	mov.w	r0, #0
 8001b94:	f04f 0100 	mov.w	r1, #0
 8001b98:	0299      	lsls	r1, r3, #10
 8001b9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b9e:	0290      	lsls	r0, r2, #10
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	461a      	mov	r2, r3
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	f7fe fb66 	bl	8000280 <__aeabi_uldivmod>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4613      	mov	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	0c1b      	lsrs	r3, r3, #16
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bcc:	68fa      	ldr	r2, [r7, #12]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	60bb      	str	r3, [r7, #8]
      break;
 8001bd6:	e002      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bda:	60bb      	str	r3, [r7, #8]
      break;
 8001bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bde:	68bb      	ldr	r3, [r7, #8]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	00f42400 	.word	0x00f42400
 8001bf4:	007a1200 	.word	0x007a1200

08001bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000

08001c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c14:	f7ff fff0 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	0a9b      	lsrs	r3, r3, #10
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	4903      	ldr	r1, [pc, #12]	; (8001c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40023800 	.word	0x40023800
 8001c34:	0800444c 	.word	0x0800444c

08001c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c3c:	f7ff ffdc 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0b5b      	lsrs	r3, r3, #13
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	; (8001c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	0800444c 	.word	0x0800444c

08001c60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_RCC_GetClockConfig+0x5c>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0203 	and.w	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_RCC_GetClockConfig+0x5c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_RCC_GetClockConfig+0x5c>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_GetClockConfig+0x5c>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	08db      	lsrs	r3, r3, #3
 8001c9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <HAL_RCC_GetClockConfig+0x60>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0207 	and.w	r2, r3, #7
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	601a      	str	r2, [r3, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40023c00 	.word	0x40023c00

08001cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e041      	b.n	8001d5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f839 	bl	8001d62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f000 f9d8 	bl	80020b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d001      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e04e      	b.n	8001e2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <HAL_TIM_Base_Start_IT+0xc4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d022      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dba:	d01d      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d018      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d013      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00e      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <HAL_TIM_Base_Start_IT+0xd4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d009      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d004      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_TIM_Base_Start_IT+0xdc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d111      	bne.n	8001e1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d010      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e1a:	e007      	b.n	8001e2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40010000 	.word	0x40010000
 8001e40:	40000400 	.word	0x40000400
 8001e44:	40000800 	.word	0x40000800
 8001e48:	40000c00 	.word	0x40000c00
 8001e4c:	40010400 	.word	0x40010400
 8001e50:	40014000 	.word	0x40014000
 8001e54:	40001800 	.word	0x40001800

08001e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d122      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d11b      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0202 	mvn.w	r2, #2
 8001e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f8ee 	bl	800207c <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8e0 	bl	8002068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f8f1 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d122      	bne.n	8001f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d11b      	bne.n	8001f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0204 	mvn.w	r2, #4
 8001ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8c4 	bl	800207c <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8b6 	bl	8002068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f8c7 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d122      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d11b      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0208 	mvn.w	r2, #8
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2204      	movs	r2, #4
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f89a 	bl	800207c <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f88c 	bl	8002068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f89d 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d122      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	d11b      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0210 	mvn.w	r2, #16
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2208      	movs	r2, #8
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f870 	bl	800207c <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f862 	bl	8002068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f873 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d10e      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d107      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0201 	mvn.w	r2, #1
 8001fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe fd66 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe6:	2b80      	cmp	r3, #128	; 0x80
 8001fe8:	d10e      	bne.n	8002008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff4:	2b80      	cmp	r3, #128	; 0x80
 8001ff6:	d107      	bne.n	8002008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f902 	bl	800220c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002012:	2b40      	cmp	r3, #64	; 0x40
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002020:	2b40      	cmp	r3, #64	; 0x40
 8002022:	d107      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f838 	bl	80020a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b20      	cmp	r3, #32
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b20      	cmp	r3, #32
 800204e:	d107      	bne.n	8002060 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0220 	mvn.w	r2, #32
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8cc 	bl	80021f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a40      	ldr	r2, [pc, #256]	; (80021cc <TIM_Base_SetConfig+0x114>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d013      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d6:	d00f      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3d      	ldr	r2, [pc, #244]	; (80021d0 <TIM_Base_SetConfig+0x118>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00b      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3c      	ldr	r2, [pc, #240]	; (80021d4 <TIM_Base_SetConfig+0x11c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d007      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <TIM_Base_SetConfig+0x120>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3a      	ldr	r2, [pc, #232]	; (80021dc <TIM_Base_SetConfig+0x124>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d108      	bne.n	800210a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2f      	ldr	r2, [pc, #188]	; (80021cc <TIM_Base_SetConfig+0x114>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d02b      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002118:	d027      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2c      	ldr	r2, [pc, #176]	; (80021d0 <TIM_Base_SetConfig+0x118>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d023      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2b      	ldr	r2, [pc, #172]	; (80021d4 <TIM_Base_SetConfig+0x11c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01f      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2a      	ldr	r2, [pc, #168]	; (80021d8 <TIM_Base_SetConfig+0x120>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01b      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a29      	ldr	r2, [pc, #164]	; (80021dc <TIM_Base_SetConfig+0x124>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d017      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a28      	ldr	r2, [pc, #160]	; (80021e0 <TIM_Base_SetConfig+0x128>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <TIM_Base_SetConfig+0x12c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00f      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a26      	ldr	r2, [pc, #152]	; (80021e8 <TIM_Base_SetConfig+0x130>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00b      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a25      	ldr	r2, [pc, #148]	; (80021ec <TIM_Base_SetConfig+0x134>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d007      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <TIM_Base_SetConfig+0x138>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d003      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a23      	ldr	r2, [pc, #140]	; (80021f4 <TIM_Base_SetConfig+0x13c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d108      	bne.n	800217c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <TIM_Base_SetConfig+0x114>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d003      	beq.n	80021b0 <TIM_Base_SetConfig+0xf8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <TIM_Base_SetConfig+0x124>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d103      	bne.n	80021b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	615a      	str	r2, [r3, #20]
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40000800 	.word	0x40000800
 80021d8:	40000c00 	.word	0x40000c00
 80021dc:	40010400 	.word	0x40010400
 80021e0:	40014000 	.word	0x40014000
 80021e4:	40014400 	.word	0x40014400
 80021e8:	40014800 	.word	0x40014800
 80021ec:	40001800 	.word	0x40001800
 80021f0:	40001c00 	.word	0x40001c00
 80021f4:	40002000 	.word	0x40002000

080021f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e03f      	b.n	80022b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7fe fc6e 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2224      	movs	r2, #36	; 0x24
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f929 	bl	80024bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	691a      	ldr	r2, [r3, #16]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002278:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b08a      	sub	sp, #40	; 0x28
 80022be:	af02      	add	r7, sp, #8
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	4613      	mov	r3, r2
 80022c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d17c      	bne.n	80023d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HAL_UART_Transmit+0x2c>
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e075      	b.n	80023d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_UART_Transmit+0x3e>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e06e      	b.n	80023d6 <HAL_UART_Transmit+0x11c>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2221      	movs	r2, #33	; 0x21
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800230e:	f7fe fd75 	bl	8000dfc <HAL_GetTick>
 8002312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	88fa      	ldrh	r2, [r7, #6]
 8002318:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	88fa      	ldrh	r2, [r7, #6]
 800231e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002328:	d108      	bne.n	800233c <HAL_UART_Transmit+0x82>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d104      	bne.n	800233c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	e003      	b.n	8002344 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002340:	2300      	movs	r3, #0
 8002342:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800234c:	e02a      	b.n	80023a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2200      	movs	r2, #0
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f840 	bl	80023de <UART_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e036      	b.n	80023d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10b      	bne.n	8002386 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800237c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	3302      	adds	r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	e007      	b.n	8002396 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	3301      	adds	r3, #1
 8002394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1cf      	bne.n	800234e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2200      	movs	r2, #0
 80023b6:	2140      	movs	r1, #64	; 0x40
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f810 	bl	80023de <UART_WaitOnFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e006      	b.n	80023d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	e000      	b.n	80023d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023d4:	2302      	movs	r3, #2
  }
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3720      	adds	r7, #32
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b090      	sub	sp, #64	; 0x40
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	603b      	str	r3, [r7, #0]
 80023ea:	4613      	mov	r3, r2
 80023ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023ee:	e050      	b.n	8002492 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f6:	d04c      	beq.n	8002492 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <UART_WaitOnFlagUntilTimeout+0x30>
 80023fe:	f7fe fcfd 	bl	8000dfc <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800240a:	429a      	cmp	r2, r3
 800240c:	d241      	bcs.n	8002492 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	330c      	adds	r3, #12
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	e853 3f00 	ldrex	r3, [r3]
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	330c      	adds	r3, #12
 800242c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800242e:	637a      	str	r2, [r7, #52]	; 0x34
 8002430:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002432:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002436:	e841 2300 	strex	r3, r2, [r1]
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1e5      	bne.n	800240e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3314      	adds	r3, #20
 8002448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	e853 3f00 	ldrex	r3, [r3]
 8002450:	613b      	str	r3, [r7, #16]
   return(result);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	63bb      	str	r3, [r7, #56]	; 0x38
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3314      	adds	r3, #20
 8002460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002462:	623a      	str	r2, [r7, #32]
 8002464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002466:	69f9      	ldr	r1, [r7, #28]
 8002468:	6a3a      	ldr	r2, [r7, #32]
 800246a:	e841 2300 	strex	r3, r2, [r1]
 800246e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1e5      	bne.n	8002442 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e00f      	b.n	80024b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4013      	ands	r3, r2
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	429a      	cmp	r2, r3
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d09f      	beq.n	80023f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3740      	adds	r7, #64	; 0x40
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024c0:	b09f      	sub	sp, #124	; 0x7c
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d2:	68d9      	ldr	r1, [r3, #12]
 80024d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	ea40 0301 	orr.w	r3, r0, r1
 80024dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80024f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002500:	f021 010c 	bic.w	r1, r1, #12
 8002504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800250a:	430b      	orrs	r3, r1
 800250c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800250e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251a:	6999      	ldr	r1, [r3, #24]
 800251c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	ea40 0301 	orr.w	r3, r0, r1
 8002524:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	4bc5      	ldr	r3, [pc, #788]	; (8002840 <UART_SetConfig+0x384>)
 800252c:	429a      	cmp	r2, r3
 800252e:	d004      	beq.n	800253a <UART_SetConfig+0x7e>
 8002530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4bc3      	ldr	r3, [pc, #780]	; (8002844 <UART_SetConfig+0x388>)
 8002536:	429a      	cmp	r2, r3
 8002538:	d103      	bne.n	8002542 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800253a:	f7ff fb7d 	bl	8001c38 <HAL_RCC_GetPCLK2Freq>
 800253e:	6778      	str	r0, [r7, #116]	; 0x74
 8002540:	e002      	b.n	8002548 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002542:	f7ff fb65 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8002546:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002550:	f040 80b6 	bne.w	80026c0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002556:	461c      	mov	r4, r3
 8002558:	f04f 0500 	mov.w	r5, #0
 800255c:	4622      	mov	r2, r4
 800255e:	462b      	mov	r3, r5
 8002560:	1891      	adds	r1, r2, r2
 8002562:	6439      	str	r1, [r7, #64]	; 0x40
 8002564:	415b      	adcs	r3, r3
 8002566:	647b      	str	r3, [r7, #68]	; 0x44
 8002568:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800256c:	1912      	adds	r2, r2, r4
 800256e:	eb45 0303 	adc.w	r3, r5, r3
 8002572:	f04f 0000 	mov.w	r0, #0
 8002576:	f04f 0100 	mov.w	r1, #0
 800257a:	00d9      	lsls	r1, r3, #3
 800257c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002580:	00d0      	lsls	r0, r2, #3
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	1911      	adds	r1, r2, r4
 8002588:	6639      	str	r1, [r7, #96]	; 0x60
 800258a:	416b      	adcs	r3, r5
 800258c:	667b      	str	r3, [r7, #100]	; 0x64
 800258e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	461a      	mov	r2, r3
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	1891      	adds	r1, r2, r2
 800259a:	63b9      	str	r1, [r7, #56]	; 0x38
 800259c:	415b      	adcs	r3, r3
 800259e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025a4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80025a8:	f7fd fe6a 	bl	8000280 <__aeabi_uldivmod>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4ba5      	ldr	r3, [pc, #660]	; (8002848 <UART_SetConfig+0x38c>)
 80025b2:	fba3 2302 	umull	r2, r3, r3, r2
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	011e      	lsls	r6, r3, #4
 80025ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025bc:	461c      	mov	r4, r3
 80025be:	f04f 0500 	mov.w	r5, #0
 80025c2:	4622      	mov	r2, r4
 80025c4:	462b      	mov	r3, r5
 80025c6:	1891      	adds	r1, r2, r2
 80025c8:	6339      	str	r1, [r7, #48]	; 0x30
 80025ca:	415b      	adcs	r3, r3
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
 80025ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025d2:	1912      	adds	r2, r2, r4
 80025d4:	eb45 0303 	adc.w	r3, r5, r3
 80025d8:	f04f 0000 	mov.w	r0, #0
 80025dc:	f04f 0100 	mov.w	r1, #0
 80025e0:	00d9      	lsls	r1, r3, #3
 80025e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025e6:	00d0      	lsls	r0, r2, #3
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	1911      	adds	r1, r2, r4
 80025ee:	65b9      	str	r1, [r7, #88]	; 0x58
 80025f0:	416b      	adcs	r3, r5
 80025f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	461a      	mov	r2, r3
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	1891      	adds	r1, r2, r2
 8002600:	62b9      	str	r1, [r7, #40]	; 0x28
 8002602:	415b      	adcs	r3, r3
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002606:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800260a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800260e:	f7fd fe37 	bl	8000280 <__aeabi_uldivmod>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4b8c      	ldr	r3, [pc, #560]	; (8002848 <UART_SetConfig+0x38c>)
 8002618:	fba3 1302 	umull	r1, r3, r3, r2
 800261c:	095b      	lsrs	r3, r3, #5
 800261e:	2164      	movs	r1, #100	; 0x64
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	3332      	adds	r3, #50	; 0x32
 800262a:	4a87      	ldr	r2, [pc, #540]	; (8002848 <UART_SetConfig+0x38c>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	095b      	lsrs	r3, r3, #5
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002638:	441e      	add	r6, r3
 800263a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263c:	4618      	mov	r0, r3
 800263e:	f04f 0100 	mov.w	r1, #0
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	1894      	adds	r4, r2, r2
 8002648:	623c      	str	r4, [r7, #32]
 800264a:	415b      	adcs	r3, r3
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
 800264e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002652:	1812      	adds	r2, r2, r0
 8002654:	eb41 0303 	adc.w	r3, r1, r3
 8002658:	f04f 0400 	mov.w	r4, #0
 800265c:	f04f 0500 	mov.w	r5, #0
 8002660:	00dd      	lsls	r5, r3, #3
 8002662:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002666:	00d4      	lsls	r4, r2, #3
 8002668:	4622      	mov	r2, r4
 800266a:	462b      	mov	r3, r5
 800266c:	1814      	adds	r4, r2, r0
 800266e:	653c      	str	r4, [r7, #80]	; 0x50
 8002670:	414b      	adcs	r3, r1
 8002672:	657b      	str	r3, [r7, #84]	; 0x54
 8002674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	461a      	mov	r2, r3
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	1891      	adds	r1, r2, r2
 8002680:	61b9      	str	r1, [r7, #24]
 8002682:	415b      	adcs	r3, r3
 8002684:	61fb      	str	r3, [r7, #28]
 8002686:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800268a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800268e:	f7fd fdf7 	bl	8000280 <__aeabi_uldivmod>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4b6c      	ldr	r3, [pc, #432]	; (8002848 <UART_SetConfig+0x38c>)
 8002698:	fba3 1302 	umull	r1, r3, r3, r2
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	2164      	movs	r1, #100	; 0x64
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	3332      	adds	r3, #50	; 0x32
 80026aa:	4a67      	ldr	r2, [pc, #412]	; (8002848 <UART_SetConfig+0x38c>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	f003 0207 	and.w	r2, r3, #7
 80026b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4432      	add	r2, r6
 80026bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026be:	e0b9      	b.n	8002834 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026c2:	461c      	mov	r4, r3
 80026c4:	f04f 0500 	mov.w	r5, #0
 80026c8:	4622      	mov	r2, r4
 80026ca:	462b      	mov	r3, r5
 80026cc:	1891      	adds	r1, r2, r2
 80026ce:	6139      	str	r1, [r7, #16]
 80026d0:	415b      	adcs	r3, r3
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026d8:	1912      	adds	r2, r2, r4
 80026da:	eb45 0303 	adc.w	r3, r5, r3
 80026de:	f04f 0000 	mov.w	r0, #0
 80026e2:	f04f 0100 	mov.w	r1, #0
 80026e6:	00d9      	lsls	r1, r3, #3
 80026e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026ec:	00d0      	lsls	r0, r2, #3
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	eb12 0804 	adds.w	r8, r2, r4
 80026f6:	eb43 0905 	adc.w	r9, r3, r5
 80026fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4618      	mov	r0, r3
 8002700:	f04f 0100 	mov.w	r1, #0
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	008b      	lsls	r3, r1, #2
 800270e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002712:	0082      	lsls	r2, r0, #2
 8002714:	4640      	mov	r0, r8
 8002716:	4649      	mov	r1, r9
 8002718:	f7fd fdb2 	bl	8000280 <__aeabi_uldivmod>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4b49      	ldr	r3, [pc, #292]	; (8002848 <UART_SetConfig+0x38c>)
 8002722:	fba3 2302 	umull	r2, r3, r3, r2
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	011e      	lsls	r6, r3, #4
 800272a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272c:	4618      	mov	r0, r3
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	1894      	adds	r4, r2, r2
 8002738:	60bc      	str	r4, [r7, #8]
 800273a:	415b      	adcs	r3, r3
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002742:	1812      	adds	r2, r2, r0
 8002744:	eb41 0303 	adc.w	r3, r1, r3
 8002748:	f04f 0400 	mov.w	r4, #0
 800274c:	f04f 0500 	mov.w	r5, #0
 8002750:	00dd      	lsls	r5, r3, #3
 8002752:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002756:	00d4      	lsls	r4, r2, #3
 8002758:	4622      	mov	r2, r4
 800275a:	462b      	mov	r3, r5
 800275c:	1814      	adds	r4, r2, r0
 800275e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002760:	414b      	adcs	r3, r1
 8002762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4618      	mov	r0, r3
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	008b      	lsls	r3, r1, #2
 8002778:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800277c:	0082      	lsls	r2, r0, #2
 800277e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002782:	f7fd fd7d 	bl	8000280 <__aeabi_uldivmod>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4b2f      	ldr	r3, [pc, #188]	; (8002848 <UART_SetConfig+0x38c>)
 800278c:	fba3 1302 	umull	r1, r3, r3, r2
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	2164      	movs	r1, #100	; 0x64
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	3332      	adds	r3, #50	; 0x32
 800279e:	4a2a      	ldr	r2, [pc, #168]	; (8002848 <UART_SetConfig+0x38c>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	095b      	lsrs	r3, r3, #5
 80027a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027aa:	441e      	add	r6, r3
 80027ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ae:	4618      	mov	r0, r3
 80027b0:	f04f 0100 	mov.w	r1, #0
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	1894      	adds	r4, r2, r2
 80027ba:	603c      	str	r4, [r7, #0]
 80027bc:	415b      	adcs	r3, r3
 80027be:	607b      	str	r3, [r7, #4]
 80027c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027c4:	1812      	adds	r2, r2, r0
 80027c6:	eb41 0303 	adc.w	r3, r1, r3
 80027ca:	f04f 0400 	mov.w	r4, #0
 80027ce:	f04f 0500 	mov.w	r5, #0
 80027d2:	00dd      	lsls	r5, r3, #3
 80027d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027d8:	00d4      	lsls	r4, r2, #3
 80027da:	4622      	mov	r2, r4
 80027dc:	462b      	mov	r3, r5
 80027de:	eb12 0a00 	adds.w	sl, r2, r0
 80027e2:	eb43 0b01 	adc.w	fp, r3, r1
 80027e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f04f 0100 	mov.w	r1, #0
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	008b      	lsls	r3, r1, #2
 80027fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027fe:	0082      	lsls	r2, r0, #2
 8002800:	4650      	mov	r0, sl
 8002802:	4659      	mov	r1, fp
 8002804:	f7fd fd3c 	bl	8000280 <__aeabi_uldivmod>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <UART_SetConfig+0x38c>)
 800280e:	fba3 1302 	umull	r1, r3, r3, r2
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2164      	movs	r1, #100	; 0x64
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	3332      	adds	r3, #50	; 0x32
 8002820:	4a09      	ldr	r2, [pc, #36]	; (8002848 <UART_SetConfig+0x38c>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	f003 020f 	and.w	r2, r3, #15
 800282c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4432      	add	r2, r6
 8002832:	609a      	str	r2, [r3, #8]
}
 8002834:	bf00      	nop
 8002836:	377c      	adds	r7, #124	; 0x7c
 8002838:	46bd      	mov	sp, r7
 800283a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800283e:	bf00      	nop
 8002840:	40011000 	.word	0x40011000
 8002844:	40011400 	.word	0x40011400
 8002848:	51eb851f 	.word	0x51eb851f

0800284c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f103 0208 	add.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f103 0208 	add.w	r2, r3, #8
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f103 0208 	add.w	r2, r3, #8
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	601a      	str	r2, [r3, #0]
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d103      	bne.n	800290e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e00c      	b.n	8002928 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3308      	adds	r3, #8
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e002      	b.n	800291c <vListInsert+0x2e>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	429a      	cmp	r2, r3
 8002926:	d2f6      	bcs.n	8002916 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	601a      	str	r2, [r3, #0]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6892      	ldr	r2, [r2, #8]
 8002976:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6852      	ldr	r2, [r2, #4]
 8002980:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	d103      	bne.n	8002994 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	1e5a      	subs	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b090      	sub	sp, #64	; 0x40
 80029b8:	af04      	add	r7, sp, #16
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	80fb      	strh	r3, [r7, #6]
	TCB_t *pxNewTCB;
	BaseType_t xReturn;
    char name[20];
    strcpy(name, pcName);
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 f8dc 	bl	8003b88 <strcpy>
    strcat(name, "\n\r");
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fbfb 	bl	80001d0 <strlen>
 80029da:	4603      	mov	r3, r0
 80029dc:	461a      	mov	r2, r3
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	4413      	add	r3, r2
 80029e4:	4a25      	ldr	r2, [pc, #148]	; (8002a7c <xTaskCreate+0xc8>)
 80029e6:	8811      	ldrh	r1, [r2, #0]
 80029e8:	7892      	ldrb	r2, [r2, #2]
 80029ea:	8019      	strh	r1, [r3, #0]
 80029ec:	709a      	strb	r2, [r3, #2]
    HAL_UART_Transmit(&huart2, (uint8_t *)name, strlen(name), 0xffff);
 80029ee:	f107 0310 	add.w	r3, r7, #16
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd fbec 	bl	80001d0 <strlen>
 80029f8:	4603      	mov	r3, r0
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	f107 0110 	add.w	r1, r7, #16
 8002a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a04:	481e      	ldr	r0, [pc, #120]	; (8002a80 <xTaskCreate+0xcc>)
 8002a06:	f7ff fc58 	bl	80022ba <HAL_UART_Transmit>
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 ff3a 	bl	8003888 <pvPortMalloc>
 8002a14:	6278      	str	r0, [r7, #36]	; 0x24

			if( pxStack != NULL )
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00e      	beq.n	8002a3a <xTaskCreate+0x86>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a1c:	2058      	movs	r0, #88	; 0x58
 8002a1e:	f000 ff33 	bl	8003888 <pvPortMalloc>
 8002a22:	62f8      	str	r0, [r7, #44]	; 0x2c

				if( pxNewTCB != NULL )
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <xTaskCreate+0x7e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a30:	e005      	b.n	8002a3e <xTaskCreate+0x8a>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a34:	f000 ffda 	bl	80039ec <vPortFree>
 8002a38:	e001      	b.n	8002a3e <xTaskCreate+0x8a>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <xTaskCreate+0xb8>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a44:	88fa      	ldrh	r2, [r7, #6]
 8002a46:	2300      	movs	r3, #0
 8002a48:	9303      	str	r3, [sp, #12]
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	9302      	str	r3, [sp, #8]
 8002a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f812 	bl	8002a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a62:	f000 f89f 	bl	8002ba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a66:	2301      	movs	r3, #1
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a6a:	e002      	b.n	8002a72 <xTaskCreate+0xbe>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		return xReturn;
 8002a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
	}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3730      	adds	r7, #48	; 0x30
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	080043e4 	.word	0x080043e4
 8002a80:	200015c0 	.word	0x200015c0

08002a84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	21a5      	movs	r1, #165	; 0xa5
 8002a9e:	f001 f84b 	bl	8003b38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002aac:	3b01      	subs	r3, #1
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f023 0307 	bic.w	r3, r3, #7
 8002aba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <prvInitialiseNewTask+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ad8:	bf00      	nop
 8002ada:	e7fe      	b.n	8002ada <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d01f      	beq.n	8002b22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	e012      	b.n	8002b0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	4413      	add	r3, r2
 8002aee:	7819      	ldrb	r1, [r3, #0]
 8002af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	4413      	add	r3, r2
 8002af6:	3334      	adds	r3, #52	; 0x34
 8002af8:	460a      	mov	r2, r1
 8002afa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	4413      	add	r3, r2
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d006      	beq.n	8002b16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	2b09      	cmp	r3, #9
 8002b12:	d9e9      	bls.n	8002ae8 <prvInitialiseNewTask+0x64>
 8002b14:	e000      	b.n	8002b18 <prvInitialiseNewTask+0x94>
			{
				break;
 8002b16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b20:	e003      	b.n	8002b2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d901      	bls.n	8002b34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b30:	2304      	movs	r3, #4
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b3e:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	2200      	movs	r2, #0
 8002b44:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	3304      	adds	r3, #4
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fe9e 	bl	800288c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	3318      	adds	r3, #24
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fe99 	bl	800288c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b62:	f1c3 0205 	rsb	r2, r3, #5
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	2200      	movs	r2, #0
 8002b74:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	69b8      	ldr	r0, [r7, #24]
 8002b84:	f000 fc62 	bl	800344c <pxPortInitialiseStack>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b9a:	bf00      	nop
 8002b9c:	3720      	adds	r7, #32
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bac:	f000 fd8a 	bl	80036c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <prvAddNewTaskToReadyList+0xc0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	4a2b      	ldr	r2, [pc, #172]	; (8002c64 <prvAddNewTaskToReadyList+0xc0>)
 8002bb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bba:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <prvAddNewTaskToReadyList+0xc4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002bc2:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <prvAddNewTaskToReadyList+0xc4>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002bc8:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <prvAddNewTaskToReadyList+0xc0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d110      	bne.n	8002bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002bd0:	f000 fb38 	bl	8003244 <prvInitialiseTaskLists>
 8002bd4:	e00d      	b.n	8002bf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bd6:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <prvAddNewTaskToReadyList+0xc8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bde:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <prvAddNewTaskToReadyList+0xc4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d802      	bhi.n	8002bf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bec:	4a1e      	ldr	r2, [pc, #120]	; (8002c68 <prvAddNewTaskToReadyList+0xc4>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bf2:	4b1f      	ldr	r3, [pc, #124]	; (8002c70 <prvAddNewTaskToReadyList+0xcc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <prvAddNewTaskToReadyList+0xcc>)
 8002bfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bfc:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <prvAddNewTaskToReadyList+0xcc>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	2201      	movs	r2, #1
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <prvAddNewTaskToReadyList+0xd0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <prvAddNewTaskToReadyList+0xd0>)
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4a15      	ldr	r2, [pc, #84]	; (8002c78 <prvAddNewTaskToReadyList+0xd4>)
 8002c24:	441a      	add	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	f7ff fe3a 	bl	80028a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c32:	f000 fd77 	bl	8003724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <prvAddNewTaskToReadyList+0xc8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00e      	beq.n	8002c5c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <prvAddNewTaskToReadyList+0xc4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d207      	bcs.n	8002c5c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <prvAddNewTaskToReadyList+0xd8>)
 8002c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000170 	.word	0x20000170
 8002c68:	20000098 	.word	0x20000098
 8002c6c:	2000017c 	.word	0x2000017c
 8002c70:	2000018c 	.word	0x2000018c
 8002c74:	20000178 	.word	0x20000178
 8002c78:	2000009c 	.word	0x2000009c
 8002c7c:	e000ed04 	.word	0xe000ed04

08002c80 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002c88:	f000 fd1c 	bl	80036c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d102      	bne.n	8002c98 <vTaskDelete+0x18>
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <vTaskDelete+0xf8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	e000      	b.n	8002c9a <vTaskDelete+0x1a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fe5d 	bl	8002960 <uxListRemove>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d115      	bne.n	8002cd8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb0:	4932      	ldr	r1, [pc, #200]	; (8002d7c <vTaskDelete+0xfc>)
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <vTaskDelete+0x58>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <vTaskDelete+0x100>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	4a2a      	ldr	r2, [pc, #168]	; (8002d80 <vTaskDelete+0x100>)
 8002cd6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3318      	adds	r3, #24
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fe3b 	bl	8002960 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002cea:	4b26      	ldr	r3, [pc, #152]	; (8002d84 <vTaskDelete+0x104>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	4a24      	ldr	r2, [pc, #144]	; (8002d84 <vTaskDelete+0x104>)
 8002cf2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002cf4:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <vTaskDelete+0xf8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d10b      	bne.n	8002d16 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3304      	adds	r3, #4
 8002d02:	4619      	mov	r1, r3
 8002d04:	4820      	ldr	r0, [pc, #128]	; (8002d88 <vTaskDelete+0x108>)
 8002d06:	f7ff fdce 	bl	80028a6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <vTaskDelete+0x10c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	4a1e      	ldr	r2, [pc, #120]	; (8002d8c <vTaskDelete+0x10c>)
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e009      	b.n	8002d2a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002d16:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <vTaskDelete+0x110>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <vTaskDelete+0x110>)
 8002d1e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fafd 	bl	8003320 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8002d26:	f000 fb0b 	bl	8003340 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002d2a:	f000 fcfb 	bl	8003724 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8002d2e:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <vTaskDelete+0x114>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01b      	beq.n	8002d6e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <vTaskDelete+0xf8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d116      	bne.n	8002d6e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002d40:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <vTaskDelete+0x118>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <vTaskDelete+0xde>
	__asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	60bb      	str	r3, [r7, #8]
}
 8002d5a:	bf00      	nop
 8002d5c:	e7fe      	b.n	8002d5c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <vTaskDelete+0x11c>)
 8002d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000098 	.word	0x20000098
 8002d7c:	2000009c 	.word	0x2000009c
 8002d80:	20000178 	.word	0x20000178
 8002d84:	2000018c 	.word	0x2000018c
 8002d88:	20000144 	.word	0x20000144
 8002d8c:	20000158 	.word	0x20000158
 8002d90:	20000170 	.word	0x20000170
 8002d94:	2000017c 	.word	0x2000017c
 8002d98:	20000198 	.word	0x20000198
 8002d9c:	e000ed04 	.word	0xe000ed04

08002da0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d017      	beq.n	8002de2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <vTaskDelay+0x60>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <vTaskDelay+0x30>
	__asm volatile
 8002dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	60bb      	str	r3, [r7, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	e7fe      	b.n	8002dce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002dd0:	f000 f862 	bl	8002e98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fad2 	bl	8003380 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ddc:	f000 f86a 	bl	8002eb4 <xTaskResumeAll>
 8002de0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d107      	bne.n	8002df8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <vTaskDelay+0x64>)
 8002dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000198 	.word	0x20000198
 8002e04:	e000ed04 	.word	0xe000ed04

08002e08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002e0e:	4b1c      	ldr	r3, [pc, #112]	; (8002e80 <vTaskStartScheduler+0x78>)
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	2300      	movs	r3, #0
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2300      	movs	r3, #0
 8002e18:	2282      	movs	r2, #130	; 0x82
 8002e1a:	491a      	ldr	r1, [pc, #104]	; (8002e84 <vTaskStartScheduler+0x7c>)
 8002e1c:	481a      	ldr	r0, [pc, #104]	; (8002e88 <vTaskStartScheduler+0x80>)
 8002e1e:	f7ff fdc9 	bl	80029b4 <xTaskCreate>
 8002e22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d116      	bne.n	8002e58 <vTaskStartScheduler+0x50>
	__asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	60bb      	str	r3, [r7, #8]
}
 8002e3c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <vTaskStartScheduler+0x84>)
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <vTaskStartScheduler+0x88>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <vTaskStartScheduler+0x8c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e52:	f000 fb85 	bl	8003560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e56:	e00e      	b.n	8002e76 <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5e:	d10a      	bne.n	8002e76 <vTaskStartScheduler+0x6e>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	607b      	str	r3, [r7, #4]
}
 8002e72:	bf00      	nop
 8002e74:	e7fe      	b.n	8002e74 <vTaskStartScheduler+0x6c>
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000194 	.word	0x20000194
 8002e84:	080043e8 	.word	0x080043e8
 8002e88:	08003215 	.word	0x08003215
 8002e8c:	20000190 	.word	0x20000190
 8002e90:	2000017c 	.word	0x2000017c
 8002e94:	20000174 	.word	0x20000174

08002e98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <vTaskSuspendAll+0x18>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	4a03      	ldr	r2, [pc, #12]	; (8002eb0 <vTaskSuspendAll+0x18>)
 8002ea4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	20000198 	.word	0x20000198

08002eb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002ec2:	4b41      	ldr	r3, [pc, #260]	; (8002fc8 <xTaskResumeAll+0x114>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <xTaskResumeAll+0x2c>
	__asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	603b      	str	r3, [r7, #0]
}
 8002edc:	bf00      	nop
 8002ede:	e7fe      	b.n	8002ede <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ee0:	f000 fbf0 	bl	80036c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002ee4:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <xTaskResumeAll+0x114>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	4a37      	ldr	r2, [pc, #220]	; (8002fc8 <xTaskResumeAll+0x114>)
 8002eec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eee:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <xTaskResumeAll+0x114>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d161      	bne.n	8002fba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ef6:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <xTaskResumeAll+0x118>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d05d      	beq.n	8002fba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002efe:	e02e      	b.n	8002f5e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f00:	4b33      	ldr	r3, [pc, #204]	; (8002fd0 <xTaskResumeAll+0x11c>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fd27 	bl	8002960 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3304      	adds	r3, #4
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fd22 	bl	8002960 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	2201      	movs	r2, #1
 8002f22:	409a      	lsls	r2, r3
 8002f24:	4b2b      	ldr	r3, [pc, #172]	; (8002fd4 <xTaskResumeAll+0x120>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	4a2a      	ldr	r2, [pc, #168]	; (8002fd4 <xTaskResumeAll+0x120>)
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4a27      	ldr	r2, [pc, #156]	; (8002fd8 <xTaskResumeAll+0x124>)
 8002f3c:	441a      	add	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3304      	adds	r3, #4
 8002f42:	4619      	mov	r1, r3
 8002f44:	4610      	mov	r0, r2
 8002f46:	f7ff fcae 	bl	80028a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4e:	4b23      	ldr	r3, [pc, #140]	; (8002fdc <xTaskResumeAll+0x128>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d302      	bcc.n	8002f5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002f58:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <xTaskResumeAll+0x12c>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f5e:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <xTaskResumeAll+0x11c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1cc      	bne.n	8002f00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f6c:	f000 f9e8 	bl	8003340 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f70:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <xTaskResumeAll+0x130>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f7c:	f000 f836 	bl	8002fec <xTaskIncrementTick>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002f86:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <xTaskResumeAll+0x12c>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f1      	bne.n	8002f7c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <xTaskResumeAll+0x130>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <xTaskResumeAll+0x12c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002faa:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <xTaskResumeAll+0x134>)
 8002fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fba:	f000 fbb3 	bl	8003724 <vPortExitCritical>

	return xAlreadyYielded;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000198 	.word	0x20000198
 8002fcc:	20000170 	.word	0x20000170
 8002fd0:	20000130 	.word	0x20000130
 8002fd4:	20000178 	.word	0x20000178
 8002fd8:	2000009c 	.word	0x2000009c
 8002fdc:	20000098 	.word	0x20000098
 8002fe0:	20000184 	.word	0x20000184
 8002fe4:	20000180 	.word	0x20000180
 8002fe8:	e000ed04 	.word	0xe000ed04

08002fec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ff6:	4b4e      	ldr	r3, [pc, #312]	; (8003130 <xTaskIncrementTick+0x144>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 8088 	bne.w	8003110 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003000:	4b4c      	ldr	r3, [pc, #304]	; (8003134 <xTaskIncrementTick+0x148>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003008:	4a4a      	ldr	r2, [pc, #296]	; (8003134 <xTaskIncrementTick+0x148>)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d120      	bne.n	8003056 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003014:	4b48      	ldr	r3, [pc, #288]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <xTaskIncrementTick+0x48>
	__asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	603b      	str	r3, [r7, #0]
}
 8003030:	bf00      	nop
 8003032:	e7fe      	b.n	8003032 <xTaskIncrementTick+0x46>
 8003034:	4b40      	ldr	r3, [pc, #256]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4b40      	ldr	r3, [pc, #256]	; (800313c <xTaskIncrementTick+0x150>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a3e      	ldr	r2, [pc, #248]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4a3e      	ldr	r2, [pc, #248]	; (800313c <xTaskIncrementTick+0x150>)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b3d      	ldr	r3, [pc, #244]	; (8003140 <xTaskIncrementTick+0x154>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3301      	adds	r3, #1
 800304e:	4a3c      	ldr	r2, [pc, #240]	; (8003140 <xTaskIncrementTick+0x154>)
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	f000 f975 	bl	8003340 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003056:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <xTaskIncrementTick+0x158>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	429a      	cmp	r2, r3
 800305e:	d348      	bcc.n	80030f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003060:	4b35      	ldr	r3, [pc, #212]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d104      	bne.n	8003074 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800306a:	4b36      	ldr	r3, [pc, #216]	; (8003144 <xTaskIncrementTick+0x158>)
 800306c:	f04f 32ff 	mov.w	r2, #4294967295
 8003070:	601a      	str	r2, [r3, #0]
					break;
 8003072:	e03e      	b.n	80030f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003074:	4b30      	ldr	r3, [pc, #192]	; (8003138 <xTaskIncrementTick+0x14c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	429a      	cmp	r2, r3
 800308a:	d203      	bcs.n	8003094 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800308c:	4a2d      	ldr	r2, [pc, #180]	; (8003144 <xTaskIncrementTick+0x158>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003092:	e02e      	b.n	80030f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	3304      	adds	r3, #4
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fc61 	bl	8002960 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	3318      	adds	r3, #24
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fc58 	bl	8002960 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	2201      	movs	r2, #1
 80030b6:	409a      	lsls	r2, r3
 80030b8:	4b23      	ldr	r3, [pc, #140]	; (8003148 <xTaskIncrementTick+0x15c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4313      	orrs	r3, r2
 80030be:	4a22      	ldr	r2, [pc, #136]	; (8003148 <xTaskIncrementTick+0x15c>)
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4a1f      	ldr	r2, [pc, #124]	; (800314c <xTaskIncrementTick+0x160>)
 80030d0:	441a      	add	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3304      	adds	r3, #4
 80030d6:	4619      	mov	r1, r3
 80030d8:	4610      	mov	r0, r2
 80030da:	f7ff fbe4 	bl	80028a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e2:	4b1b      	ldr	r3, [pc, #108]	; (8003150 <xTaskIncrementTick+0x164>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d3b9      	bcc.n	8003060 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80030ec:	2301      	movs	r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030f0:	e7b6      	b.n	8003060 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <xTaskIncrementTick+0x164>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f8:	4914      	ldr	r1, [pc, #80]	; (800314c <xTaskIncrementTick+0x160>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d907      	bls.n	800311a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800310a:	2301      	movs	r3, #1
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	e004      	b.n	800311a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <xTaskIncrementTick+0x168>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	4a0f      	ldr	r2, [pc, #60]	; (8003154 <xTaskIncrementTick+0x168>)
 8003118:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <xTaskIncrementTick+0x16c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8003122:	2301      	movs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003126:	697b      	ldr	r3, [r7, #20]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000198 	.word	0x20000198
 8003134:	20000174 	.word	0x20000174
 8003138:	20000128 	.word	0x20000128
 800313c:	2000012c 	.word	0x2000012c
 8003140:	20000188 	.word	0x20000188
 8003144:	20000190 	.word	0x20000190
 8003148:	20000178 	.word	0x20000178
 800314c:	2000009c 	.word	0x2000009c
 8003150:	20000098 	.word	0x20000098
 8003154:	20000180 	.word	0x20000180
 8003158:	20000184 	.word	0x20000184

0800315c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003162:	4b27      	ldr	r3, [pc, #156]	; (8003200 <vTaskSwitchContext+0xa4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <vTaskSwitchContext+0xa8>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003170:	e03f      	b.n	80031f2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <vTaskSwitchContext+0xa8>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003178:	4b23      	ldr	r3, [pc, #140]	; (8003208 <vTaskSwitchContext+0xac>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003186:	7afb      	ldrb	r3, [r7, #11]
 8003188:	f1c3 031f 	rsb	r3, r3, #31
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	491f      	ldr	r1, [pc, #124]	; (800320c <vTaskSwitchContext+0xb0>)
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	607b      	str	r3, [r7, #4]
}
 80031b4:	bf00      	nop
 80031b6:	e7fe      	b.n	80031b6 <vTaskSwitchContext+0x5a>
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4a12      	ldr	r2, [pc, #72]	; (800320c <vTaskSwitchContext+0xb0>)
 80031c4:	4413      	add	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	3308      	adds	r3, #8
 80031da:	429a      	cmp	r2, r3
 80031dc:	d104      	bne.n	80031e8 <vTaskSwitchContext+0x8c>
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <vTaskSwitchContext+0xb4>)
 80031f0:	6013      	str	r3, [r2, #0]
}
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000198 	.word	0x20000198
 8003204:	20000184 	.word	0x20000184
 8003208:	20000178 	.word	0x20000178
 800320c:	2000009c 	.word	0x2000009c
 8003210:	20000098 	.word	0x20000098

08003214 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800321c:	f000 f852 	bl	80032c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <prvIdleTask+0x28>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d9f9      	bls.n	800321c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <prvIdleTask+0x2c>)
 800322a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003238:	e7f0      	b.n	800321c <prvIdleTask+0x8>
 800323a:	bf00      	nop
 800323c:	2000009c 	.word	0x2000009c
 8003240:	e000ed04 	.word	0xe000ed04

08003244 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	e00c      	b.n	800326a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <prvInitialiseTaskLists+0x60>)
 800325c:	4413      	add	r3, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff faf4 	bl	800284c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3301      	adds	r3, #1
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d9ef      	bls.n	8003250 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003270:	480d      	ldr	r0, [pc, #52]	; (80032a8 <prvInitialiseTaskLists+0x64>)
 8003272:	f7ff faeb 	bl	800284c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003276:	480d      	ldr	r0, [pc, #52]	; (80032ac <prvInitialiseTaskLists+0x68>)
 8003278:	f7ff fae8 	bl	800284c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800327c:	480c      	ldr	r0, [pc, #48]	; (80032b0 <prvInitialiseTaskLists+0x6c>)
 800327e:	f7ff fae5 	bl	800284c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003282:	480c      	ldr	r0, [pc, #48]	; (80032b4 <prvInitialiseTaskLists+0x70>)
 8003284:	f7ff fae2 	bl	800284c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003288:	480b      	ldr	r0, [pc, #44]	; (80032b8 <prvInitialiseTaskLists+0x74>)
 800328a:	f7ff fadf 	bl	800284c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <prvInitialiseTaskLists+0x78>)
 8003290:	4a05      	ldr	r2, [pc, #20]	; (80032a8 <prvInitialiseTaskLists+0x64>)
 8003292:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <prvInitialiseTaskLists+0x7c>)
 8003296:	4a05      	ldr	r2, [pc, #20]	; (80032ac <prvInitialiseTaskLists+0x68>)
 8003298:	601a      	str	r2, [r3, #0]
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	2000009c 	.word	0x2000009c
 80032a8:	20000100 	.word	0x20000100
 80032ac:	20000114 	.word	0x20000114
 80032b0:	20000130 	.word	0x20000130
 80032b4:	20000144 	.word	0x20000144
 80032b8:	2000015c 	.word	0x2000015c
 80032bc:	20000128 	.word	0x20000128
 80032c0:	2000012c 	.word	0x2000012c

080032c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032ca:	e019      	b.n	8003300 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80032cc:	f000 f9fa 	bl	80036c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d0:	4b10      	ldr	r3, [pc, #64]	; (8003314 <prvCheckTasksWaitingTermination+0x50>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fb3f 	bl	8002960 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <prvCheckTasksWaitingTermination+0x54>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	4a0b      	ldr	r2, [pc, #44]	; (8003318 <prvCheckTasksWaitingTermination+0x54>)
 80032ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <prvCheckTasksWaitingTermination+0x58>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <prvCheckTasksWaitingTermination+0x58>)
 80032f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032f6:	f000 fa15 	bl	8003724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f810 	bl	8003320 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <prvCheckTasksWaitingTermination+0x58>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e1      	bne.n	80032cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000144 	.word	0x20000144
 8003318:	20000170 	.word	0x20000170
 800331c:	20000158 	.word	0x20000158

08003320 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	4618      	mov	r0, r3
 800332e:	f000 fb5d 	bl	80039ec <vPortFree>
			vPortFree( pxTCB );
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fb5a 	bl	80039ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003346:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <prvResetNextTaskUnblockTime+0x38>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d104      	bne.n	800335a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003350:	4b0a      	ldr	r3, [pc, #40]	; (800337c <prvResetNextTaskUnblockTime+0x3c>)
 8003352:	f04f 32ff 	mov.w	r2, #4294967295
 8003356:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003358:	e008      	b.n	800336c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <prvResetNextTaskUnblockTime+0x38>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <prvResetNextTaskUnblockTime+0x3c>)
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	20000128 	.word	0x20000128
 800337c:	20000190 	.word	0x20000190

08003380 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800338a:	4b29      	ldr	r3, [pc, #164]	; (8003430 <prvAddCurrentTaskToDelayedList+0xb0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003390:	4b28      	ldr	r3, [pc, #160]	; (8003434 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3304      	adds	r3, #4
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff fae2 	bl	8002960 <uxListRemove>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10b      	bne.n	80033ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033a2:	4b24      	ldr	r3, [pc, #144]	; (8003434 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	2201      	movs	r2, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43da      	mvns	r2, r3
 80033b0:	4b21      	ldr	r3, [pc, #132]	; (8003438 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4013      	ands	r3, r2
 80033b6:	4a20      	ldr	r2, [pc, #128]	; (8003438 <prvAddCurrentTaskToDelayedList+0xb8>)
 80033b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d10a      	bne.n	80033d8 <prvAddCurrentTaskToDelayedList+0x58>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033c8:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3304      	adds	r3, #4
 80033ce:	4619      	mov	r1, r3
 80033d0:	481a      	ldr	r0, [pc, #104]	; (800343c <prvAddCurrentTaskToDelayedList+0xbc>)
 80033d2:	f7ff fa68 	bl	80028a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033d6:	e026      	b.n	8003426 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033e0:	4b14      	ldr	r3, [pc, #80]	; (8003434 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d209      	bcs.n	8003404 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033f0:	4b13      	ldr	r3, [pc, #76]	; (8003440 <prvAddCurrentTaskToDelayedList+0xc0>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3304      	adds	r3, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	f7ff fa76 	bl	80028ee <vListInsert>
}
 8003402:	e010      	b.n	8003426 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <prvAddCurrentTaskToDelayedList+0xb4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3304      	adds	r3, #4
 800340e:	4619      	mov	r1, r3
 8003410:	4610      	mov	r0, r2
 8003412:	f7ff fa6c 	bl	80028ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003416:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	429a      	cmp	r2, r3
 800341e:	d202      	bcs.n	8003426 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003420:	4a09      	ldr	r2, [pc, #36]	; (8003448 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	6013      	str	r3, [r2, #0]
}
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000174 	.word	0x20000174
 8003434:	20000098 	.word	0x20000098
 8003438:	20000178 	.word	0x20000178
 800343c:	2000015c 	.word	0x2000015c
 8003440:	2000012c 	.word	0x2000012c
 8003444:	20000128 	.word	0x20000128
 8003448:	20000190 	.word	0x20000190

0800344c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3b04      	subs	r3, #4
 800345c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3b04      	subs	r3, #4
 800346a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f023 0201 	bic.w	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3b04      	subs	r3, #4
 800347a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800347c:	4a0c      	ldr	r2, [pc, #48]	; (80034b0 <pxPortInitialiseStack+0x64>)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	3b14      	subs	r3, #20
 8003486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3b04      	subs	r3, #4
 8003492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f06f 0202 	mvn.w	r2, #2
 800349a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3b20      	subs	r3, #32
 80034a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80034a2:	68fb      	ldr	r3, [r7, #12]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	080034b5 	.word	0x080034b5

080034b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80034be:	4b12      	ldr	r3, [pc, #72]	; (8003508 <prvTaskExitError+0x54>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d00a      	beq.n	80034de <prvTaskExitError+0x2a>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	60fb      	str	r3, [r7, #12]
}
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <prvTaskExitError+0x28>
	__asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	60bb      	str	r3, [r7, #8]
}
 80034f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034f2:	bf00      	nop
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0fc      	beq.n	80034f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034fa:	bf00      	nop
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	2000000c 	.word	0x2000000c
 800350c:	00000000 	.word	0x00000000

08003510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <pxCurrentTCBConst2>)
 8003512:	6819      	ldr	r1, [r3, #0]
 8003514:	6808      	ldr	r0, [r1, #0]
 8003516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800351a:	f380 8809 	msr	PSP, r0
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f04f 0000 	mov.w	r0, #0
 8003526:	f380 8811 	msr	BASEPRI, r0
 800352a:	4770      	bx	lr
 800352c:	f3af 8000 	nop.w

08003530 <pxCurrentTCBConst2>:
 8003530:	20000098 	.word	0x20000098
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop

08003538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003538:	4808      	ldr	r0, [pc, #32]	; (800355c <prvPortStartFirstTask+0x24>)
 800353a:	6800      	ldr	r0, [r0, #0]
 800353c:	6800      	ldr	r0, [r0, #0]
 800353e:	f380 8808 	msr	MSP, r0
 8003542:	f04f 0000 	mov.w	r0, #0
 8003546:	f380 8814 	msr	CONTROL, r0
 800354a:	b662      	cpsie	i
 800354c:	b661      	cpsie	f
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	df00      	svc	0
 8003558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800355a:	bf00      	nop
 800355c:	e000ed08 	.word	0xe000ed08

08003560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003566:	4b4e      	ldr	r3, [pc, #312]	; (80036a0 <xPortStartScheduler+0x140>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a4e      	ldr	r2, [pc, #312]	; (80036a4 <xPortStartScheduler+0x144>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d10a      	bne.n	8003586 <xPortStartScheduler+0x26>
	__asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	61bb      	str	r3, [r7, #24]
}
 8003582:	bf00      	nop
 8003584:	e7fe      	b.n	8003584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003586:	4b46      	ldr	r3, [pc, #280]	; (80036a0 <xPortStartScheduler+0x140>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a47      	ldr	r2, [pc, #284]	; (80036a8 <xPortStartScheduler+0x148>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10a      	bne.n	80035a6 <xPortStartScheduler+0x46>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	617b      	str	r3, [r7, #20]
}
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035a6:	4b41      	ldr	r3, [pc, #260]	; (80036ac <xPortStartScheduler+0x14c>)
 80035a8:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	22ff      	movs	r2, #255	; 0xff
 80035b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <xPortStartScheduler+0x150>)
 80035cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035ce:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <xPortStartScheduler+0x154>)
 80035d0:	2207      	movs	r2, #7
 80035d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035d4:	e009      	b.n	80035ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80035d6:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <xPortStartScheduler+0x154>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3b01      	subs	r3, #1
 80035dc:	4a35      	ldr	r2, [pc, #212]	; (80036b4 <xPortStartScheduler+0x154>)
 80035de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f2:	2b80      	cmp	r3, #128	; 0x80
 80035f4:	d0ef      	beq.n	80035d6 <xPortStartScheduler+0x76>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 80035f6:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <xPortStartScheduler+0x154>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f1c3 0307 	rsb	r3, r3, #7
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d00a      	beq.n	8003618 <xPortStartScheduler+0xb8>
	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	613b      	str	r3, [r7, #16]
}
 8003614:	bf00      	nop
 8003616:	e7fe      	b.n	8003616 <xPortStartScheduler+0xb6>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003618:	4b26      	ldr	r3, [pc, #152]	; (80036b4 <xPortStartScheduler+0x154>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1c3 0307 	rsb	r3, r3, #7
 8003620:	2b04      	cmp	r3, #4
 8003622:	d00a      	beq.n	800363a <xPortStartScheduler+0xda>
	__asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	60fb      	str	r3, [r7, #12]
}
 8003636:	bf00      	nop
 8003638:	e7fe      	b.n	8003638 <xPortStartScheduler+0xd8>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800363a:	4b1e      	ldr	r3, [pc, #120]	; (80036b4 <xPortStartScheduler+0x154>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <xPortStartScheduler+0x154>)
 8003642:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003644:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <xPortStartScheduler+0x154>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800364c:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <xPortStartScheduler+0x154>)
 800364e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003658:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <xPortStartScheduler+0x158>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a16      	ldr	r2, [pc, #88]	; (80036b8 <xPortStartScheduler+0x158>)
 800365e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003662:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <xPortStartScheduler+0x158>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <xPortStartScheduler+0x158>)
 800366a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800366e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003670:	f000 f8dc 	bl	800382c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <xPortStartScheduler+0x15c>)
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800367a:	f000 f8fb 	bl	8003874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800367e:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <xPortStartScheduler+0x160>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a0f      	ldr	r2, [pc, #60]	; (80036c0 <xPortStartScheduler+0x160>)
 8003684:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003688:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800368a:	f7ff ff55 	bl	8003538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800368e:	f7ff fd65 	bl	800315c <vTaskSwitchContext>
	prvTaskExitError();
 8003692:	f7ff ff0f 	bl	80034b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3720      	adds	r7, #32
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	e000ed00 	.word	0xe000ed00
 80036a4:	410fc271 	.word	0x410fc271
 80036a8:	410fc270 	.word	0x410fc270
 80036ac:	e000e400 	.word	0xe000e400
 80036b0:	2000019c 	.word	0x2000019c
 80036b4:	200001a0 	.word	0x200001a0
 80036b8:	e000ed20 	.word	0xe000ed20
 80036bc:	2000000c 	.word	0x2000000c
 80036c0:	e000ef34 	.word	0xe000ef34

080036c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	607b      	str	r3, [r7, #4]
}
 80036dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036de:	4b0f      	ldr	r3, [pc, #60]	; (800371c <vPortEnterCritical+0x58>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3301      	adds	r3, #1
 80036e4:	4a0d      	ldr	r2, [pc, #52]	; (800371c <vPortEnterCritical+0x58>)
 80036e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <vPortEnterCritical+0x58>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10f      	bne.n	8003710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <vPortEnterCritical+0x5c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <vPortEnterCritical+0x4c>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	603b      	str	r3, [r7, #0]
}
 800370c:	bf00      	nop
 800370e:	e7fe      	b.n	800370e <vPortEnterCritical+0x4a>
	}
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	2000000c 	.word	0x2000000c
 8003720:	e000ed04 	.word	0xe000ed04

08003724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <vPortExitCritical+0x50>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10a      	bne.n	8003748 <vPortExitCritical+0x24>
	__asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	607b      	str	r3, [r7, #4]
}
 8003744:	bf00      	nop
 8003746:	e7fe      	b.n	8003746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <vPortExitCritical+0x50>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3b01      	subs	r3, #1
 800374e:	4a09      	ldr	r2, [pc, #36]	; (8003774 <vPortExitCritical+0x50>)
 8003750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <vPortExitCritical+0x50>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d105      	bne.n	8003766 <vPortExitCritical+0x42>
 800375a:	2300      	movs	r3, #0
 800375c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	2000000c 	.word	0x2000000c
	...

08003780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003780:	f3ef 8009 	mrs	r0, PSP
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <pxCurrentTCBConst>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	f01e 0f10 	tst.w	lr, #16
 8003790:	bf08      	it	eq
 8003792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800379a:	6010      	str	r0, [r2, #0]
 800379c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80037a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037a4:	f380 8811 	msr	BASEPRI, r0
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f7ff fcd4 	bl	800315c <vTaskSwitchContext>
 80037b4:	f04f 0000 	mov.w	r0, #0
 80037b8:	f380 8811 	msr	BASEPRI, r0
 80037bc:	bc09      	pop	{r0, r3}
 80037be:	6819      	ldr	r1, [r3, #0]
 80037c0:	6808      	ldr	r0, [r1, #0]
 80037c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c6:	f01e 0f10 	tst.w	lr, #16
 80037ca:	bf08      	it	eq
 80037cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80037d0:	f380 8809 	msr	PSP, r0
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	f3af 8000 	nop.w

080037e0 <pxCurrentTCBConst>:
 80037e0:	20000098 	.word	0x20000098
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop

080037e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	607b      	str	r3, [r7, #4]
}
 8003800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003802:	f7ff fbf3 	bl	8002fec <xTaskIncrementTick>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <SysTick_Handler+0x40>)
 800380e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	2300      	movs	r3, #0
 8003816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f383 8811 	msr	BASEPRI, r3
}
 800381e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	e000ed04 	.word	0xe000ed04

0800382c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <vPortSetupTimerInterrupt+0x34>)
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <vPortSetupTimerInterrupt+0x38>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <vPortSetupTimerInterrupt+0x3c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a0a      	ldr	r2, [pc, #40]	; (800386c <vPortSetupTimerInterrupt+0x40>)
 8003842:	fba2 2303 	umull	r2, r3, r2, r3
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	4a09      	ldr	r2, [pc, #36]	; (8003870 <vPortSetupTimerInterrupt+0x44>)
 800384a:	3b01      	subs	r3, #1
 800384c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800384e:	4b04      	ldr	r3, [pc, #16]	; (8003860 <vPortSetupTimerInterrupt+0x34>)
 8003850:	2207      	movs	r2, #7
 8003852:	601a      	str	r2, [r3, #0]
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	e000e010 	.word	0xe000e010
 8003864:	e000e018 	.word	0xe000e018
 8003868:	20000000 	.word	0x20000000
 800386c:	10624dd3 	.word	0x10624dd3
 8003870:	e000e014 	.word	0xe000e014

08003874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003884 <vPortEnableVFP+0x10>
 8003878:	6801      	ldr	r1, [r0, #0]
 800387a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800387e:	6001      	str	r1, [r0, #0]
 8003880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003882:	bf00      	nop
 8003884:	e000ed88 	.word	0xe000ed88

08003888 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlock;									        \
}                                                                                   \
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b0a2      	sub	sp, #136	; 0x88
 800388c:	af02      	add	r7, sp, #8
 800388e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8003890:	2300      	movs	r3, #0
 8003892:	677b      	str	r3, [r7, #116]	; 0x74
size_t BlockSize, WantedSize;
char data[80];
WantedSize = xWantedSize;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	66fb      	str	r3, [r7, #108]	; 0x6c

	vTaskSuspendAll();
 8003898:	f7ff fafe 	bl	8002e98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 800389c:	4b4d      	ldr	r3, [pc, #308]	; (80039d4 <pvPortMalloc+0x14c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d104      	bne.n	80038ae <pvPortMalloc+0x26>
		{
			prvHeapInit();
 80038a4:	f000 f8de 	bl	8003a64 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 80038a8:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <pvPortMalloc+0x14c>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00e      	beq.n	80038d2 <pvPortMalloc+0x4a>
		{
			xWantedSize += heapSTRUCT_SIZE;
 80038b4:	2308      	movs	r3, #8
 80038b6:	461a      	mov	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4413      	add	r3, r2
 80038bc:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d004      	beq.n	80038d2 <pvPortMalloc+0x4a>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f023 0307 	bic.w	r3, r3, #7
 80038ce:	3308      	adds	r3, #8
 80038d0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d059      	beq.n	800398c <pvPortMalloc+0x104>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f241 32f7 	movw	r2, #5111	; 0x13f7
 80038de:	4293      	cmp	r3, r2
 80038e0:	d854      	bhi.n	800398c <pvPortMalloc+0x104>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 80038e2:	4b3d      	ldr	r3, [pc, #244]	; (80039d8 <pvPortMalloc+0x150>)
 80038e4:	67bb      	str	r3, [r7, #120]	; 0x78
			pxBlock = xStart.pxNextFreeBlock;
 80038e6:	4b3c      	ldr	r3, [pc, #240]	; (80039d8 <pvPortMalloc+0x150>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	67fb      	str	r3, [r7, #124]	; 0x7c
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038ec:	e004      	b.n	80038f8 <pvPortMalloc+0x70>
			{
				pxPreviousBlock = pxBlock;
 80038ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038f0:	67bb      	str	r3, [r7, #120]	; 0x78
				pxBlock = pxBlock->pxNextFreeBlock;
 80038f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	67fb      	str	r3, [r7, #124]	; 0x7c
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80038f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d903      	bls.n	800390a <pvPortMalloc+0x82>
 8003902:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f1      	bne.n	80038ee <pvPortMalloc+0x66>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 800390a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800390c:	4a33      	ldr	r2, [pc, #204]	; (80039dc <pvPortMalloc+0x154>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d03c      	beq.n	800398c <pvPortMalloc+0x104>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8003912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2208      	movs	r2, #8
 8003918:	4413      	add	r3, r2
 800391a:	677b      	str	r3, [r7, #116]	; 0x74

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800391c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003922:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003924:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2208      	movs	r2, #8
 800392e:	0052      	lsls	r2, r2, #1
 8003930:	4293      	cmp	r3, r2
 8003932:	d924      	bls.n	800397e <pvPortMalloc+0xf6>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003934:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4413      	add	r3, r2
 800393a:	66bb      	str	r3, [r7, #104]	; 0x68

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800393c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	1ad2      	subs	r2, r2, r3
 8003944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003946:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8003948:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800394e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003950:	667b      	str	r3, [r7, #100]	; 0x64
 8003952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	663b      	str	r3, [r7, #96]	; 0x60
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <pvPortMalloc+0x150>)
 800395a:	673b      	str	r3, [r7, #112]	; 0x70
 800395c:	e002      	b.n	8003964 <pvPortMalloc+0xdc>
 800395e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	673b      	str	r3, [r7, #112]	; 0x70
 8003964:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800396c:	429a      	cmp	r2, r3
 800396e:	d8f6      	bhi.n	800395e <pvPortMalloc+0xd6>
 8003970:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800397a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800397c:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800397e:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <pvPortMalloc+0x158>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	4a15      	ldr	r2, [pc, #84]	; (80039e0 <pvPortMalloc+0x158>)
 800398a:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800398c:	f7ff fa92 	bl	8002eb4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

    BlockSize = xWantedSize;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	65fb      	str	r3, [r7, #92]	; 0x5c
    sprintf(data, "pvReturn: %p | heapSTRUCT_SIZE: %0d | WantedSize: %3d | BlockSize: %3d\n\r", pvReturn, heapSTRUCT_SIZE, WantedSize, BlockSize);
 8003994:	2308      	movs	r3, #8
 8003996:	461a      	mov	r2, r3
 8003998:	f107 000c 	add.w	r0, r7, #12
 800399c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80039a8:	490e      	ldr	r1, [pc, #56]	; (80039e4 <pvPortMalloc+0x15c>)
 80039aa:	f000 f8cd 	bl	8003b48 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)data, strlen(data), 0xffff);
 80039ae:	f107 030c 	add.w	r3, r7, #12
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fc fc0c 	bl	80001d0 <strlen>
 80039b8:	4603      	mov	r3, r0
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	f107 010c 	add.w	r1, r7, #12
 80039c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039c4:	4808      	ldr	r0, [pc, #32]	; (80039e8 <pvPortMalloc+0x160>)
 80039c6:	f7fe fc78 	bl	80022ba <HAL_UART_Transmit>

	return pvReturn;
 80039ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3780      	adds	r7, #128	; 0x80
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	200015b4 	.word	0x200015b4
 80039d8:	200015a4 	.word	0x200015a4
 80039dc:	200015ac 	.word	0x200015ac
 80039e0:	20000010 	.word	0x20000010
 80039e4:	080043f0 	.word	0x080043f0
 80039e8:	200015c0 	.word	0x200015c0

080039ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	61bb      	str	r3, [r7, #24]
BlockLink_t *pxLink;

	if( pv != NULL )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d029      	beq.n	8003a52 <vPortFree+0x66>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 80039fe:	2308      	movs	r3, #8
 8003a00:	425b      	negs	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4413      	add	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	617b      	str	r3, [r7, #20]

		vTaskSuspendAll();
 8003a0c:	f7ff fa44 	bl	8002e98 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <vPortFree+0x70>)
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	e002      	b.n	8003a26 <vPortFree+0x3a>
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d8f6      	bhi.n	8003a20 <vPortFree+0x34>
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <vPortFree+0x74>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4413      	add	r3, r2
 8003a4a:	4a05      	ldr	r2, [pc, #20]	; (8003a60 <vPortFree+0x74>)
 8003a4c:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8003a4e:	f7ff fa31 	bl	8002eb4 <xTaskResumeAll>
	}
}
 8003a52:	bf00      	nop
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	200015a4 	.word	0x200015a4
 8003a60:	20000010 	.word	0x20000010

08003a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8003a6a:	4b10      	ldr	r3, [pc, #64]	; (8003aac <prvHeapInit+0x48>)
 8003a6c:	f023 0307 	bic.w	r3, r3, #7
 8003a70:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a72:	4a0f      	ldr	r2, [pc, #60]	; (8003ab0 <prvHeapInit+0x4c>)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003a78:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <prvHeapInit+0x4c>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <prvHeapInit+0x50>)
 8003a80:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003a84:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <prvHeapInit+0x50>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f241 32f8 	movw	r2, #5112	; 0x13f8
 8003a96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	4a06      	ldr	r2, [pc, #24]	; (8003ab4 <prvHeapInit+0x50>)
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	200001ac 	.word	0x200001ac
 8003ab0:	200015a4 	.word	0x200015a4
 8003ab4:	200015ac 	.word	0x200015ac

08003ab8 <vPrintFreeList>:
/*-----------------------------------------------------------*/

void vPrintFreeList(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
     * Reference format
     * > sprintf(data, "StartAddress heapSTRUCT_SIZE xBlockSize EndAddress\n\r");
     * > sprintf(data, "%p         %d           %4d         %p\n\r", ...);
     * > sprintf(data, "configADJUSTED_HEAP_SIZE: %0d xFreeBytesRemaining: %0d\n\r", ...);
     */
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <__errno>:
 8003ac8:	4b01      	ldr	r3, [pc, #4]	; (8003ad0 <__errno+0x8>)
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000014 	.word	0x20000014

08003ad4 <__libc_init_array>:
 8003ad4:	b570      	push	{r4, r5, r6, lr}
 8003ad6:	4d0d      	ldr	r5, [pc, #52]	; (8003b0c <__libc_init_array+0x38>)
 8003ad8:	4c0d      	ldr	r4, [pc, #52]	; (8003b10 <__libc_init_array+0x3c>)
 8003ada:	1b64      	subs	r4, r4, r5
 8003adc:	10a4      	asrs	r4, r4, #2
 8003ade:	2600      	movs	r6, #0
 8003ae0:	42a6      	cmp	r6, r4
 8003ae2:	d109      	bne.n	8003af8 <__libc_init_array+0x24>
 8003ae4:	4d0b      	ldr	r5, [pc, #44]	; (8003b14 <__libc_init_array+0x40>)
 8003ae6:	4c0c      	ldr	r4, [pc, #48]	; (8003b18 <__libc_init_array+0x44>)
 8003ae8:	f000 fc56 	bl	8004398 <_init>
 8003aec:	1b64      	subs	r4, r4, r5
 8003aee:	10a4      	asrs	r4, r4, #2
 8003af0:	2600      	movs	r6, #0
 8003af2:	42a6      	cmp	r6, r4
 8003af4:	d105      	bne.n	8003b02 <__libc_init_array+0x2e>
 8003af6:	bd70      	pop	{r4, r5, r6, pc}
 8003af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003afc:	4798      	blx	r3
 8003afe:	3601      	adds	r6, #1
 8003b00:	e7ee      	b.n	8003ae0 <__libc_init_array+0xc>
 8003b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b06:	4798      	blx	r3
 8003b08:	3601      	adds	r6, #1
 8003b0a:	e7f2      	b.n	8003af2 <__libc_init_array+0x1e>
 8003b0c:	08004490 	.word	0x08004490
 8003b10:	08004490 	.word	0x08004490
 8003b14:	08004490 	.word	0x08004490
 8003b18:	08004494 	.word	0x08004494

08003b1c <memcpy>:
 8003b1c:	440a      	add	r2, r1
 8003b1e:	4291      	cmp	r1, r2
 8003b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b24:	d100      	bne.n	8003b28 <memcpy+0xc>
 8003b26:	4770      	bx	lr
 8003b28:	b510      	push	{r4, lr}
 8003b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b32:	4291      	cmp	r1, r2
 8003b34:	d1f9      	bne.n	8003b2a <memcpy+0xe>
 8003b36:	bd10      	pop	{r4, pc}

08003b38 <memset>:
 8003b38:	4402      	add	r2, r0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d100      	bne.n	8003b42 <memset+0xa>
 8003b40:	4770      	bx	lr
 8003b42:	f803 1b01 	strb.w	r1, [r3], #1
 8003b46:	e7f9      	b.n	8003b3c <memset+0x4>

08003b48 <siprintf>:
 8003b48:	b40e      	push	{r1, r2, r3}
 8003b4a:	b500      	push	{lr}
 8003b4c:	b09c      	sub	sp, #112	; 0x70
 8003b4e:	ab1d      	add	r3, sp, #116	; 0x74
 8003b50:	9002      	str	r0, [sp, #8]
 8003b52:	9006      	str	r0, [sp, #24]
 8003b54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b58:	4809      	ldr	r0, [pc, #36]	; (8003b80 <siprintf+0x38>)
 8003b5a:	9107      	str	r1, [sp, #28]
 8003b5c:	9104      	str	r1, [sp, #16]
 8003b5e:	4909      	ldr	r1, [pc, #36]	; (8003b84 <siprintf+0x3c>)
 8003b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b64:	9105      	str	r1, [sp, #20]
 8003b66:	6800      	ldr	r0, [r0, #0]
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	a902      	add	r1, sp, #8
 8003b6c:	f000 f870 	bl	8003c50 <_svfiprintf_r>
 8003b70:	9b02      	ldr	r3, [sp, #8]
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	b01c      	add	sp, #112	; 0x70
 8003b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b7c:	b003      	add	sp, #12
 8003b7e:	4770      	bx	lr
 8003b80:	20000014 	.word	0x20000014
 8003b84:	ffff0208 	.word	0xffff0208

08003b88 <strcpy>:
 8003b88:	4603      	mov	r3, r0
 8003b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b8e:	f803 2b01 	strb.w	r2, [r3], #1
 8003b92:	2a00      	cmp	r2, #0
 8003b94:	d1f9      	bne.n	8003b8a <strcpy+0x2>
 8003b96:	4770      	bx	lr

08003b98 <__ssputs_r>:
 8003b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b9c:	688e      	ldr	r6, [r1, #8]
 8003b9e:	429e      	cmp	r6, r3
 8003ba0:	4682      	mov	sl, r0
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	4690      	mov	r8, r2
 8003ba6:	461f      	mov	r7, r3
 8003ba8:	d838      	bhi.n	8003c1c <__ssputs_r+0x84>
 8003baa:	898a      	ldrh	r2, [r1, #12]
 8003bac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bb0:	d032      	beq.n	8003c18 <__ssputs_r+0x80>
 8003bb2:	6825      	ldr	r5, [r4, #0]
 8003bb4:	6909      	ldr	r1, [r1, #16]
 8003bb6:	eba5 0901 	sub.w	r9, r5, r1
 8003bba:	6965      	ldr	r5, [r4, #20]
 8003bbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	444b      	add	r3, r9
 8003bc8:	106d      	asrs	r5, r5, #1
 8003bca:	429d      	cmp	r5, r3
 8003bcc:	bf38      	it	cc
 8003bce:	461d      	movcc	r5, r3
 8003bd0:	0553      	lsls	r3, r2, #21
 8003bd2:	d531      	bpl.n	8003c38 <__ssputs_r+0xa0>
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	f000 fb39 	bl	800424c <_malloc_r>
 8003bda:	4606      	mov	r6, r0
 8003bdc:	b950      	cbnz	r0, 8003bf4 <__ssputs_r+0x5c>
 8003bde:	230c      	movs	r3, #12
 8003be0:	f8ca 3000 	str.w	r3, [sl]
 8003be4:	89a3      	ldrh	r3, [r4, #12]
 8003be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bea:	81a3      	strh	r3, [r4, #12]
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf4:	6921      	ldr	r1, [r4, #16]
 8003bf6:	464a      	mov	r2, r9
 8003bf8:	f7ff ff90 	bl	8003b1c <memcpy>
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c06:	81a3      	strh	r3, [r4, #12]
 8003c08:	6126      	str	r6, [r4, #16]
 8003c0a:	6165      	str	r5, [r4, #20]
 8003c0c:	444e      	add	r6, r9
 8003c0e:	eba5 0509 	sub.w	r5, r5, r9
 8003c12:	6026      	str	r6, [r4, #0]
 8003c14:	60a5      	str	r5, [r4, #8]
 8003c16:	463e      	mov	r6, r7
 8003c18:	42be      	cmp	r6, r7
 8003c1a:	d900      	bls.n	8003c1e <__ssputs_r+0x86>
 8003c1c:	463e      	mov	r6, r7
 8003c1e:	4632      	mov	r2, r6
 8003c20:	6820      	ldr	r0, [r4, #0]
 8003c22:	4641      	mov	r1, r8
 8003c24:	f000 faa8 	bl	8004178 <memmove>
 8003c28:	68a3      	ldr	r3, [r4, #8]
 8003c2a:	6822      	ldr	r2, [r4, #0]
 8003c2c:	1b9b      	subs	r3, r3, r6
 8003c2e:	4432      	add	r2, r6
 8003c30:	60a3      	str	r3, [r4, #8]
 8003c32:	6022      	str	r2, [r4, #0]
 8003c34:	2000      	movs	r0, #0
 8003c36:	e7db      	b.n	8003bf0 <__ssputs_r+0x58>
 8003c38:	462a      	mov	r2, r5
 8003c3a:	f000 fb61 	bl	8004300 <_realloc_r>
 8003c3e:	4606      	mov	r6, r0
 8003c40:	2800      	cmp	r0, #0
 8003c42:	d1e1      	bne.n	8003c08 <__ssputs_r+0x70>
 8003c44:	6921      	ldr	r1, [r4, #16]
 8003c46:	4650      	mov	r0, sl
 8003c48:	f000 fab0 	bl	80041ac <_free_r>
 8003c4c:	e7c7      	b.n	8003bde <__ssputs_r+0x46>
	...

08003c50 <_svfiprintf_r>:
 8003c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c54:	4698      	mov	r8, r3
 8003c56:	898b      	ldrh	r3, [r1, #12]
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	b09d      	sub	sp, #116	; 0x74
 8003c5c:	4607      	mov	r7, r0
 8003c5e:	460d      	mov	r5, r1
 8003c60:	4614      	mov	r4, r2
 8003c62:	d50e      	bpl.n	8003c82 <_svfiprintf_r+0x32>
 8003c64:	690b      	ldr	r3, [r1, #16]
 8003c66:	b963      	cbnz	r3, 8003c82 <_svfiprintf_r+0x32>
 8003c68:	2140      	movs	r1, #64	; 0x40
 8003c6a:	f000 faef 	bl	800424c <_malloc_r>
 8003c6e:	6028      	str	r0, [r5, #0]
 8003c70:	6128      	str	r0, [r5, #16]
 8003c72:	b920      	cbnz	r0, 8003c7e <_svfiprintf_r+0x2e>
 8003c74:	230c      	movs	r3, #12
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7c:	e0d1      	b.n	8003e22 <_svfiprintf_r+0x1d2>
 8003c7e:	2340      	movs	r3, #64	; 0x40
 8003c80:	616b      	str	r3, [r5, #20]
 8003c82:	2300      	movs	r3, #0
 8003c84:	9309      	str	r3, [sp, #36]	; 0x24
 8003c86:	2320      	movs	r3, #32
 8003c88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c90:	2330      	movs	r3, #48	; 0x30
 8003c92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003e3c <_svfiprintf_r+0x1ec>
 8003c96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c9a:	f04f 0901 	mov.w	r9, #1
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	469a      	mov	sl, r3
 8003ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ca6:	b10a      	cbz	r2, 8003cac <_svfiprintf_r+0x5c>
 8003ca8:	2a25      	cmp	r2, #37	; 0x25
 8003caa:	d1f9      	bne.n	8003ca0 <_svfiprintf_r+0x50>
 8003cac:	ebba 0b04 	subs.w	fp, sl, r4
 8003cb0:	d00b      	beq.n	8003cca <_svfiprintf_r+0x7a>
 8003cb2:	465b      	mov	r3, fp
 8003cb4:	4622      	mov	r2, r4
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	4638      	mov	r0, r7
 8003cba:	f7ff ff6d 	bl	8003b98 <__ssputs_r>
 8003cbe:	3001      	adds	r0, #1
 8003cc0:	f000 80aa 	beq.w	8003e18 <_svfiprintf_r+0x1c8>
 8003cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cc6:	445a      	add	r2, fp
 8003cc8:	9209      	str	r2, [sp, #36]	; 0x24
 8003cca:	f89a 3000 	ldrb.w	r3, [sl]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80a2 	beq.w	8003e18 <_svfiprintf_r+0x1c8>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cde:	f10a 0a01 	add.w	sl, sl, #1
 8003ce2:	9304      	str	r3, [sp, #16]
 8003ce4:	9307      	str	r3, [sp, #28]
 8003ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cea:	931a      	str	r3, [sp, #104]	; 0x68
 8003cec:	4654      	mov	r4, sl
 8003cee:	2205      	movs	r2, #5
 8003cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf4:	4851      	ldr	r0, [pc, #324]	; (8003e3c <_svfiprintf_r+0x1ec>)
 8003cf6:	f7fc fa73 	bl	80001e0 <memchr>
 8003cfa:	9a04      	ldr	r2, [sp, #16]
 8003cfc:	b9d8      	cbnz	r0, 8003d36 <_svfiprintf_r+0xe6>
 8003cfe:	06d0      	lsls	r0, r2, #27
 8003d00:	bf44      	itt	mi
 8003d02:	2320      	movmi	r3, #32
 8003d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d08:	0711      	lsls	r1, r2, #28
 8003d0a:	bf44      	itt	mi
 8003d0c:	232b      	movmi	r3, #43	; 0x2b
 8003d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d12:	f89a 3000 	ldrb.w	r3, [sl]
 8003d16:	2b2a      	cmp	r3, #42	; 0x2a
 8003d18:	d015      	beq.n	8003d46 <_svfiprintf_r+0xf6>
 8003d1a:	9a07      	ldr	r2, [sp, #28]
 8003d1c:	4654      	mov	r4, sl
 8003d1e:	2000      	movs	r0, #0
 8003d20:	f04f 0c0a 	mov.w	ip, #10
 8003d24:	4621      	mov	r1, r4
 8003d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d2a:	3b30      	subs	r3, #48	; 0x30
 8003d2c:	2b09      	cmp	r3, #9
 8003d2e:	d94e      	bls.n	8003dce <_svfiprintf_r+0x17e>
 8003d30:	b1b0      	cbz	r0, 8003d60 <_svfiprintf_r+0x110>
 8003d32:	9207      	str	r2, [sp, #28]
 8003d34:	e014      	b.n	8003d60 <_svfiprintf_r+0x110>
 8003d36:	eba0 0308 	sub.w	r3, r0, r8
 8003d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	9304      	str	r3, [sp, #16]
 8003d42:	46a2      	mov	sl, r4
 8003d44:	e7d2      	b.n	8003cec <_svfiprintf_r+0x9c>
 8003d46:	9b03      	ldr	r3, [sp, #12]
 8003d48:	1d19      	adds	r1, r3, #4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	9103      	str	r1, [sp, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bfbb      	ittet	lt
 8003d52:	425b      	neglt	r3, r3
 8003d54:	f042 0202 	orrlt.w	r2, r2, #2
 8003d58:	9307      	strge	r3, [sp, #28]
 8003d5a:	9307      	strlt	r3, [sp, #28]
 8003d5c:	bfb8      	it	lt
 8003d5e:	9204      	strlt	r2, [sp, #16]
 8003d60:	7823      	ldrb	r3, [r4, #0]
 8003d62:	2b2e      	cmp	r3, #46	; 0x2e
 8003d64:	d10c      	bne.n	8003d80 <_svfiprintf_r+0x130>
 8003d66:	7863      	ldrb	r3, [r4, #1]
 8003d68:	2b2a      	cmp	r3, #42	; 0x2a
 8003d6a:	d135      	bne.n	8003dd8 <_svfiprintf_r+0x188>
 8003d6c:	9b03      	ldr	r3, [sp, #12]
 8003d6e:	1d1a      	adds	r2, r3, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	9203      	str	r2, [sp, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bfb8      	it	lt
 8003d78:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d7c:	3402      	adds	r4, #2
 8003d7e:	9305      	str	r3, [sp, #20]
 8003d80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e4c <_svfiprintf_r+0x1fc>
 8003d84:	7821      	ldrb	r1, [r4, #0]
 8003d86:	2203      	movs	r2, #3
 8003d88:	4650      	mov	r0, sl
 8003d8a:	f7fc fa29 	bl	80001e0 <memchr>
 8003d8e:	b140      	cbz	r0, 8003da2 <_svfiprintf_r+0x152>
 8003d90:	2340      	movs	r3, #64	; 0x40
 8003d92:	eba0 000a 	sub.w	r0, r0, sl
 8003d96:	fa03 f000 	lsl.w	r0, r3, r0
 8003d9a:	9b04      	ldr	r3, [sp, #16]
 8003d9c:	4303      	orrs	r3, r0
 8003d9e:	3401      	adds	r4, #1
 8003da0:	9304      	str	r3, [sp, #16]
 8003da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003da6:	4826      	ldr	r0, [pc, #152]	; (8003e40 <_svfiprintf_r+0x1f0>)
 8003da8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dac:	2206      	movs	r2, #6
 8003dae:	f7fc fa17 	bl	80001e0 <memchr>
 8003db2:	2800      	cmp	r0, #0
 8003db4:	d038      	beq.n	8003e28 <_svfiprintf_r+0x1d8>
 8003db6:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <_svfiprintf_r+0x1f4>)
 8003db8:	bb1b      	cbnz	r3, 8003e02 <_svfiprintf_r+0x1b2>
 8003dba:	9b03      	ldr	r3, [sp, #12]
 8003dbc:	3307      	adds	r3, #7
 8003dbe:	f023 0307 	bic.w	r3, r3, #7
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	9303      	str	r3, [sp, #12]
 8003dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc8:	4433      	add	r3, r6
 8003dca:	9309      	str	r3, [sp, #36]	; 0x24
 8003dcc:	e767      	b.n	8003c9e <_svfiprintf_r+0x4e>
 8003dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	e7a5      	b.n	8003d24 <_svfiprintf_r+0xd4>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	3401      	adds	r4, #1
 8003ddc:	9305      	str	r3, [sp, #20]
 8003dde:	4619      	mov	r1, r3
 8003de0:	f04f 0c0a 	mov.w	ip, #10
 8003de4:	4620      	mov	r0, r4
 8003de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dea:	3a30      	subs	r2, #48	; 0x30
 8003dec:	2a09      	cmp	r2, #9
 8003dee:	d903      	bls.n	8003df8 <_svfiprintf_r+0x1a8>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0c5      	beq.n	8003d80 <_svfiprintf_r+0x130>
 8003df4:	9105      	str	r1, [sp, #20]
 8003df6:	e7c3      	b.n	8003d80 <_svfiprintf_r+0x130>
 8003df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e7f0      	b.n	8003de4 <_svfiprintf_r+0x194>
 8003e02:	ab03      	add	r3, sp, #12
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	462a      	mov	r2, r5
 8003e08:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <_svfiprintf_r+0x1f8>)
 8003e0a:	a904      	add	r1, sp, #16
 8003e0c:	4638      	mov	r0, r7
 8003e0e:	f3af 8000 	nop.w
 8003e12:	1c42      	adds	r2, r0, #1
 8003e14:	4606      	mov	r6, r0
 8003e16:	d1d6      	bne.n	8003dc6 <_svfiprintf_r+0x176>
 8003e18:	89ab      	ldrh	r3, [r5, #12]
 8003e1a:	065b      	lsls	r3, r3, #25
 8003e1c:	f53f af2c 	bmi.w	8003c78 <_svfiprintf_r+0x28>
 8003e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e22:	b01d      	add	sp, #116	; 0x74
 8003e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e28:	ab03      	add	r3, sp, #12
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	462a      	mov	r2, r5
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <_svfiprintf_r+0x1f8>)
 8003e30:	a904      	add	r1, sp, #16
 8003e32:	4638      	mov	r0, r7
 8003e34:	f000 f87a 	bl	8003f2c <_printf_i>
 8003e38:	e7eb      	b.n	8003e12 <_svfiprintf_r+0x1c2>
 8003e3a:	bf00      	nop
 8003e3c:	08004454 	.word	0x08004454
 8003e40:	0800445e 	.word	0x0800445e
 8003e44:	00000000 	.word	0x00000000
 8003e48:	08003b99 	.word	0x08003b99
 8003e4c:	0800445a 	.word	0x0800445a

08003e50 <_printf_common>:
 8003e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e54:	4616      	mov	r6, r2
 8003e56:	4699      	mov	r9, r3
 8003e58:	688a      	ldr	r2, [r1, #8]
 8003e5a:	690b      	ldr	r3, [r1, #16]
 8003e5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e60:	4293      	cmp	r3, r2
 8003e62:	bfb8      	it	lt
 8003e64:	4613      	movlt	r3, r2
 8003e66:	6033      	str	r3, [r6, #0]
 8003e68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e6c:	4607      	mov	r7, r0
 8003e6e:	460c      	mov	r4, r1
 8003e70:	b10a      	cbz	r2, 8003e76 <_printf_common+0x26>
 8003e72:	3301      	adds	r3, #1
 8003e74:	6033      	str	r3, [r6, #0]
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	0699      	lsls	r1, r3, #26
 8003e7a:	bf42      	ittt	mi
 8003e7c:	6833      	ldrmi	r3, [r6, #0]
 8003e7e:	3302      	addmi	r3, #2
 8003e80:	6033      	strmi	r3, [r6, #0]
 8003e82:	6825      	ldr	r5, [r4, #0]
 8003e84:	f015 0506 	ands.w	r5, r5, #6
 8003e88:	d106      	bne.n	8003e98 <_printf_common+0x48>
 8003e8a:	f104 0a19 	add.w	sl, r4, #25
 8003e8e:	68e3      	ldr	r3, [r4, #12]
 8003e90:	6832      	ldr	r2, [r6, #0]
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	42ab      	cmp	r3, r5
 8003e96:	dc26      	bgt.n	8003ee6 <_printf_common+0x96>
 8003e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e9c:	1e13      	subs	r3, r2, #0
 8003e9e:	6822      	ldr	r2, [r4, #0]
 8003ea0:	bf18      	it	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	0692      	lsls	r2, r2, #26
 8003ea6:	d42b      	bmi.n	8003f00 <_printf_common+0xb0>
 8003ea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eac:	4649      	mov	r1, r9
 8003eae:	4638      	mov	r0, r7
 8003eb0:	47c0      	blx	r8
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d01e      	beq.n	8003ef4 <_printf_common+0xa4>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	68e5      	ldr	r5, [r4, #12]
 8003eba:	6832      	ldr	r2, [r6, #0]
 8003ebc:	f003 0306 	and.w	r3, r3, #6
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	bf08      	it	eq
 8003ec4:	1aad      	subeq	r5, r5, r2
 8003ec6:	68a3      	ldr	r3, [r4, #8]
 8003ec8:	6922      	ldr	r2, [r4, #16]
 8003eca:	bf0c      	ite	eq
 8003ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ed0:	2500      	movne	r5, #0
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	bfc4      	itt	gt
 8003ed6:	1a9b      	subgt	r3, r3, r2
 8003ed8:	18ed      	addgt	r5, r5, r3
 8003eda:	2600      	movs	r6, #0
 8003edc:	341a      	adds	r4, #26
 8003ede:	42b5      	cmp	r5, r6
 8003ee0:	d11a      	bne.n	8003f18 <_printf_common+0xc8>
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	e008      	b.n	8003ef8 <_printf_common+0xa8>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	4652      	mov	r2, sl
 8003eea:	4649      	mov	r1, r9
 8003eec:	4638      	mov	r0, r7
 8003eee:	47c0      	blx	r8
 8003ef0:	3001      	adds	r0, #1
 8003ef2:	d103      	bne.n	8003efc <_printf_common+0xac>
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003efc:	3501      	adds	r5, #1
 8003efe:	e7c6      	b.n	8003e8e <_printf_common+0x3e>
 8003f00:	18e1      	adds	r1, r4, r3
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	2030      	movs	r0, #48	; 0x30
 8003f06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f0a:	4422      	add	r2, r4
 8003f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f14:	3302      	adds	r3, #2
 8003f16:	e7c7      	b.n	8003ea8 <_printf_common+0x58>
 8003f18:	2301      	movs	r3, #1
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	4638      	mov	r0, r7
 8003f20:	47c0      	blx	r8
 8003f22:	3001      	adds	r0, #1
 8003f24:	d0e6      	beq.n	8003ef4 <_printf_common+0xa4>
 8003f26:	3601      	adds	r6, #1
 8003f28:	e7d9      	b.n	8003ede <_printf_common+0x8e>
	...

08003f2c <_printf_i>:
 8003f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f30:	460c      	mov	r4, r1
 8003f32:	4691      	mov	r9, r2
 8003f34:	7e27      	ldrb	r7, [r4, #24]
 8003f36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f38:	2f78      	cmp	r7, #120	; 0x78
 8003f3a:	4680      	mov	r8, r0
 8003f3c:	469a      	mov	sl, r3
 8003f3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f42:	d807      	bhi.n	8003f54 <_printf_i+0x28>
 8003f44:	2f62      	cmp	r7, #98	; 0x62
 8003f46:	d80a      	bhi.n	8003f5e <_printf_i+0x32>
 8003f48:	2f00      	cmp	r7, #0
 8003f4a:	f000 80d8 	beq.w	80040fe <_printf_i+0x1d2>
 8003f4e:	2f58      	cmp	r7, #88	; 0x58
 8003f50:	f000 80a3 	beq.w	800409a <_printf_i+0x16e>
 8003f54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f5c:	e03a      	b.n	8003fd4 <_printf_i+0xa8>
 8003f5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f62:	2b15      	cmp	r3, #21
 8003f64:	d8f6      	bhi.n	8003f54 <_printf_i+0x28>
 8003f66:	a001      	add	r0, pc, #4	; (adr r0, 8003f6c <_printf_i+0x40>)
 8003f68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f6c:	08003fc5 	.word	0x08003fc5
 8003f70:	08003fd9 	.word	0x08003fd9
 8003f74:	08003f55 	.word	0x08003f55
 8003f78:	08003f55 	.word	0x08003f55
 8003f7c:	08003f55 	.word	0x08003f55
 8003f80:	08003f55 	.word	0x08003f55
 8003f84:	08003fd9 	.word	0x08003fd9
 8003f88:	08003f55 	.word	0x08003f55
 8003f8c:	08003f55 	.word	0x08003f55
 8003f90:	08003f55 	.word	0x08003f55
 8003f94:	08003f55 	.word	0x08003f55
 8003f98:	080040e5 	.word	0x080040e5
 8003f9c:	08004009 	.word	0x08004009
 8003fa0:	080040c7 	.word	0x080040c7
 8003fa4:	08003f55 	.word	0x08003f55
 8003fa8:	08003f55 	.word	0x08003f55
 8003fac:	08004107 	.word	0x08004107
 8003fb0:	08003f55 	.word	0x08003f55
 8003fb4:	08004009 	.word	0x08004009
 8003fb8:	08003f55 	.word	0x08003f55
 8003fbc:	08003f55 	.word	0x08003f55
 8003fc0:	080040cf 	.word	0x080040cf
 8003fc4:	680b      	ldr	r3, [r1, #0]
 8003fc6:	1d1a      	adds	r2, r3, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	600a      	str	r2, [r1, #0]
 8003fcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0a3      	b.n	8004120 <_printf_i+0x1f4>
 8003fd8:	6825      	ldr	r5, [r4, #0]
 8003fda:	6808      	ldr	r0, [r1, #0]
 8003fdc:	062e      	lsls	r6, r5, #24
 8003fde:	f100 0304 	add.w	r3, r0, #4
 8003fe2:	d50a      	bpl.n	8003ffa <_printf_i+0xce>
 8003fe4:	6805      	ldr	r5, [r0, #0]
 8003fe6:	600b      	str	r3, [r1, #0]
 8003fe8:	2d00      	cmp	r5, #0
 8003fea:	da03      	bge.n	8003ff4 <_printf_i+0xc8>
 8003fec:	232d      	movs	r3, #45	; 0x2d
 8003fee:	426d      	negs	r5, r5
 8003ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ff4:	485e      	ldr	r0, [pc, #376]	; (8004170 <_printf_i+0x244>)
 8003ff6:	230a      	movs	r3, #10
 8003ff8:	e019      	b.n	800402e <_printf_i+0x102>
 8003ffa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003ffe:	6805      	ldr	r5, [r0, #0]
 8004000:	600b      	str	r3, [r1, #0]
 8004002:	bf18      	it	ne
 8004004:	b22d      	sxthne	r5, r5
 8004006:	e7ef      	b.n	8003fe8 <_printf_i+0xbc>
 8004008:	680b      	ldr	r3, [r1, #0]
 800400a:	6825      	ldr	r5, [r4, #0]
 800400c:	1d18      	adds	r0, r3, #4
 800400e:	6008      	str	r0, [r1, #0]
 8004010:	0628      	lsls	r0, r5, #24
 8004012:	d501      	bpl.n	8004018 <_printf_i+0xec>
 8004014:	681d      	ldr	r5, [r3, #0]
 8004016:	e002      	b.n	800401e <_printf_i+0xf2>
 8004018:	0669      	lsls	r1, r5, #25
 800401a:	d5fb      	bpl.n	8004014 <_printf_i+0xe8>
 800401c:	881d      	ldrh	r5, [r3, #0]
 800401e:	4854      	ldr	r0, [pc, #336]	; (8004170 <_printf_i+0x244>)
 8004020:	2f6f      	cmp	r7, #111	; 0x6f
 8004022:	bf0c      	ite	eq
 8004024:	2308      	moveq	r3, #8
 8004026:	230a      	movne	r3, #10
 8004028:	2100      	movs	r1, #0
 800402a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800402e:	6866      	ldr	r6, [r4, #4]
 8004030:	60a6      	str	r6, [r4, #8]
 8004032:	2e00      	cmp	r6, #0
 8004034:	bfa2      	ittt	ge
 8004036:	6821      	ldrge	r1, [r4, #0]
 8004038:	f021 0104 	bicge.w	r1, r1, #4
 800403c:	6021      	strge	r1, [r4, #0]
 800403e:	b90d      	cbnz	r5, 8004044 <_printf_i+0x118>
 8004040:	2e00      	cmp	r6, #0
 8004042:	d04d      	beq.n	80040e0 <_printf_i+0x1b4>
 8004044:	4616      	mov	r6, r2
 8004046:	fbb5 f1f3 	udiv	r1, r5, r3
 800404a:	fb03 5711 	mls	r7, r3, r1, r5
 800404e:	5dc7      	ldrb	r7, [r0, r7]
 8004050:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004054:	462f      	mov	r7, r5
 8004056:	42bb      	cmp	r3, r7
 8004058:	460d      	mov	r5, r1
 800405a:	d9f4      	bls.n	8004046 <_printf_i+0x11a>
 800405c:	2b08      	cmp	r3, #8
 800405e:	d10b      	bne.n	8004078 <_printf_i+0x14c>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	07df      	lsls	r7, r3, #31
 8004064:	d508      	bpl.n	8004078 <_printf_i+0x14c>
 8004066:	6923      	ldr	r3, [r4, #16]
 8004068:	6861      	ldr	r1, [r4, #4]
 800406a:	4299      	cmp	r1, r3
 800406c:	bfde      	ittt	le
 800406e:	2330      	movle	r3, #48	; 0x30
 8004070:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004074:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004078:	1b92      	subs	r2, r2, r6
 800407a:	6122      	str	r2, [r4, #16]
 800407c:	f8cd a000 	str.w	sl, [sp]
 8004080:	464b      	mov	r3, r9
 8004082:	aa03      	add	r2, sp, #12
 8004084:	4621      	mov	r1, r4
 8004086:	4640      	mov	r0, r8
 8004088:	f7ff fee2 	bl	8003e50 <_printf_common>
 800408c:	3001      	adds	r0, #1
 800408e:	d14c      	bne.n	800412a <_printf_i+0x1fe>
 8004090:	f04f 30ff 	mov.w	r0, #4294967295
 8004094:	b004      	add	sp, #16
 8004096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409a:	4835      	ldr	r0, [pc, #212]	; (8004170 <_printf_i+0x244>)
 800409c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	680e      	ldr	r6, [r1, #0]
 80040a4:	061f      	lsls	r7, r3, #24
 80040a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80040aa:	600e      	str	r6, [r1, #0]
 80040ac:	d514      	bpl.n	80040d8 <_printf_i+0x1ac>
 80040ae:	07d9      	lsls	r1, r3, #31
 80040b0:	bf44      	itt	mi
 80040b2:	f043 0320 	orrmi.w	r3, r3, #32
 80040b6:	6023      	strmi	r3, [r4, #0]
 80040b8:	b91d      	cbnz	r5, 80040c2 <_printf_i+0x196>
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	f023 0320 	bic.w	r3, r3, #32
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	2310      	movs	r3, #16
 80040c4:	e7b0      	b.n	8004028 <_printf_i+0xfc>
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	f043 0320 	orr.w	r3, r3, #32
 80040cc:	6023      	str	r3, [r4, #0]
 80040ce:	2378      	movs	r3, #120	; 0x78
 80040d0:	4828      	ldr	r0, [pc, #160]	; (8004174 <_printf_i+0x248>)
 80040d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040d6:	e7e3      	b.n	80040a0 <_printf_i+0x174>
 80040d8:	065e      	lsls	r6, r3, #25
 80040da:	bf48      	it	mi
 80040dc:	b2ad      	uxthmi	r5, r5
 80040de:	e7e6      	b.n	80040ae <_printf_i+0x182>
 80040e0:	4616      	mov	r6, r2
 80040e2:	e7bb      	b.n	800405c <_printf_i+0x130>
 80040e4:	680b      	ldr	r3, [r1, #0]
 80040e6:	6826      	ldr	r6, [r4, #0]
 80040e8:	6960      	ldr	r0, [r4, #20]
 80040ea:	1d1d      	adds	r5, r3, #4
 80040ec:	600d      	str	r5, [r1, #0]
 80040ee:	0635      	lsls	r5, r6, #24
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	d501      	bpl.n	80040f8 <_printf_i+0x1cc>
 80040f4:	6018      	str	r0, [r3, #0]
 80040f6:	e002      	b.n	80040fe <_printf_i+0x1d2>
 80040f8:	0671      	lsls	r1, r6, #25
 80040fa:	d5fb      	bpl.n	80040f4 <_printf_i+0x1c8>
 80040fc:	8018      	strh	r0, [r3, #0]
 80040fe:	2300      	movs	r3, #0
 8004100:	6123      	str	r3, [r4, #16]
 8004102:	4616      	mov	r6, r2
 8004104:	e7ba      	b.n	800407c <_printf_i+0x150>
 8004106:	680b      	ldr	r3, [r1, #0]
 8004108:	1d1a      	adds	r2, r3, #4
 800410a:	600a      	str	r2, [r1, #0]
 800410c:	681e      	ldr	r6, [r3, #0]
 800410e:	6862      	ldr	r2, [r4, #4]
 8004110:	2100      	movs	r1, #0
 8004112:	4630      	mov	r0, r6
 8004114:	f7fc f864 	bl	80001e0 <memchr>
 8004118:	b108      	cbz	r0, 800411e <_printf_i+0x1f2>
 800411a:	1b80      	subs	r0, r0, r6
 800411c:	6060      	str	r0, [r4, #4]
 800411e:	6863      	ldr	r3, [r4, #4]
 8004120:	6123      	str	r3, [r4, #16]
 8004122:	2300      	movs	r3, #0
 8004124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004128:	e7a8      	b.n	800407c <_printf_i+0x150>
 800412a:	6923      	ldr	r3, [r4, #16]
 800412c:	4632      	mov	r2, r6
 800412e:	4649      	mov	r1, r9
 8004130:	4640      	mov	r0, r8
 8004132:	47d0      	blx	sl
 8004134:	3001      	adds	r0, #1
 8004136:	d0ab      	beq.n	8004090 <_printf_i+0x164>
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	079b      	lsls	r3, r3, #30
 800413c:	d413      	bmi.n	8004166 <_printf_i+0x23a>
 800413e:	68e0      	ldr	r0, [r4, #12]
 8004140:	9b03      	ldr	r3, [sp, #12]
 8004142:	4298      	cmp	r0, r3
 8004144:	bfb8      	it	lt
 8004146:	4618      	movlt	r0, r3
 8004148:	e7a4      	b.n	8004094 <_printf_i+0x168>
 800414a:	2301      	movs	r3, #1
 800414c:	4632      	mov	r2, r6
 800414e:	4649      	mov	r1, r9
 8004150:	4640      	mov	r0, r8
 8004152:	47d0      	blx	sl
 8004154:	3001      	adds	r0, #1
 8004156:	d09b      	beq.n	8004090 <_printf_i+0x164>
 8004158:	3501      	adds	r5, #1
 800415a:	68e3      	ldr	r3, [r4, #12]
 800415c:	9903      	ldr	r1, [sp, #12]
 800415e:	1a5b      	subs	r3, r3, r1
 8004160:	42ab      	cmp	r3, r5
 8004162:	dcf2      	bgt.n	800414a <_printf_i+0x21e>
 8004164:	e7eb      	b.n	800413e <_printf_i+0x212>
 8004166:	2500      	movs	r5, #0
 8004168:	f104 0619 	add.w	r6, r4, #25
 800416c:	e7f5      	b.n	800415a <_printf_i+0x22e>
 800416e:	bf00      	nop
 8004170:	08004465 	.word	0x08004465
 8004174:	08004476 	.word	0x08004476

08004178 <memmove>:
 8004178:	4288      	cmp	r0, r1
 800417a:	b510      	push	{r4, lr}
 800417c:	eb01 0402 	add.w	r4, r1, r2
 8004180:	d902      	bls.n	8004188 <memmove+0x10>
 8004182:	4284      	cmp	r4, r0
 8004184:	4623      	mov	r3, r4
 8004186:	d807      	bhi.n	8004198 <memmove+0x20>
 8004188:	1e43      	subs	r3, r0, #1
 800418a:	42a1      	cmp	r1, r4
 800418c:	d008      	beq.n	80041a0 <memmove+0x28>
 800418e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004192:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004196:	e7f8      	b.n	800418a <memmove+0x12>
 8004198:	4402      	add	r2, r0
 800419a:	4601      	mov	r1, r0
 800419c:	428a      	cmp	r2, r1
 800419e:	d100      	bne.n	80041a2 <memmove+0x2a>
 80041a0:	bd10      	pop	{r4, pc}
 80041a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041aa:	e7f7      	b.n	800419c <memmove+0x24>

080041ac <_free_r>:
 80041ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041ae:	2900      	cmp	r1, #0
 80041b0:	d048      	beq.n	8004244 <_free_r+0x98>
 80041b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b6:	9001      	str	r0, [sp, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f1a1 0404 	sub.w	r4, r1, #4
 80041be:	bfb8      	it	lt
 80041c0:	18e4      	addlt	r4, r4, r3
 80041c2:	f000 f8d3 	bl	800436c <__malloc_lock>
 80041c6:	4a20      	ldr	r2, [pc, #128]	; (8004248 <_free_r+0x9c>)
 80041c8:	9801      	ldr	r0, [sp, #4]
 80041ca:	6813      	ldr	r3, [r2, #0]
 80041cc:	4615      	mov	r5, r2
 80041ce:	b933      	cbnz	r3, 80041de <_free_r+0x32>
 80041d0:	6063      	str	r3, [r4, #4]
 80041d2:	6014      	str	r4, [r2, #0]
 80041d4:	b003      	add	sp, #12
 80041d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041da:	f000 b8cd 	b.w	8004378 <__malloc_unlock>
 80041de:	42a3      	cmp	r3, r4
 80041e0:	d90b      	bls.n	80041fa <_free_r+0x4e>
 80041e2:	6821      	ldr	r1, [r4, #0]
 80041e4:	1862      	adds	r2, r4, r1
 80041e6:	4293      	cmp	r3, r2
 80041e8:	bf04      	itt	eq
 80041ea:	681a      	ldreq	r2, [r3, #0]
 80041ec:	685b      	ldreq	r3, [r3, #4]
 80041ee:	6063      	str	r3, [r4, #4]
 80041f0:	bf04      	itt	eq
 80041f2:	1852      	addeq	r2, r2, r1
 80041f4:	6022      	streq	r2, [r4, #0]
 80041f6:	602c      	str	r4, [r5, #0]
 80041f8:	e7ec      	b.n	80041d4 <_free_r+0x28>
 80041fa:	461a      	mov	r2, r3
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	b10b      	cbz	r3, 8004204 <_free_r+0x58>
 8004200:	42a3      	cmp	r3, r4
 8004202:	d9fa      	bls.n	80041fa <_free_r+0x4e>
 8004204:	6811      	ldr	r1, [r2, #0]
 8004206:	1855      	adds	r5, r2, r1
 8004208:	42a5      	cmp	r5, r4
 800420a:	d10b      	bne.n	8004224 <_free_r+0x78>
 800420c:	6824      	ldr	r4, [r4, #0]
 800420e:	4421      	add	r1, r4
 8004210:	1854      	adds	r4, r2, r1
 8004212:	42a3      	cmp	r3, r4
 8004214:	6011      	str	r1, [r2, #0]
 8004216:	d1dd      	bne.n	80041d4 <_free_r+0x28>
 8004218:	681c      	ldr	r4, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	6053      	str	r3, [r2, #4]
 800421e:	4421      	add	r1, r4
 8004220:	6011      	str	r1, [r2, #0]
 8004222:	e7d7      	b.n	80041d4 <_free_r+0x28>
 8004224:	d902      	bls.n	800422c <_free_r+0x80>
 8004226:	230c      	movs	r3, #12
 8004228:	6003      	str	r3, [r0, #0]
 800422a:	e7d3      	b.n	80041d4 <_free_r+0x28>
 800422c:	6825      	ldr	r5, [r4, #0]
 800422e:	1961      	adds	r1, r4, r5
 8004230:	428b      	cmp	r3, r1
 8004232:	bf04      	itt	eq
 8004234:	6819      	ldreq	r1, [r3, #0]
 8004236:	685b      	ldreq	r3, [r3, #4]
 8004238:	6063      	str	r3, [r4, #4]
 800423a:	bf04      	itt	eq
 800423c:	1949      	addeq	r1, r1, r5
 800423e:	6021      	streq	r1, [r4, #0]
 8004240:	6054      	str	r4, [r2, #4]
 8004242:	e7c7      	b.n	80041d4 <_free_r+0x28>
 8004244:	b003      	add	sp, #12
 8004246:	bd30      	pop	{r4, r5, pc}
 8004248:	200015b8 	.word	0x200015b8

0800424c <_malloc_r>:
 800424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424e:	1ccd      	adds	r5, r1, #3
 8004250:	f025 0503 	bic.w	r5, r5, #3
 8004254:	3508      	adds	r5, #8
 8004256:	2d0c      	cmp	r5, #12
 8004258:	bf38      	it	cc
 800425a:	250c      	movcc	r5, #12
 800425c:	2d00      	cmp	r5, #0
 800425e:	4606      	mov	r6, r0
 8004260:	db01      	blt.n	8004266 <_malloc_r+0x1a>
 8004262:	42a9      	cmp	r1, r5
 8004264:	d903      	bls.n	800426e <_malloc_r+0x22>
 8004266:	230c      	movs	r3, #12
 8004268:	6033      	str	r3, [r6, #0]
 800426a:	2000      	movs	r0, #0
 800426c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800426e:	f000 f87d 	bl	800436c <__malloc_lock>
 8004272:	4921      	ldr	r1, [pc, #132]	; (80042f8 <_malloc_r+0xac>)
 8004274:	680a      	ldr	r2, [r1, #0]
 8004276:	4614      	mov	r4, r2
 8004278:	b99c      	cbnz	r4, 80042a2 <_malloc_r+0x56>
 800427a:	4f20      	ldr	r7, [pc, #128]	; (80042fc <_malloc_r+0xb0>)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	b923      	cbnz	r3, 800428a <_malloc_r+0x3e>
 8004280:	4621      	mov	r1, r4
 8004282:	4630      	mov	r0, r6
 8004284:	f000 f862 	bl	800434c <_sbrk_r>
 8004288:	6038      	str	r0, [r7, #0]
 800428a:	4629      	mov	r1, r5
 800428c:	4630      	mov	r0, r6
 800428e:	f000 f85d 	bl	800434c <_sbrk_r>
 8004292:	1c43      	adds	r3, r0, #1
 8004294:	d123      	bne.n	80042de <_malloc_r+0x92>
 8004296:	230c      	movs	r3, #12
 8004298:	6033      	str	r3, [r6, #0]
 800429a:	4630      	mov	r0, r6
 800429c:	f000 f86c 	bl	8004378 <__malloc_unlock>
 80042a0:	e7e3      	b.n	800426a <_malloc_r+0x1e>
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	1b5b      	subs	r3, r3, r5
 80042a6:	d417      	bmi.n	80042d8 <_malloc_r+0x8c>
 80042a8:	2b0b      	cmp	r3, #11
 80042aa:	d903      	bls.n	80042b4 <_malloc_r+0x68>
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	441c      	add	r4, r3
 80042b0:	6025      	str	r5, [r4, #0]
 80042b2:	e004      	b.n	80042be <_malloc_r+0x72>
 80042b4:	6863      	ldr	r3, [r4, #4]
 80042b6:	42a2      	cmp	r2, r4
 80042b8:	bf0c      	ite	eq
 80042ba:	600b      	streq	r3, [r1, #0]
 80042bc:	6053      	strne	r3, [r2, #4]
 80042be:	4630      	mov	r0, r6
 80042c0:	f000 f85a 	bl	8004378 <__malloc_unlock>
 80042c4:	f104 000b 	add.w	r0, r4, #11
 80042c8:	1d23      	adds	r3, r4, #4
 80042ca:	f020 0007 	bic.w	r0, r0, #7
 80042ce:	1ac2      	subs	r2, r0, r3
 80042d0:	d0cc      	beq.n	800426c <_malloc_r+0x20>
 80042d2:	1a1b      	subs	r3, r3, r0
 80042d4:	50a3      	str	r3, [r4, r2]
 80042d6:	e7c9      	b.n	800426c <_malloc_r+0x20>
 80042d8:	4622      	mov	r2, r4
 80042da:	6864      	ldr	r4, [r4, #4]
 80042dc:	e7cc      	b.n	8004278 <_malloc_r+0x2c>
 80042de:	1cc4      	adds	r4, r0, #3
 80042e0:	f024 0403 	bic.w	r4, r4, #3
 80042e4:	42a0      	cmp	r0, r4
 80042e6:	d0e3      	beq.n	80042b0 <_malloc_r+0x64>
 80042e8:	1a21      	subs	r1, r4, r0
 80042ea:	4630      	mov	r0, r6
 80042ec:	f000 f82e 	bl	800434c <_sbrk_r>
 80042f0:	3001      	adds	r0, #1
 80042f2:	d1dd      	bne.n	80042b0 <_malloc_r+0x64>
 80042f4:	e7cf      	b.n	8004296 <_malloc_r+0x4a>
 80042f6:	bf00      	nop
 80042f8:	200015b8 	.word	0x200015b8
 80042fc:	200015bc 	.word	0x200015bc

08004300 <_realloc_r>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	4607      	mov	r7, r0
 8004304:	4614      	mov	r4, r2
 8004306:	460e      	mov	r6, r1
 8004308:	b921      	cbnz	r1, 8004314 <_realloc_r+0x14>
 800430a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800430e:	4611      	mov	r1, r2
 8004310:	f7ff bf9c 	b.w	800424c <_malloc_r>
 8004314:	b922      	cbnz	r2, 8004320 <_realloc_r+0x20>
 8004316:	f7ff ff49 	bl	80041ac <_free_r>
 800431a:	4625      	mov	r5, r4
 800431c:	4628      	mov	r0, r5
 800431e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004320:	f000 f830 	bl	8004384 <_malloc_usable_size_r>
 8004324:	42a0      	cmp	r0, r4
 8004326:	d20f      	bcs.n	8004348 <_realloc_r+0x48>
 8004328:	4621      	mov	r1, r4
 800432a:	4638      	mov	r0, r7
 800432c:	f7ff ff8e 	bl	800424c <_malloc_r>
 8004330:	4605      	mov	r5, r0
 8004332:	2800      	cmp	r0, #0
 8004334:	d0f2      	beq.n	800431c <_realloc_r+0x1c>
 8004336:	4631      	mov	r1, r6
 8004338:	4622      	mov	r2, r4
 800433a:	f7ff fbef 	bl	8003b1c <memcpy>
 800433e:	4631      	mov	r1, r6
 8004340:	4638      	mov	r0, r7
 8004342:	f7ff ff33 	bl	80041ac <_free_r>
 8004346:	e7e9      	b.n	800431c <_realloc_r+0x1c>
 8004348:	4635      	mov	r5, r6
 800434a:	e7e7      	b.n	800431c <_realloc_r+0x1c>

0800434c <_sbrk_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	4d06      	ldr	r5, [pc, #24]	; (8004368 <_sbrk_r+0x1c>)
 8004350:	2300      	movs	r3, #0
 8004352:	4604      	mov	r4, r0
 8004354:	4608      	mov	r0, r1
 8004356:	602b      	str	r3, [r5, #0]
 8004358:	f7fc fca8 	bl	8000cac <_sbrk>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d102      	bne.n	8004366 <_sbrk_r+0x1a>
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	b103      	cbz	r3, 8004366 <_sbrk_r+0x1a>
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	bd38      	pop	{r3, r4, r5, pc}
 8004368:	20001650 	.word	0x20001650

0800436c <__malloc_lock>:
 800436c:	4801      	ldr	r0, [pc, #4]	; (8004374 <__malloc_lock+0x8>)
 800436e:	f000 b811 	b.w	8004394 <__retarget_lock_acquire_recursive>
 8004372:	bf00      	nop
 8004374:	20001658 	.word	0x20001658

08004378 <__malloc_unlock>:
 8004378:	4801      	ldr	r0, [pc, #4]	; (8004380 <__malloc_unlock+0x8>)
 800437a:	f000 b80c 	b.w	8004396 <__retarget_lock_release_recursive>
 800437e:	bf00      	nop
 8004380:	20001658 	.word	0x20001658

08004384 <_malloc_usable_size_r>:
 8004384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004388:	1f18      	subs	r0, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	bfbc      	itt	lt
 800438e:	580b      	ldrlt	r3, [r1, r0]
 8004390:	18c0      	addlt	r0, r0, r3
 8004392:	4770      	bx	lr

08004394 <__retarget_lock_acquire_recursive>:
 8004394:	4770      	bx	lr

08004396 <__retarget_lock_release_recursive>:
 8004396:	4770      	bx	lr

08004398 <_init>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	bf00      	nop
 800439c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439e:	bc08      	pop	{r3}
 80043a0:	469e      	mov	lr, r3
 80043a2:	4770      	bx	lr

080043a4 <_fini>:
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	bf00      	nop
 80043a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043aa:	bc08      	pop	{r3}
 80043ac:	469e      	mov	lr, r3
 80043ae:	4770      	bx	lr
